{
	"id": "70a0806b945aa330fcf8eab084f2d609",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/BNBPrice.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nimport \"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol\";\r\nimport \"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\";\r\nimport \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\";\r\n\r\ncontract BNBPrice{\r\n    uint public lastPriceStatic;\r\n    address public bnb;\r\n    address public usd;\r\n    address payable public owner;\r\n    address[] public poolsUSD;\r\n    mapping( address => bool ) public eqMode; //   averageBnbToUsd ? averageUsdToBnb\r\n    mapping(address => uint256) public lastPrice;\r\n    uint internal tax; // default 60e12\r\n    event callAverage(address caller , uint tickPrice);\r\n\r\n\r\n    constructor(){\r\n        owner = payable(msg.sender);\r\n        bnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        usd = 0x55d398326f99059fF775485246999027B3197955;\r\n        tax = 1;  // default 60e12\r\n    }\r\n\r\n    modifier onlyOwner{\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    // 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865 100 500 10000\r\n    function addPoolUSD(address _factory, uint24 _fee) external onlyOwner {\r\n        address pool = IPancakeV3Factory(_factory).getPool(\r\n            usd,\r\n            bnb,\r\n            _fee\r\n        );\r\n        require(pool != address(0) , \"Pool Not Found\");\r\n        poolsUSD.push(pool);\r\n    }\r\n\r\n    function removePoolUSD(uint8 index) external onlyOwner{\r\n        poolsUSD[index] = poolsUSD[poolsUSD.length - 1];\r\n        poolsUSD.pop();\r\n    }\r\n\r\n    function usdToBnb(uint8 index) external view  returns (uint price){\r\n        (,int24 tick,,,,,) = IPancakeV3Pool(poolsUSD[index]).slot0();\r\n        price = OracleLibrary.getQuoteAtTick(\r\n            tick, 1e18, usd, bnb\r\n            ) ;\r\n    }\r\n\r\n\r\n    function bnbToUsd(uint8 index) external view  returns (uint price){\r\n        (,int24 tick,,,,,) = IPancakeV3Pool(poolsUSD[index]).slot0();\r\n        price = OracleLibrary.getQuoteAtTick(\r\n            tick, 1e18, bnb, usd\r\n            );\r\n    }\r\n    \r\n    \r\n    function _average(bool _mode) internal view returns (uint256 average) {\r\n        uint256 prices;\r\n        uint8 validCount;\r\n\r\n        for (uint8 i = 0; i < poolsUSD.length; i++) {\r\n            (, int24 tick,,,,,) = IPancakeV3Pool(poolsUSD[i]).slot0();\r\n            uint256 price = OracleLibrary.getQuoteAtTick(\r\n                tick,\r\n                1e18,\r\n                _mode ? usd : bnb,\r\n                _mode ? bnb : usd\r\n            );\r\n\r\n            if (price > 0) {\r\n                prices += price;\r\n                validCount++;\r\n            }\r\n        }\r\n\r\n        require(validCount > 0, \"No price found\");\r\n        average = prices / validCount;\r\n    }\r\n\r\n    function setBnbAddress(address _bnb) public onlyOwner{\r\n        bnb = _bnb;\r\n    }\r\n\r\n    function setUsdAddress(address _usd) public onlyOwner{\r\n        usd = _usd;\r\n    }\r\n\r\n    function setEqMode() public {\r\n        eqMode[msg.sender] = !eqMode[msg.sender];\r\n    }\r\n\r\n\r\n    function getEqMode() public view returns (bool){\r\n        return eqMode[msg.sender];\r\n    }\r\n\r\n    function poolsLenght() public view returns(uint){\r\n    uint count = poolsUSD.length;\r\n    return count;\r\n    }\r\n\r\n    function getEqModeString() public view returns( string memory) {\r\n        string memory em = eqMode[msg.sender] ?  \"USDTBNB\" : \"BNBUSDT\";\r\n        return em;\r\n    }\r\n\r\n    function changeOwner(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner ; \r\n    }\r\n\r\n\r\n    function claimTax() external onlyOwner {\r\n        require(address(this).balance >= 0, \"Not enough balance\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    receive() external payable {\r\n        require(msg.value >= tax , \"Value Low\");\r\n        uint256 price = _average(eqMode[msg.sender]);\r\n        lastPrice[msg.sender] = price;\r\n        lastPriceStatic = price;\r\n    }\r\n\r\n    function viewAverage() external view returns (uint256) {\r\n        require(lastPrice[msg.sender] > 0, \"No stored price\");\r\n        return lastPrice[msg.sender];\r\n    }\r\n\r\n    function viewAverageStatic() external view returns(uint){\r\n        require(lastPriceStatic > 0, \"No stored price\");\r\n        return lastPriceStatic;\r\n    }\r\n\r\n    function setTax(uint _tax) public onlyOwner {\r\n        tax = _tax;\r\n    }\r\n}\r\n"
			},
			"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport '@pancakeswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@pancakeswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol';\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given PancakeSwap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\n    {\n        require(secondsAgo != 0, 'BP');\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) =\n            IPancakeV3Pool(pool).observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        uint160 secondsPerLiquidityCumulativesDelta =\n            secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0];\n\n        arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick--;\n\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n        harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\n    }\n\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick Tick value used to calculate the quote\n    /// @param baseAmount Amount of token to be converted\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n    /// @param pool Address of PancakeSwap V3 pool that we want to observe\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\n    function getOldestObservationSecondsAgo(address pool) internal view returns (uint32 secondsAgo) {\n        (, , uint16 observationIndex, uint16 observationCardinality, , , ) = IPancakeV3Pool(pool).slot0();\n        require(observationCardinality > 0, 'NI');\n\n        (uint32 observationTimestamp, , , bool initialized) =\n            IPancakeV3Pool(pool).observations((observationIndex + 1) % observationCardinality);\n\n        // The next index might not be initialized if the cardinality is in the process of increasing\n        // In this case the oldest observation is always in index 0\n        if (!initialized) {\n            (observationTimestamp, , , ) = IPancakeV3Pool(pool).observations(0);\n        }\n\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\n    }\n\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\n    /// @param pool Address of PancakeSwap V3 pool\n    /// @return The tick that the pool was in at the start of the current block\n    function getBlockStartingTickAndLiquidity(address pool) internal view returns (int24, uint128) {\n        (, int24 tick, uint16 observationIndex, uint16 observationCardinality, , , ) = IPancakeV3Pool(pool).slot0();\n\n        // 2 observations are needed to reliably calculate the block starting tick\n        require(observationCardinality > 1, 'NEO');\n\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\n        (uint32 observationTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, ) =\n            IPancakeV3Pool(pool).observations(observationIndex);\n        if (observationTimestamp != uint32(block.timestamp)) {\n            return (tick, IPancakeV3Pool(pool).liquidity());\n        }\n\n        uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\n        (\n            uint32 prevObservationTimestamp,\n            int56 prevTickCumulative,\n            uint160 prevSecondsPerLiquidityCumulativeX128,\n            bool prevInitialized\n        ) = IPancakeV3Pool(pool).observations(prevIndex);\n\n        require(prevInitialized, 'ONI');\n\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\n        tick = int24((tickCumulative - prevTickCumulative) / delta);\n        uint128 liquidity =\n            uint128(\n                (uint192(delta) * type(uint160).max) /\n                    (uint192(secondsPerLiquidityCumulativeX128 - prevSecondsPerLiquidityCumulativeX128) << 32)\n            );\n        return (tick, liquidity);\n    }\n\n    /// @notice Information for calculating a weighted arithmetic mean tick\n    struct WeightedTickData {\n        int24 tick;\n        uint128 weight;\n    }\n\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n    /// @param weightedTickData An array of ticks and weights\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\n    function getWeightedArithmeticMeanTick(WeightedTickData[] memory weightedTickData)\n        internal\n        pure\n        returns (int24 weightedArithmeticMeanTick)\n    {\n        // Accumulates the sum of products between each tick and its weight\n        int256 numerator;\n\n        // Accumulates the sum of the weights\n        uint256 denominator;\n\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\n        for (uint256 i; i < weightedTickData.length; i++) {\n            numerator += weightedTickData[i].tick * int256(weightedTickData[i].weight);\n            denominator += weightedTickData[i].weight;\n        }\n\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\n        // Always round to negative infinity\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedArithmeticMeanTick--;\n    }\n\n    /// @notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n    /// @dev Useful for calculating relative prices along routes.\n    /// @dev There must be one tick for each pairwise set of tokens.\n    /// @param tokens The token contract addresses\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks)\n        internal\n        pure\n        returns (int256 syntheticTick)\n    {\n        require(tokens.length - 1 == ticks.length, 'DL');\n        for (uint256 i = 1; i <= ticks.length; i++) {\n            // check the tokens for address sort order, then accumulate the\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \"cancel out\"\n            tokens[i - 1] < tokens[i] ? syntheticTick += ticks[i - 1] : syntheticTick -= ticks[i - 1];\n        }\n    }\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IPancakeV3PoolImmutables.sol';\nimport './pool/IPancakeV3PoolState.sol';\nimport './pool/IPancakeV3PoolDerivedState.sol';\nimport './pool/IPancakeV3PoolActions.sol';\nimport './pool/IPancakeV3PoolOwnerActions.sol';\nimport './pool/IPancakeV3PoolEvents.sol';\n\n/// @title The interface for a PancakeSwap V3 Pool\n/// @notice A PancakeSwap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IPancakeV3Pool is\n    IPancakeV3PoolImmutables,\n    IPancakeV3PoolState,\n    IPancakeV3PoolDerivedState,\n    IPancakeV3PoolActions,\n    IPancakeV3PoolOwnerActions,\n    IPancakeV3PoolEvents\n{\n\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the PancakeSwap V3 Factory\n/// @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\ninterface IPancakeV3Factory {\n    struct TickSpacingExtraInfo {\n        bool whitelistRequested;\n        bool enabled;\n    }\n\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    event FeeAmountExtraInfoUpdated(uint24 indexed fee, bool whitelistRequested, bool enabled);\n\n    event WhiteListAdded(address indexed user, bool verified);\n\n    /// @notice Emitted when LM pool deployer is set\n    event SetLmPoolDeployer(address indexed lmPoolDeployer);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the tick spacing extra info\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return whitelistRequested The flag whether should be created by white list users only\n    function feeAmountTickSpacingExtraInfo(uint24 fee) external view returns (bool whitelistRequested, bool enabled);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n\n    /// @notice Set an address into white list\n    /// @dev Address can be updated by owner with boolean value false\n    /// @param user The user address that add into white list\n    function setWhiteListAddress(address user, bool verified) external;\n\n    /// @notice Set a fee amount extra info\n    /// @dev Fee amounts can be updated by owner with extra info\n    /// @param whitelistRequested The flag whether should be created by owner only\n    /// @param enabled The flag is the fee is enabled or not\n    function setFeeAmountExtraInfo(\n        uint24 fee,\n        bool whitelistRequested,\n        bool enabled\n    ) external;\n\n    function setLmPoolDeployer(address _lmPoolDeployer) external;\n\n    function setFeeProtocol(address pool, uint32 feeProtocol0, uint32 feeProtocol1) external;\n\n    function collectProtocol(\n        address pool,\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    function setLmPool(address pool, address lmPool) external;\n}\n"
			},
			"@pancakeswap/v3-core/contracts/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"@pancakeswap/v3-core/contracts/libraries/FullMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IPancakeV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    /// @param protocolFeesToken0 The protocol fee of token0 in the swap\n    /// @param protocolFeesToken1 The protocol fee of token1 in the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick,\n        uint128 protocolFeesToken0,\n        uint128 protocolFeesToken1\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(\n        uint32 feeProtocol0Old,\n        uint32 feeProtocol1Old,\n        uint32 feeProtocol0New,\n        uint32 feeProtocol1New\n    );\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IPancakeV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Set the LM pool to enable liquidity mining\n    function setLmPool(address lmPool) external;\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IPancakeV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IPancakeV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IPancakeV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint32 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IPancakeV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "berlin"
		}
	},
	"output": {
		"contracts": {
			"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol": {
				"IPancakeV3Factory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "FeeAmountEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "whitelistRequested",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "enabled",
									"type": "bool"
								}
							],
							"name": "FeeAmountExtraInfoUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "lmPoolDeployer",
									"type": "address"
								}
							],
							"name": "SetLmPoolDeployer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "verified",
									"type": "bool"
								}
							],
							"name": "WhiteListAdded",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "enableFeeAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacingExtraInfo",
							"outputs": [
								{
									"internalType": "bool",
									"name": "whitelistRequested",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "enabled",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "bool",
									"name": "whitelistRequested",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "enabled",
									"type": "bool"
								}
							],
							"name": "setFeeAmountExtraInfo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "uint32",
									"name": "feeProtocol0",
									"type": "uint32"
								},
								{
									"internalType": "uint32",
									"name": "feeProtocol1",
									"type": "uint32"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "lmPool",
									"type": "address"
								}
							],
							"name": "setLmPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_lmPoolDeployer",
									"type": "address"
								}
							],
							"name": "setLmPoolDeployer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "verified",
									"type": "bool"
								}
							],
							"name": "setWhiteListAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
								"params": {
									"fee": "The desired fee for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"enableFeeAmount(uint24,int24)": {
								"details": "Fee amounts may never be removed once enabled",
								"params": {
									"fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
									"tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
								}
							},
							"feeAmountTickSpacing(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"feeAmountTickSpacingExtraInfo(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"whitelistRequested": "The flag whether should be created by white list users only"
								}
							},
							"getPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"setFeeAmountExtraInfo(uint24,bool,bool)": {
								"details": "Fee amounts can be updated by owner with extra info",
								"params": {
									"enabled": "The flag is the fee is enabled or not",
									"whitelistRequested": "The flag whether should be created by owner only"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							},
							"setWhiteListAddress(address,bool)": {
								"details": "Address can be updated by owner with boolean value false",
								"params": {
									"user": "The user address that add into white list"
								}
							}
						},
						"title": "The interface for the PancakeSwap V3 Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,address,uint128,uint128)": "43db87da",
							"createPool(address,address,uint24)": "a1671295",
							"enableFeeAmount(uint24,int24)": "8a7c195f",
							"feeAmountTickSpacing(uint24)": "22afcccb",
							"feeAmountTickSpacingExtraInfo(uint24)": "88e8006d",
							"getPool(address,address,uint24)": "1698ee82",
							"owner()": "8da5cb5b",
							"setFeeAmountExtraInfo(uint24,bool,bool)": "8ff38e80",
							"setFeeProtocol(address,uint32,uint32)": "7e8435e6",
							"setLmPool(address,address)": "11ff5e8d",
							"setLmPoolDeployer(address)": "80d6a792",
							"setOwner(address)": "13af4035",
							"setWhiteListAddress(address,bool)": "e4a86a99"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelistRequested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"FeeAmountExtraInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lmPoolDeployer\",\"type\":\"address\"}],\"name\":\"SetLmPoolDeployer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"WhiteListAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacingExtraInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whitelistRequested\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"whitelistRequested\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setFeeAmountExtraInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol1\",\"type\":\"uint32\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lmPool\",\"type\":\"address\"}],\"name\":\"setLmPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lmPoolDeployer\",\"type\":\"address\"}],\"name\":\"setLmPoolDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"setWhiteListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"feeAmountTickSpacingExtraInfo(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"whitelistRequested\":\"The flag whether should be created by white list users only\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setFeeAmountExtraInfo(uint24,bool,bool)\":{\"details\":\"Fee amounts can be updated by owner with extra info\",\"params\":{\"enabled\":\"The flag is the fee is enabled or not\",\"whitelistRequested\":\"The flag whether should be created by owner only\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}},\"setWhiteListAddress(address,bool)\":{\"details\":\"Address can be updated by owner with boolean value false\",\"params\":{\"user\":\"The user address that add into white list\"}}},\"title\":\"The interface for the PancakeSwap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"},\"SetLmPoolDeployer(address)\":{\"notice\":\"Emitted when LM pool deployer is set\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"feeAmountTickSpacingExtraInfo(uint24)\":{\"notice\":\"Returns the tick spacing extra info\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setFeeAmountExtraInfo(uint24,bool,bool)\":{\"notice\":\"Set a fee amount extra info\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"},\"setWhiteListAddress(address,bool)\":{\"notice\":\"Set an address into white list\"}},\"notice\":\"The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol\":\"IPancakeV3Factory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol\":{\"keccak256\":\"0x90c41c199dbf1cb239937bd562d764e7fa13c9749fad324a162b0d0545012fb7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://558aeed10a456cef5ef0842aeac6f9328a5a0ebf14c7e0b350453bfc3070481c\",\"dweb:/ipfs/QmYKBfzf99ikop2dbqLVEn38FY9PZt5bjL1uLkRtu8VAFT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"notice": "Emitted when a pool is created"
							},
							"SetLmPoolDeployer(address)": {
								"notice": "Emitted when LM pool deployer is set"
							}
						},
						"kind": "user",
						"methods": {
							"createPool(address,address,uint24)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"enableFeeAmount(uint24,int24)": {
								"notice": "Enables a fee amount with the given tickSpacing"
							},
							"feeAmountTickSpacing(uint24)": {
								"notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
							},
							"feeAmountTickSpacingExtraInfo(uint24)": {
								"notice": "Returns the tick spacing extra info"
							},
							"getPool(address,address,uint24)": {
								"notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"setFeeAmountExtraInfo(uint24,bool,bool)": {
								"notice": "Set a fee amount extra info"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							},
							"setWhiteListAddress(address,bool)": {
								"notice": "Set an address into white list"
							}
						},
						"notice": "The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol": {
				"IPancakeV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol0Old",
									"type": "uint32"
								},
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol1Old",
									"type": "uint32"
								},
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol0New",
									"type": "uint32"
								},
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol1New",
									"type": "uint32"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "protocolFeesToken0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "protocolFeesToken1",
									"type": "uint128"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "feeProtocol0",
									"type": "uint32"
								},
								{
									"internalType": "uint32",
									"name": "feeProtocol1",
									"type": "uint32"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "lmPool",
									"type": "address"
								}
							],
							"name": "setLmPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint32",
									"name": "feeProtocol",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint32,uint32)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a PancakeSwap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint32,uint32)": "b0d0d211",
							"setLmPool(address)": "cc7e7fa2",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol0Old\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol1Old\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol0New\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol1New\",\"type\":\"uint32\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFeesToken0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFeesToken1\",\"type\":\"uint128\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"feeProtocol0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol1\",\"type\":\"uint32\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lmPool\",\"type\":\"address\"}],\"name\":\"setLmPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint32,uint32)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a PancakeSwap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint32,uint32,uint32,uint32)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24,uint128,uint128)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint32,uint32)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"setLmPool(address)\":{\"notice\":\"Set the LM pool to enable liquidity mining\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A PancakeSwap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\":\"IPancakeV3Pool\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\":{\"keccak256\":\"0x4f22208838b7b85d2d48e9a92a0cee1e5bf5f12fe0f2f5cc521ab1adabb68fbb\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f39833bc732ff76e8abe44206981f115116e3c0f4f867099d1c1a3621febefea\",\"dweb:/ipfs/QmcSb8EyNu6y6sueWZmc6uYbPrWz3Z38RuLipeWB2E5JRc\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol\":{\"keccak256\":\"0x78ed1c130111169f443c55618ff2d290ce0630b1d016cdeda3a66e12816041f6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://230ba84dfb2cbaadffe4554d9b74ddc7e6b696e51e5e9f327be469a47c332137\",\"dweb:/ipfs/Qmapm23aouHCAMVxLG6eRfUY134QZzDvsAnXqX3UnpdA2o\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol\":{\"keccak256\":\"0x45a9f30f562b5d0d55b311149c32df5cbcf0c7cfcb72aff2637a29794b06d4b6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a6a90b9532960842ebee061f6acefc680ae06bfd73e7c3536dd67f566137ded8\",\"dweb:/ipfs/QmPDfMp1k417dMPJAcFK4s6nkFX7GxiC8vtis8eAA7Jrk5\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol\":{\"keccak256\":\"0xab6ac5bd9ceadd20e3b60bb079489a2942c60f2697a6e145c585ee49b281534c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://50df58f97d6b423605489b3dfad69b0e4f68197d02950d6858072b1bffe5fa44\",\"dweb:/ipfs/QmQGa1CGYRqkr4Mv85z7A7vGRAmCgmpU2hikMuRURu7AUA\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol\":{\"keccak256\":\"0x8cde7ad64b4dced2fa40e91e3c8ffd0eaaf86954c65a1c0f7abc35f1af3a89d0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6dda14811ba9ddf552ecf2c6b7414ea9eda70421ffa05830baec1c12c157fa77\",\"dweb:/ipfs/QmbLT6zzSxFAtD1NsZRPpuDRXKtgQ8vbg3P6NcSRA2K4Qh\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol\":{\"keccak256\":\"0x5c522018f94c194608fd0f3f6bb1c7373d53496f5b6cb5e916b7a8d61fc7caf1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4e3b53a05473e3862a40c30bc9ef64c3d835975297577a790309253917d990e9\",\"dweb:/ipfs/QmRSrGUM3AEXjBBWvrHzdvz4ibjAYDFZzfRZoXRnFDz9vi\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol\":{\"keccak256\":\"0xbf4a0b7b13de3cb73722a74cfee8b34fa250855373cd17e54a093f9054efbc61\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a238096b300063a853ccad81ff3141b64784c7ae18f3e254701fdc8763f3b885\",\"dweb:/ipfs/Qmd1RiqVgZgsjdUDAmpHnp9myXDRTJyFkWyNZmZWS4bXRT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint32,uint32,uint32,uint32)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24,uint128,uint128)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint32,uint32)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"setLmPool(address)": {
								"notice": "Set the LM pool to enable liquidity mining"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A PancakeSwap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol": {
				"IPancakeV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol\":\"IPancakeV3PoolActions\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol\":{\"keccak256\":\"0x78ed1c130111169f443c55618ff2d290ce0630b1d016cdeda3a66e12816041f6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://230ba84dfb2cbaadffe4554d9b74ddc7e6b696e51e5e9f327be469a47c332137\",\"dweb:/ipfs/Qmapm23aouHCAMVxLG6eRfUY134QZzDvsAnXqX3UnpdA2o\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol": {
				"IPancakeV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol\":\"IPancakeV3PoolDerivedState\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol\":{\"keccak256\":\"0x45a9f30f562b5d0d55b311149c32df5cbcf0c7cfcb72aff2637a29794b06d4b6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a6a90b9532960842ebee061f6acefc680ae06bfd73e7c3536dd67f566137ded8\",\"dweb:/ipfs/QmPDfMp1k417dMPJAcFK4s6nkFX7GxiC8vtis8eAA7Jrk5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol": {
				"IPancakeV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol0Old",
									"type": "uint32"
								},
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol1Old",
									"type": "uint32"
								},
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol0New",
									"type": "uint32"
								},
								{
									"indexed": false,
									"internalType": "uint32",
									"name": "feeProtocol1New",
									"type": "uint32"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "protocolFeesToken0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "protocolFeesToken1",
									"type": "uint128"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint32,uint32,uint32,uint32)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24,uint128,uint128)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"protocolFeesToken0": "The protocol fee of token0 in the swap",
									"protocolFeesToken1": "The protocol fee of token1 in the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol0Old\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol1Old\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol0New\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeProtocol1New\",\"type\":\"uint32\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFeesToken0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFeesToken1\",\"type\":\"uint128\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint32,uint32,uint32,uint32)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24,uint128,uint128)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"protocolFeesToken0\":\"The protocol fee of token0 in the swap\",\"protocolFeesToken1\":\"The protocol fee of token1 in the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint32,uint32,uint32,uint32)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24,uint128,uint128)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol\":\"IPancakeV3PoolEvents\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol\":{\"keccak256\":\"0xab6ac5bd9ceadd20e3b60bb079489a2942c60f2697a6e145c585ee49b281534c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://50df58f97d6b423605489b3dfad69b0e4f68197d02950d6858072b1bffe5fa44\",\"dweb:/ipfs/QmQGa1CGYRqkr4Mv85z7A7vGRAmCgmpU2hikMuRURu7AUA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint32,uint32,uint32,uint32)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24,uint128,uint128)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol": {
				"IPancakeV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol\":\"IPancakeV3PoolImmutables\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol\":{\"keccak256\":\"0x8cde7ad64b4dced2fa40e91e3c8ffd0eaaf86954c65a1c0f7abc35f1af3a89d0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6dda14811ba9ddf552ecf2c6b7414ea9eda70421ffa05830baec1c12c157fa77\",\"dweb:/ipfs/QmbLT6zzSxFAtD1NsZRPpuDRXKtgQ8vbg3P6NcSRA2K4Qh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol": {
				"IPancakeV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "feeProtocol0",
									"type": "uint32"
								},
								{
									"internalType": "uint32",
									"name": "feeProtocol1",
									"type": "uint32"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "lmPool",
									"type": "address"
								}
							],
							"name": "setLmPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint32,uint32)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint32,uint32)": "b0d0d211",
							"setLmPool(address)": "cc7e7fa2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"feeProtocol0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol1\",\"type\":\"uint32\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lmPool\",\"type\":\"address\"}],\"name\":\"setLmPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint32,uint32)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint32,uint32)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"setLmPool(address)\":{\"notice\":\"Set the LM pool to enable liquidity mining\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol\":\"IPancakeV3PoolOwnerActions\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol\":{\"keccak256\":\"0x5c522018f94c194608fd0f3f6bb1c7373d53496f5b6cb5e916b7a8d61fc7caf1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4e3b53a05473e3862a40c30bc9ef64c3d835975297577a790309253917d990e9\",\"dweb:/ipfs/QmRSrGUM3AEXjBBWvrHzdvz4ibjAYDFZzfRZoXRnFDz9vi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint32,uint32)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"setLmPool(address)": {
								"notice": "Set the LM pool to enable liquidity mining"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol": {
				"IPancakeV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint32",
									"name": "feeProtocol",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeProtocol\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol\":\"IPancakeV3PoolState\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol\":{\"keccak256\":\"0xbf4a0b7b13de3cb73722a74cfee8b34fa250855373cd17e54a093f9054efbc61\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a238096b300063a853ccad81ff3141b64784c7ae18f3e254701fdc8763f3b885\",\"dweb:/ipfs/Qmd1RiqVgZgsjdUDAmpHnp9myXDRTJyFkWyNZmZWS4bXRT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/libraries/FullMath.sol": {
				"FullMath": {
					"abi": [],
					"devdoc": {
						"details": "Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits",
						"kind": "dev",
						"methods": {},
						"title": "Contains 512-bit math functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":375:5137  library FullMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":375:5137  library FullMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d4a32b5015351cb477e0396b0e3852e92d575c8eb6622bb9882442aa518d641164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d4a32b5015351cb477e0396b0e3852e92d575c8eb6622bb9882442aa518d641164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 LOG3 0x2B POP ISZERO CALLDATALOAD SHR 0xB4 PUSH24 0xE0396B0E3852E92D575C8EB6622BB9882442AA518D641164 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "375:4762:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d4a32b5015351cb477e0396b0e3852e92d575c8eb6622bb9882442aa518d641164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 LOG3 0x2B POP ISZERO CALLDATALOAD SHR 0xB4 PUSH24 0xE0396B0E3852E92D575C8EB6622BB9882442AA518D641164 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "375:4762:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDivRoundingUp(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "INVALID",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 375,
									"end": 5137,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d4a32b5015351cb477e0396b0e3852e92d575c8eb6622bb9882442aa518d641164736f6c63430007060033",
									".code": [
										{
											"begin": 375,
											"end": 5137,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 375,
											"end": 5137,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0xbefbff1aed686bac4be2ed1569a29f88649cfa17c45f417db81d6a2202fc1518\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6dac2bb25c624ab93711649cfa5735603c37285964c102e456b81cfe64d862b6\",\"dweb:/ipfs/QmRzLrrJ4QSmaE2hRmB69PzxTewavysupU3hmZgezLEQ72\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-core/contracts/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208bd35996026c0afd873fb1e3929f51573f7061903eb136ca8eaeace626f2668a64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208bd35996026c0afd873fb1e3929f51573f7061903eb136ca8eaeace626f2668a64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xD3 MSIZE SWAP7 MUL PUSH13 0xAFD873FB1E3929F51573F7061 SWAP1 RETURNDATACOPY 0xB1 CALLDATASIZE 0xCA DUP15 0xAE 0xAC 0xE6 0x26 CALLCODE PUSH7 0x8A64736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208bd35996026c0afd873fb1e3929f51573f7061903eb136ca8eaeace626f2668a64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0xD3 MSIZE SWAP7 MUL PUSH13 0xAFD873FB1E3929F51573F7061 SWAP1 RETURNDATACOPY 0xB1 CALLDATASIZE 0xCA DUP15 0xAE 0xAC 0xE6 0x26 CALLCODE PUSH7 0x8A64736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208bd35996026c0afd873fb1e3929f51573f7061903eb136ca8eaeace626f2668a64736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol": {
				"OracleLibrary": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Oracle library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":368:9363  library OracleLibrary {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":368:9363  library OracleLibrary {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122082483d4133638c8e23ba859daff9feb82740417c482d29d8962f3b1e9e91b70b64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122082483d4133638c8e23ba859daff9feb82740417c482d29d8962f3b1e9e91b70b64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 0x48 RETURNDATASIZE COINBASE CALLER PUSH4 0x8C8E23BA DUP6 SWAP14 0xAF 0xF9 INVALID 0xB8 0x27 BLOCKHASH COINBASE PUSH29 0x482D29D8962F3B1E9E91B70B64736F6C63430007060033000000000000 ",
							"sourceMap": "368:8995:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122082483d4133638c8e23ba859daff9feb82740417c482d29d8962f3b1e9e91b70b64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 0x48 RETURNDATASIZE COINBASE CALLER PUSH4 0x8C8E23BA DUP6 SWAP14 0xAF 0xF9 INVALID 0xB8 0x27 BLOCKHASH COINBASE PUSH29 0x482D29D8962F3B1E9E91B70B64736F6C63430007060033000000000000 ",
							"sourceMap": "368:8995:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"consult(address,uint32)": "infinite",
								"getBlockStartingTickAndLiquidity(address)": "infinite",
								"getChainedPrice(address[] memory,int24[] memory)": "infinite",
								"getOldestObservationSecondsAgo(address)": "infinite",
								"getQuoteAtTick(int24,uint128,address,address)": "infinite",
								"getWeightedArithmeticMeanTick(struct OracleLibrary.WeightedTickData memory[] memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "INVALID",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 368,
									"end": 9363,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122082483d4133638c8e23ba859daff9feb82740417c482d29d8962f3b1e9e91b70b64736f6c63430007060033",
									".code": [
										{
											"begin": 368,
											"end": 9363,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 368,
											"end": 9363,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Oracle library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions to integrate with V3 pool oracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":\"OracleLibrary\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\":{\"keccak256\":\"0x4f22208838b7b85d2d48e9a92a0cee1e5bf5f12fe0f2f5cc521ab1adabb68fbb\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f39833bc732ff76e8abe44206981f115116e3c0f4f867099d1c1a3621febefea\",\"dweb:/ipfs/QmcSb8EyNu6y6sueWZmc6uYbPrWz3Z38RuLipeWB2E5JRc\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol\":{\"keccak256\":\"0x78ed1c130111169f443c55618ff2d290ce0630b1d016cdeda3a66e12816041f6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://230ba84dfb2cbaadffe4554d9b74ddc7e6b696e51e5e9f327be469a47c332137\",\"dweb:/ipfs/Qmapm23aouHCAMVxLG6eRfUY134QZzDvsAnXqX3UnpdA2o\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol\":{\"keccak256\":\"0x45a9f30f562b5d0d55b311149c32df5cbcf0c7cfcb72aff2637a29794b06d4b6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a6a90b9532960842ebee061f6acefc680ae06bfd73e7c3536dd67f566137ded8\",\"dweb:/ipfs/QmPDfMp1k417dMPJAcFK4s6nkFX7GxiC8vtis8eAA7Jrk5\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol\":{\"keccak256\":\"0xab6ac5bd9ceadd20e3b60bb079489a2942c60f2697a6e145c585ee49b281534c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://50df58f97d6b423605489b3dfad69b0e4f68197d02950d6858072b1bffe5fa44\",\"dweb:/ipfs/QmQGa1CGYRqkr4Mv85z7A7vGRAmCgmpU2hikMuRURu7AUA\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol\":{\"keccak256\":\"0x8cde7ad64b4dced2fa40e91e3c8ffd0eaaf86954c65a1c0f7abc35f1af3a89d0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6dda14811ba9ddf552ecf2c6b7414ea9eda70421ffa05830baec1c12c157fa77\",\"dweb:/ipfs/QmbLT6zzSxFAtD1NsZRPpuDRXKtgQ8vbg3P6NcSRA2K4Qh\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol\":{\"keccak256\":\"0x5c522018f94c194608fd0f3f6bb1c7373d53496f5b6cb5e916b7a8d61fc7caf1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4e3b53a05473e3862a40c30bc9ef64c3d835975297577a790309253917d990e9\",\"dweb:/ipfs/QmRSrGUM3AEXjBBWvrHzdvz4ibjAYDFZzfRZoXRnFDz9vi\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol\":{\"keccak256\":\"0xbf4a0b7b13de3cb73722a74cfee8b34fa250855373cd17e54a093f9054efbc61\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a238096b300063a853ccad81ff3141b64784c7ae18f3e254701fdc8763f3b885\",\"dweb:/ipfs/Qmd1RiqVgZgsjdUDAmpHnp9myXDRTJyFkWyNZmZWS4bXRT\"]},\"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0xbefbff1aed686bac4be2ed1569a29f88649cfa17c45f417db81d6a2202fc1518\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6dac2bb25c624ab93711649cfa5735603c37285964c102e456b81cfe64d862b6\",\"dweb:/ipfs/QmRzLrrJ4QSmaE2hRmB69PzxTewavysupU3hmZgezLEQ72\"]},\"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]},\"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":{\"keccak256\":\"0x862a211d6bacea995e9c60c4ad20abfdf7674b83e39208798aec96efd8b959ff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://231e94c1635744b213f9362642268d9f42291786f297912d71f86552ce84de3a\",\"dweb:/ipfs/QmT9oabKX9YPbdGhDntTUUFq6Sn6i5QYn7JFLVXcFbsimL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides functions to integrate with V3 pool oracle",
						"version": 1
					}
				}
			},
			"contracts/BNBPrice.sol": {
				"BNBPrice": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tickPrice",
									"type": "uint256"
								}
							],
							"name": "callAverage",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "_fee",
									"type": "uint24"
								}
							],
							"name": "addPoolUSD",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "bnb",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "index",
									"type": "uint8"
								}
							],
							"name": "bnbToUsd",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "changeOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "eqMode",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getEqMode",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getEqModeString",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "lastPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastPriceStatic",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolsLenght",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "poolsUSD",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "index",
									"type": "uint8"
								}
							],
							"name": "removePoolUSD",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_bnb",
									"type": "address"
								}
							],
							"name": "setBnbAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "setEqMode",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tax",
									"type": "uint256"
								}
							],
							"name": "setTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_usd",
									"type": "address"
								}
							],
							"name": "setUsdAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "usd",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "index",
									"type": "uint8"
								}
							],
							"name": "usdToBnb",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "viewAverage",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "viewAverageStatic",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/BNBPrice.sol\":284:4296  contract BNBPrice{\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/BNBPrice.sol\":698:911  constructor(){\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/BNBPrice.sol\":738:748  msg.sender */\n  caller\n    /* \"contracts/BNBPrice.sol\":722:727  owner */\n  0x03\n  0x00\n    /* \"contracts/BNBPrice.sol\":722:749  owner = payable(msg.sender) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/BNBPrice.sol\":766:808  0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c */\n  0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\n    /* \"contracts/BNBPrice.sol\":760:763  bnb */\n  0x01\n  0x00\n    /* \"contracts/BNBPrice.sol\":760:808  bnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/BNBPrice.sol\":825:867  0x55d398326f99059fF775485246999027B3197955 */\n  0x55d398326f99059ff775485246999027b3197955\n    /* \"contracts/BNBPrice.sol\":819:822  usd */\n  0x02\n  0x00\n    /* \"contracts/BNBPrice.sol\":819:867  usd = 0x55d398326f99059fF775485246999027B3197955 */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/BNBPrice.sol\":884:885  1 */\n  0x01\n    /* \"contracts/BNBPrice.sol\":878:881  tax */\n  0x07\n    /* \"contracts/BNBPrice.sol\":878:885  tax = 1 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/BNBPrice.sol\":284:4296  contract BNBPrice{\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/BNBPrice.sol\":284:4296  contract BNBPrice{\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x67b51834\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xa6f9dae1\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xa6f9dae1\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc0404fa7\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xd63a6ccd\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xe03d1632\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf5a6ba2e\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf74b28c1\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x67b51834\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x6c7474da\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x6d201e8b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa1c6a405\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x3b907d14\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x3b907d14\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x448883d7\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x49a876e4\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x4d899b32\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x5e59c8ce\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x65a6cc2e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x026f0dbe\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x09cf28da\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x14b085a4\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x2e5bb6ff\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x32a6013c\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/BNBPrice.sol\":3720:3723  tax */\n      sload(0x07)\n        /* \"contracts/BNBPrice.sol\":3707:3716  msg.value */\n      callvalue\n        /* \"contracts/BNBPrice.sol\":3707:3723  msg.value >= tax */\n      lt\n      iszero\n        /* \"contracts/BNBPrice.sol\":3699:3738  require(msg.value >= tax , \"Value Low\") */\n      tag_30\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x09\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x56616c7565204c6f770000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_30:\n        /* \"contracts/BNBPrice.sol\":3749:3762  uint256 price */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3765:3793  _average(eqMode[msg.sender]) */\n      tag_31\n        /* \"contracts/BNBPrice.sol\":3774:3780  eqMode */\n      0x05\n        /* \"contracts/BNBPrice.sol\":3774:3792  eqMode[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3781:3791  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":3774:3792  eqMode[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/BNBPrice.sol\":3765:3773  _average */\n      tag_32\n        /* \"contracts/BNBPrice.sol\":3765:3793  _average(eqMode[msg.sender]) */\n      jump\t// in\n    tag_31:\n        /* \"contracts/BNBPrice.sol\":3749:3793  uint256 price = _average(eqMode[msg.sender]) */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":3828:3833  price */\n      dup1\n        /* \"contracts/BNBPrice.sol\":3804:3813  lastPrice */\n      0x06\n        /* \"contracts/BNBPrice.sol\":3804:3825  lastPrice[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3814:3824  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":3804:3825  lastPrice[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/BNBPrice.sol\":3804:3833  lastPrice[msg.sender] = price */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":3862:3867  price */\n      dup1\n        /* \"contracts/BNBPrice.sol\":3844:3859  lastPriceStatic */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3844:3867  lastPriceStatic = price */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":3661:3875  receive() external payable {\r... */\n      pop\n        /* \"contracts/BNBPrice.sol\":284:4296  contract BNBPrice{\r... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/BNBPrice.sol\":2986:3077  function getEqMode() public view returns (bool){\r... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      pop\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":4057:4212  function viewAverageStatic() external view returns(uint){\r... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":459:499  mapping( address => bool ) public eqMode */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      pop\n      tag_40\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_41\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_42\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":4220:4293  function setTax(uint _tax) public onlyOwner {\r... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_43\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_43:\n      pop\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_46\n      jump\t// in\n    tag_44:\n      stop\n        /* \"contracts/BNBPrice.sol\":1367:1512  function removePoolUSD(uint8 index) external onlyOwner{\r... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      pop\n      tag_48\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_50\n      jump\t// in\n    tag_48:\n      stop\n        /* \"contracts/BNBPrice.sol\":2709:2791  function setBnbAddress(address _bnb) public onlyOwner{\r... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_51\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_51:\n      pop\n      tag_52\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_54\n      jump\t// in\n    tag_52:\n      stop\n        /* \"contracts/BNBPrice.sol\":3488:3651  function claimTax() external onlyOwner {\r... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      pop\n      tag_56\n      tag_57\n      jump\t// in\n    tag_56:\n      stop\n        /* \"contracts/BNBPrice.sol\":342:360  address public bnb */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":308:335  uint public lastPriceStatic */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      pop\n      tag_62\n      tag_63\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":2799:2881  function setUsdAddress(address _usd) public onlyOwner{\r... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_64\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_64:\n      pop\n      tag_65\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_67\n      jump\t// in\n    tag_65:\n      stop\n        /* \"contracts/BNBPrice.sol\":2889:2976  function setEqMode() public {\r... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      pop\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n      stop\n        /* \"contracts/BNBPrice.sol\":1067:1359  function addPoolUSD(address _factory, uint24 _fee) external onlyOwner {\r... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      pop\n      tag_72\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_74\n      jump\t// in\n    tag_72:\n      stop\n        /* \"contracts/BNBPrice.sol\":1773:2015  function bnbToUsd(uint8 index) external view  returns (uint price){\r... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_76\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_78\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":427:452  address[] public poolsUSD */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      tag_80\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_82\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":392:420  address payable public owner */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      tag_84\n      tag_85\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":3203:3367  function getEqModeString() public view returns( string memory) {\r... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      pop\n      tag_87\n      tag_88\n      jump\t// in\n    tag_87:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_89:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_91\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_89)\n    tag_91:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_92\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_92:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":3375:3478  function changeOwner(address payable _newOwner) public onlyOwner {\r... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_93\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_93:\n      pop\n      tag_94\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_96\n      jump\t// in\n    tag_94:\n      stop\n        /* \"contracts/BNBPrice.sol\":1520:1763  function usdToBnb(uint8 index) external view  returns (uint price){\r... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      tag_98\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_100\n      jump\t// in\n    tag_98:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":367:385  address public usd */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      pop\n      tag_102\n      tag_103\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":3883:4049  function viewAverage() external view returns (uint256) {\r... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_104\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_104:\n      pop\n      tag_105\n      tag_106\n      jump\t// in\n    tag_105:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":545:589  mapping(address => uint256) public lastPrice */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_107\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_107:\n      pop\n      tag_108\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_109\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_109:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_110\n      jump\t// in\n    tag_108:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":3085:3195  function poolsLenght() public view returns(uint){\r... */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      tag_112\n      tag_113\n      jump\t// in\n    tag_112:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/BNBPrice.sol\":2033:2701  function _average(bool _mode) internal view returns (uint256 average) {\r... */\n    tag_32:\n        /* \"contracts/BNBPrice.sol\":2086:2101  uint256 average */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2114:2128  uint256 prices */\n      dup1\n        /* \"contracts/BNBPrice.sol\":2139:2155  uint8 validCount */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2173:2180  uint8 i */\n      dup1\n        /* \"contracts/BNBPrice.sol\":2183:2184  0 */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2173:2184  uint8 i = 0 */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":2168:2600  for (uint8 i = 0; i < poolsUSD.length; i++) {\r... */\n    tag_115:\n        /* \"contracts/BNBPrice.sol\":2190:2198  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":2190:2205  poolsUSD.length */\n      dup1\n      sload\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":2186:2187  i */\n      dup2\n        /* \"contracts/BNBPrice.sol\":2186:2205  i < poolsUSD.length */\n      0xff\n      and\n      lt\n        /* \"contracts/BNBPrice.sol\":2168:2600  for (uint8 i = 0; i < poolsUSD.length; i++) {\r... */\n      iszero\n      tag_116\n      jumpi\n        /* \"contracts/BNBPrice.sol\":2230:2240  int24 tick */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2264:2272  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":2273:2274  i */\n      dup3\n        /* \"contracts/BNBPrice.sol\":2264:2275  poolsUSD[i] */\n      0xff\n      and\n      dup2\n      sload\n      dup2\n      lt\n      tag_118\n      jumpi\n      invalid\n    tag_118:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":2249:2282  IPancakeV3Pool(poolsUSD[i]).slot0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x3850c7bd\n        /* \"contracts/BNBPrice.sol\":2249:2284  IPancakeV3Pool(poolsUSD[i]).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xe0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_120\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_120:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_122\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_122:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0xe0\n      dup2\n      lt\n      iszero\n      tag_123\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_123:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":2227:2284  (, int24 tick,,,,,) = IPancakeV3Pool(poolsUSD[i]).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":2299:2312  uint256 price */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2315:2476  OracleLibrary.getQuoteAtTick(\r... */\n      tag_124\n        /* \"contracts/BNBPrice.sol\":2362:2366  tick */\n      dup3\n        /* \"contracts/BNBPrice.sol\":2385:2389  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/BNBPrice.sol\":2408:2413  _mode */\n      dup10\n        /* \"contracts/BNBPrice.sol\":2408:2425  _mode ? usd : bnb */\n      tag_125\n      jumpi\n        /* \"contracts/BNBPrice.sol\":2422:2425  bnb */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":2408:2425  _mode ? usd : bnb */\n      jump(tag_126)\n    tag_125:\n        /* \"contracts/BNBPrice.sol\":2416:2419  usd */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":2408:2425  _mode ? usd : bnb */\n    tag_126:\n        /* \"contracts/BNBPrice.sol\":2444:2449  _mode */\n      dup11\n        /* \"contracts/BNBPrice.sol\":2444:2461  _mode ? bnb : usd */\n      tag_127\n      jumpi\n        /* \"contracts/BNBPrice.sol\":2458:2461  usd */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":2444:2461  _mode ? bnb : usd */\n      jump(tag_128)\n    tag_127:\n        /* \"contracts/BNBPrice.sol\":2452:2455  bnb */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":2444:2461  _mode ? bnb : usd */\n    tag_128:\n        /* \"contracts/BNBPrice.sol\":2315:2343  OracleLibrary.getQuoteAtTick */\n      tag_129\n        /* \"contracts/BNBPrice.sol\":2315:2476  OracleLibrary.getQuoteAtTick(\r... */\n      jump\t// in\n    tag_124:\n        /* \"contracts/BNBPrice.sol\":2299:2476  uint256 price = OracleLibrary.getQuoteAtTick(\r... */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":2505:2506  0 */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2497:2502  price */\n      dup2\n        /* \"contracts/BNBPrice.sol\":2497:2506  price > 0 */\n      gt\n        /* \"contracts/BNBPrice.sol\":2493:2589  if (price > 0) {\r... */\n      iszero\n      tag_130\n      jumpi\n        /* \"contracts/BNBPrice.sol\":2537:2542  price */\n      dup1\n        /* \"contracts/BNBPrice.sol\":2527:2542  prices += price */\n      dup6\n      add\n      swap5\n      pop\n        /* \"contracts/BNBPrice.sol\":2561:2573  validCount++ */\n      dup4\n      dup1\n      0x01\n      add\n      swap5\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":2493:2589  if (price > 0) {\r... */\n    tag_130:\n        /* \"contracts/BNBPrice.sol\":2168:2600  for (uint8 i = 0; i < poolsUSD.length; i++) {\r... */\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":2207:2210  i++ */\n      dup1\n      dup1\n      0x01\n      add\n      swap2\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":2168:2600  for (uint8 i = 0; i < poolsUSD.length; i++) {\r... */\n      jump(tag_115)\n    tag_116:\n      pop\n        /* \"contracts/BNBPrice.sol\":2633:2634  0 */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2620:2630  validCount */\n      dup2\n        /* \"contracts/BNBPrice.sol\":2620:2634  validCount > 0 */\n      0xff\n      and\n      gt\n        /* \"contracts/BNBPrice.sol\":2612:2653  require(validCount > 0, \"No price found\") */\n      tag_131\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4e6f20707269636520666f756e64000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_131:\n        /* \"contracts/BNBPrice.sol\":2683:2693  validCount */\n      dup1\n        /* \"contracts/BNBPrice.sol\":2674:2693  prices / validCount */\n      0xff\n      and\n        /* \"contracts/BNBPrice.sol\":2674:2680  prices */\n      dup3\n        /* \"contracts/BNBPrice.sol\":2674:2693  prices / validCount */\n      dup2\n      tag_132\n      jumpi\n      invalid\n    tag_132:\n      div\n        /* \"contracts/BNBPrice.sol\":2664:2693  average = prices / validCount */\n      swap3\n      pop\n        /* \"contracts/BNBPrice.sol\":2033:2701  function _average(bool _mode) internal view returns (uint256 average) {\r... */\n      pop\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":2986:3077  function getEqMode() public view returns (bool){\r... */\n    tag_35:\n        /* \"contracts/BNBPrice.sol\":3028:3032  bool */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3051:3057  eqMode */\n      0x05\n        /* \"contracts/BNBPrice.sol\":3051:3069  eqMode[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3058:3068  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":3051:3069  eqMode[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/BNBPrice.sol\":3044:3069  return eqMode[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":2986:3077  function getEqMode() public view returns (bool){\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":4057:4212  function viewAverageStatic() external view returns(uint){\r... */\n    tag_38:\n        /* \"contracts/BNBPrice.sol\":4108:4112  uint */\n      0x00\n        /* \"contracts/BNBPrice.sol\":4150:4151  0 */\n      dup1\n        /* \"contracts/BNBPrice.sol\":4132:4147  lastPriceStatic */\n      sload(0x00)\n        /* \"contracts/BNBPrice.sol\":4132:4151  lastPriceStatic > 0 */\n      gt\n        /* \"contracts/BNBPrice.sol\":4124:4171  require(lastPriceStatic > 0, \"No stored price\") */\n      tag_135\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4e6f2073746f7265642070726963650000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_135:\n        /* \"contracts/BNBPrice.sol\":4189:4204  lastPriceStatic */\n      sload(0x00)\n        /* \"contracts/BNBPrice.sol\":4182:4204  return lastPriceStatic */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":4057:4212  function viewAverageStatic() external view returns(uint){\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":459:499  mapping( address => bool ) public eqMode */\n    tag_42:\n      mstore(0x20, 0x05)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":4220:4293  function setTax(uint _tax) public onlyOwner {\r... */\n    tag_46:\n        /* \"contracts/BNBPrice.sol\":970:975  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:966  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/BNBPrice.sol\":948:976  require(msg.sender == owner) */\n      tag_137\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_137:\n        /* \"contracts/BNBPrice.sol\":4281:4285  _tax */\n      dup1\n        /* \"contracts/BNBPrice.sol\":4275:4278  tax */\n      0x07\n        /* \"contracts/BNBPrice.sol\":4275:4285  tax = _tax */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":4220:4293  function setTax(uint _tax) public onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":1367:1512  function removePoolUSD(uint8 index) external onlyOwner{\r... */\n    tag_50:\n        /* \"contracts/BNBPrice.sol\":970:975  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:966  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/BNBPrice.sol\":948:976  require(msg.sender == owner) */\n      tag_140\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_140:\n        /* \"contracts/BNBPrice.sol\":1450:1458  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":1477:1478  1 */\n      0x01\n        /* \"contracts/BNBPrice.sol\":1459:1467  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":1459:1474  poolsUSD.length */\n      dup1\n      sload\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":1459:1478  poolsUSD.length - 1 */\n      sub\n        /* \"contracts/BNBPrice.sol\":1450:1479  poolsUSD[poolsUSD.length - 1] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_142\n      jumpi\n      invalid\n    tag_142:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1432:1440  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":1441:1446  index */\n      dup3\n        /* \"contracts/BNBPrice.sol\":1432:1447  poolsUSD[index] */\n      0xff\n      and\n      dup2\n      sload\n      dup2\n      lt\n      tag_144\n      jumpi\n      invalid\n    tag_144:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n        /* \"contracts/BNBPrice.sol\":1432:1479  poolsUSD[index] = poolsUSD[poolsUSD.length - 1] */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":1490:1498  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":1490:1504  poolsUSD.pop() */\n      dup1\n      sload\n      dup1\n      tag_146\n      jumpi\n      invalid\n    tag_146:\n      0x01\n      swap1\n      sub\n      dup2\n      dup2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      sstore\n      swap1\n      sstore\n        /* \"contracts/BNBPrice.sol\":1367:1512  function removePoolUSD(uint8 index) external onlyOwner{\r... */\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":2709:2791  function setBnbAddress(address _bnb) public onlyOwner{\r... */\n    tag_54:\n        /* \"contracts/BNBPrice.sol\":970:975  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:966  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/BNBPrice.sol\":948:976  require(msg.sender == owner) */\n      tag_149\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_149:\n        /* \"contracts/BNBPrice.sol\":2779:2783  _bnb */\n      dup1\n        /* \"contracts/BNBPrice.sol\":2773:2776  bnb */\n      0x01\n      0x00\n        /* \"contracts/BNBPrice.sol\":2773:2783  bnb = _bnb */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":2709:2791  function setBnbAddress(address _bnb) public onlyOwner{\r... */\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":3488:3651  function claimTax() external onlyOwner {\r... */\n    tag_57:\n        /* \"contracts/BNBPrice.sol\":970:975  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:966  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/BNBPrice.sol\":948:976  require(msg.sender == owner) */\n      tag_152\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_152:\n        /* \"contracts/BNBPrice.sol\":3571:3572  0 */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3546:3567  address(this).balance */\n      selfbalance\n        /* \"contracts/BNBPrice.sol\":3546:3572  address(this).balance >= 0 */\n      lt\n      iszero\n        /* \"contracts/BNBPrice.sol\":3538:3595  require(address(this).balance >= 0, \"Not enough balance\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x12\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4e6f7420656e6f7567682062616c616e63650000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_154:\n        /* \"contracts/BNBPrice.sol\":3606:3611  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":3606:3620  owner.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":3606:3643  owner.transfer(address(this).balance) */\n      0x08fc\n        /* \"contracts/BNBPrice.sol\":3621:3642  address(this).balance */\n      selfbalance\n        /* \"contracts/BNBPrice.sol\":3606:3643  owner.transfer(address(this).balance) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_156\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_156:\n      pop\n        /* \"contracts/BNBPrice.sol\":3488:3651  function claimTax() external onlyOwner {\r... */\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":342:360  address public bnb */\n    tag_60:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":308:335  uint public lastPriceStatic */\n    tag_63:\n      sload(0x00)\n      dup2\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":2799:2881  function setUsdAddress(address _usd) public onlyOwner{\r... */\n    tag_67:\n        /* \"contracts/BNBPrice.sol\":970:975  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:966  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/BNBPrice.sol\":948:976  require(msg.sender == owner) */\n      tag_158\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_158:\n        /* \"contracts/BNBPrice.sol\":2869:2873  _usd */\n      dup1\n        /* \"contracts/BNBPrice.sol\":2863:2866  usd */\n      0x02\n      0x00\n        /* \"contracts/BNBPrice.sol\":2863:2873  usd = _usd */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":2799:2881  function setUsdAddress(address _usd) public onlyOwner{\r... */\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":2889:2976  function setEqMode() public {\r... */\n    tag_70:\n        /* \"contracts/BNBPrice.sol\":2950:2956  eqMode */\n      0x05\n        /* \"contracts/BNBPrice.sol\":2950:2968  eqMode[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2957:2967  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":2950:2968  eqMode[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/BNBPrice.sol\":2949:2968  !eqMode[msg.sender] */\n      iszero\n        /* \"contracts/BNBPrice.sol\":2928:2934  eqMode */\n      0x05\n        /* \"contracts/BNBPrice.sol\":2928:2946  eqMode[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":2935:2945  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":2928:2946  eqMode[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/BNBPrice.sol\":2928:2968  eqMode[msg.sender] = !eqMode[msg.sender] */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":2889:2976  function setEqMode() public {\r... */\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":1067:1359  function addPoolUSD(address _factory, uint24 _fee) external onlyOwner {\r... */\n    tag_74:\n        /* \"contracts/BNBPrice.sol\":970:975  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:966  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/BNBPrice.sol\":948:976  require(msg.sender == owner) */\n      tag_162\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_162:\n        /* \"contracts/BNBPrice.sol\":1148:1160  address pool */\n      0x00\n        /* \"contracts/BNBPrice.sol\":1181:1189  _factory */\n      dup3\n        /* \"contracts/BNBPrice.sol\":1163:1198  IPancakeV3Factory(_factory).getPool */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x1698ee82\n        /* \"contracts/BNBPrice.sol\":1213:1216  usd */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1231:1234  bnb */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1249:1253  _fee */\n      dup6\n        /* \"contracts/BNBPrice.sol\":1163:1264  IPancakeV3Factory(_factory).getPool(\r... */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      0xffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_164\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_164:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_166\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_166:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_167\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_167:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":1148:1264  address pool = IPancakeV3Factory(_factory).getPool(\r... */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":1299:1300  0 */\n      0x00\n        /* \"contracts/BNBPrice.sol\":1283:1301  pool != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1283:1287  pool */\n      dup2\n        /* \"contracts/BNBPrice.sol\":1283:1301  pool != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/BNBPrice.sol\":1275:1321  require(pool != address(0) , \"Pool Not Found\") */\n      tag_168\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x506f6f6c204e6f7420466f756e64000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_168:\n        /* \"contracts/BNBPrice.sol\":1332:1340  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":1346:1350  pool */\n      dup2\n        /* \"contracts/BNBPrice.sol\":1332:1351  poolsUSD.push(pool) */\n      swap1\n      dup1\n      0x01\n      dup2\n      sload\n      add\n      dup1\n      dup3\n      sstore\n      dup1\n      swap2\n      pop\n      pop\n      0x01\n      swap1\n      sub\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      swap2\n      swap1\n      swap2\n      swap1\n      swap2\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":987:988  _ */\n      pop\n        /* \"contracts/BNBPrice.sol\":1067:1359  function addPoolUSD(address _factory, uint24 _fee) external onlyOwner {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":1773:2015  function bnbToUsd(uint8 index) external view  returns (uint price){\r... */\n    tag_78:\n        /* \"contracts/BNBPrice.sol\":1828:1838  uint price */\n      0x00\n        /* \"contracts/BNBPrice.sol\":1852:1862  int24 tick */\n      dup1\n        /* \"contracts/BNBPrice.sol\":1886:1894  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":1895:1900  index */\n      dup4\n        /* \"contracts/BNBPrice.sol\":1886:1901  poolsUSD[index] */\n      0xff\n      and\n      dup2\n      sload\n      dup2\n      lt\n      tag_171\n      jumpi\n      invalid\n    tag_171:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1871:1908  IPancakeV3Pool(poolsUSD[index]).slot0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x3850c7bd\n        /* \"contracts/BNBPrice.sol\":1871:1910  IPancakeV3Pool(poolsUSD[index]).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xe0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_173\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_173:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_175\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_175:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0xe0\n      dup2\n      lt\n      iszero\n      tag_176\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_176:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":1850:1910  (,int24 tick,,,,,) = IPancakeV3Pool(poolsUSD[index]).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":1929:2007  OracleLibrary.getQuoteAtTick(\r... */\n      tag_177\n        /* \"contracts/BNBPrice.sol\":1972:1976  tick */\n      dup2\n        /* \"contracts/BNBPrice.sol\":1978:1982  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/BNBPrice.sol\":1984:1987  bnb */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1989:1992  usd */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1929:1957  OracleLibrary.getQuoteAtTick */\n      tag_129\n        /* \"contracts/BNBPrice.sol\":1929:2007  OracleLibrary.getQuoteAtTick(\r... */\n      jump\t// in\n    tag_177:\n        /* \"contracts/BNBPrice.sol\":1921:2007  price = OracleLibrary.getQuoteAtTick(\r... */\n      swap2\n      pop\n        /* \"contracts/BNBPrice.sol\":1773:2015  function bnbToUsd(uint8 index) external view  returns (uint price){\r... */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":427:452  address[] public poolsUSD */\n    tag_82:\n      0x04\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_178\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_178:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":392:420  address payable public owner */\n    tag_85:\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":3203:3367  function getEqModeString() public view returns( string memory) {\r... */\n    tag_88:\n        /* \"contracts/BNBPrice.sol\":3251:3264  string memory */\n      0x60\n        /* \"contracts/BNBPrice.sol\":3277:3293  string memory em */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3296:3302  eqMode */\n      0x05\n        /* \"contracts/BNBPrice.sol\":3296:3314  eqMode[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3303:3313  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":3296:3314  eqMode[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/BNBPrice.sol\":3296:3339  eqMode[msg.sender] ?  \"USDTBNB\" : \"BNBUSDT\" */\n      tag_181\n      jumpi\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x07\n      dup2\n      mstore\n      0x20\n      add\n      0x424e425553445400000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      jump(tag_182)\n    tag_181:\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x07\n      dup2\n      mstore\n      0x20\n      add\n      0x55534454424e4200000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n    tag_182:\n        /* \"contracts/BNBPrice.sol\":3277:3339  string memory em = eqMode[msg.sender] ?  \"USDTBNB\" : \"BNBUSDT\" */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":3357:3359  em */\n      dup1\n        /* \"contracts/BNBPrice.sol\":3350:3359  return em */\n      swap2\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":3203:3367  function getEqModeString() public view returns( string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":3375:3478  function changeOwner(address payable _newOwner) public onlyOwner {\r... */\n    tag_96:\n        /* \"contracts/BNBPrice.sol\":970:975  owner */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":956:966  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":956:975  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/BNBPrice.sol\":948:976  require(msg.sender == owner) */\n      tag_184\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_184:\n        /* \"contracts/BNBPrice.sol\":3459:3468  _newOwner */\n      dup1\n        /* \"contracts/BNBPrice.sol\":3451:3456  owner */\n      0x03\n      0x00\n        /* \"contracts/BNBPrice.sol\":3451:3468  owner = _newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/BNBPrice.sol\":3375:3478  function changeOwner(address payable _newOwner) public onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":1520:1763  function usdToBnb(uint8 index) external view  returns (uint price){\r... */\n    tag_100:\n        /* \"contracts/BNBPrice.sol\":1575:1585  uint price */\n      0x00\n        /* \"contracts/BNBPrice.sol\":1599:1609  int24 tick */\n      dup1\n        /* \"contracts/BNBPrice.sol\":1633:1641  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":1642:1647  index */\n      dup4\n        /* \"contracts/BNBPrice.sol\":1633:1648  poolsUSD[index] */\n      0xff\n      and\n      dup2\n      sload\n      dup2\n      lt\n      tag_187\n      jumpi\n      invalid\n    tag_187:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1618:1655  IPancakeV3Pool(poolsUSD[index]).slot0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x3850c7bd\n        /* \"contracts/BNBPrice.sol\":1618:1657  IPancakeV3Pool(poolsUSD[index]).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xe0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_189\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_189:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_191\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_191:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0xe0\n      dup2\n      lt\n      iszero\n      tag_192\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_192:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":1597:1657  (,int24 tick,,,,,) = IPancakeV3Pool(poolsUSD[index]).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":1676:1754  OracleLibrary.getQuoteAtTick(\r... */\n      tag_193\n        /* \"contracts/BNBPrice.sol\":1719:1723  tick */\n      dup2\n        /* \"contracts/BNBPrice.sol\":1725:1729  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/BNBPrice.sol\":1731:1734  usd */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1736:1739  bnb */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/BNBPrice.sol\":1676:1704  OracleLibrary.getQuoteAtTick */\n      tag_129\n        /* \"contracts/BNBPrice.sol\":1676:1754  OracleLibrary.getQuoteAtTick(\r... */\n      jump\t// in\n    tag_193:\n        /* \"contracts/BNBPrice.sol\":1668:1754  price = OracleLibrary.getQuoteAtTick(\r... */\n      swap2\n      pop\n        /* \"contracts/BNBPrice.sol\":1520:1763  function usdToBnb(uint8 index) external view  returns (uint price){\r... */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":367:385  address public usd */\n    tag_103:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":3883:4049  function viewAverage() external view returns (uint256) {\r... */\n    tag_106:\n        /* \"contracts/BNBPrice.sol\":3929:3936  uint256 */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3981:3982  0 */\n      dup1\n        /* \"contracts/BNBPrice.sol\":3957:3966  lastPrice */\n      0x06\n        /* \"contracts/BNBPrice.sol\":3957:3978  lastPrice[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3967:3977  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":3957:3978  lastPrice[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/BNBPrice.sol\":3957:3982  lastPrice[msg.sender] > 0 */\n      gt\n        /* \"contracts/BNBPrice.sol\":3949:4002  require(lastPrice[msg.sender] > 0, \"No stored price\") */\n      tag_195\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4e6f2073746f7265642070726963650000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_195:\n        /* \"contracts/BNBPrice.sol\":4020:4029  lastPrice */\n      0x06\n        /* \"contracts/BNBPrice.sol\":4020:4041  lastPrice[msg.sender] */\n      0x00\n        /* \"contracts/BNBPrice.sol\":4030:4040  msg.sender */\n      caller\n        /* \"contracts/BNBPrice.sol\":4020:4041  lastPrice[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/BNBPrice.sol\":4013:4041  return lastPrice[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":3883:4049  function viewAverage() external view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":545:589  mapping(address => uint256) public lastPrice */\n    tag_110:\n      mstore(0x20, 0x06)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/BNBPrice.sol\":3085:3195  function poolsLenght() public view returns(uint){\r... */\n    tag_113:\n        /* \"contracts/BNBPrice.sol\":3128:3132  uint */\n      0x00\n        /* \"contracts/BNBPrice.sol\":3140:3150  uint count */\n      dup1\n        /* \"contracts/BNBPrice.sol\":3153:3161  poolsUSD */\n      0x04\n        /* \"contracts/BNBPrice.sol\":3153:3168  poolsUSD.length */\n      dup1\n      sload\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":3140:3168  uint count = poolsUSD.length */\n      swap1\n      pop\n        /* \"contracts/BNBPrice.sol\":3182:3187  count */\n      dup1\n        /* \"contracts/BNBPrice.sol\":3175:3187  return count */\n      swap2\n      pop\n      pop\n        /* \"contracts/BNBPrice.sol\":3085:3195  function poolsLenght() public view returns(uint){\r... */\n      swap1\n      jump\t// out\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2632:3587  function getQuoteAtTick(... */\n    tag_129:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2788:2807  uint256 quoteAmount */\n      0x00\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2819:2839  uint160 sqrtRatioX96 */\n      dup1\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2842:2875  TickMath.getSqrtRatioAtTick(tick) */\n      tag_198\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2870:2874  tick */\n      dup7\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2842:2869  TickMath.getSqrtRatioAtTick */\n      tag_199\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2842:2875  TickMath.getSqrtRatioAtTick(tick) */\n      jump\t// in\n    tag_198:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2819:2875  uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick) */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3010:3027  type(uint128).max */\n      0xffffffffffffffffffffffffffffffff\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2994:3027  sqrtRatioX96 <= type(uint128).max */\n      dup1\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2994:3006  sqrtRatioX96 */\n      dup2\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2994:3027  sqrtRatioX96 <= type(uint128).max */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2990:3581  if (sqrtRatioX96 <= type(uint128).max) {... */\n      tag_200\n      jumpi\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3043:3060  uint256 ratioX192 */\n      0x00\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3087:3099  sqrtRatioX96 */\n      dup2\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3063:3099  uint256(sqrtRatioX96) * sqrtRatioX96 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3071:3083  sqrtRatioX96 */\n      dup3\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3063:3084  uint256(sqrtRatioX96) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3063:3099  uint256(sqrtRatioX96) * sqrtRatioX96 */\n      mul\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3043:3099  uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3139:3149  quoteToken */\n      dup4\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3127:3149  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3127:3136  baseToken */\n      dup6\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3127:3149  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3127:3283  baseToken < quoteToken... */\n      tag_201\n      jumpi\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3235:3283  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      tag_202\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3251:3259  1 << 192 */\n      0x01000000000000000000000000000000000000000000000000\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3261:3271  baseAmount */\n      dup8\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3235:3283  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3273:3282  ratioX192 */\n      dup4\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3235:3250  FullMath.mulDiv */\n      tag_203\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3235:3283  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      jump\t// in\n    tag_202:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3127:3283  baseToken < quoteToken... */\n      jump(tag_204)\n    tag_201:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3168:3216  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      tag_205\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3184:3193  ratioX192 */\n      dup2\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3195:3205  baseAmount */\n      dup8\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3168:3216  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3207:3215  1 << 192 */\n      0x01000000000000000000000000000000000000000000000000\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3168:3183  FullMath.mulDiv */\n      tag_203\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3168:3216  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      jump\t// in\n    tag_205:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3127:3283  baseToken < quoteToken... */\n    tag_204:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3113:3283  quoteAmount = baseToken < quoteToken... */\n      swap3\n      pop\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2990:3581  if (sqrtRatioX96 <= type(uint128).max) {... */\n      pop\n      jump(tag_206)\n    tag_200:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3314:3331  uint256 ratioX128 */\n      0x00\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3334:3386  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      tag_207\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3350:3362  sqrtRatioX96 */\n      dup3\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3334:3386  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3364:3376  sqrtRatioX96 */\n      dup4\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3334:3386  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3378:3385  1 << 64 */\n      0x010000000000000000\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3334:3349  FullMath.mulDiv */\n      tag_203\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3334:3386  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      jump\t// in\n    tag_207:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3314:3386  uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3426:3436  quoteToken */\n      dup4\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3414:3436  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3414:3423  baseToken */\n      dup6\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3414:3436  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3414:3570  baseToken < quoteToken... */\n      tag_208\n      jumpi\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3522:3570  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      tag_209\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3538:3546  1 << 128 */\n      0x0100000000000000000000000000000000\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3548:3558  baseAmount */\n      dup8\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3522:3570  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3560:3569  ratioX128 */\n      dup4\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3522:3537  FullMath.mulDiv */\n      tag_203\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3522:3570  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      jump\t// in\n    tag_209:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3414:3570  baseToken < quoteToken... */\n      jump(tag_210)\n    tag_208:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3455:3503  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      tag_211\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3471:3480  ratioX128 */\n      dup2\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3482:3492  baseAmount */\n      dup8\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3455:3503  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3494:3502  1 << 128 */\n      0x0100000000000000000000000000000000\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3455:3470  FullMath.mulDiv */\n      tag_203\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3455:3503  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      jump\t// in\n    tag_211:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3414:3570  baseToken < quoteToken... */\n    tag_210:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3400:3570  quoteAmount = baseToken < quoteToken... */\n      swap3\n      pop\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2990:3581  if (sqrtRatioX96 <= type(uint128).max) {... */\n      pop\n    tag_206:\n        /* \"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2632:3587  function getQuoteAtTick(... */\n      pop\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n    tag_199:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1425:1445  uint160 sqrtPriceX96 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1457:1472  uint256 absTick */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1482:1483  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1475:1479  tick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1475:1483  tick < 0 */\n      0x02\n      signextend\n      slt\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      tag_213\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1526:1530  tick */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1519:1531  int256(tick) */\n      0x02\n      signextend\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      jump(tag_214)\n    tag_213:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1502:1506  tick */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1495:1507  int256(tick) */\n      0x02\n      signextend\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1494:1507  -int256(tick) */\n      0x00\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n    tag_214:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1457:1532  uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":484:491  -887272 */\n      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":644:653  -MIN_TICK */\n      0x00\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1561:1578  uint256(MAX_TICK) */\n      0x02\n      signextend\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1550:1557  absTick */\n      dup2\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1550:1578  absTick <= uint256(MAX_TICK) */\n      gt\n      iszero\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1542:1584  require(absTick <= uint256(MAX_TICK), 'T') */\n      tag_215\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5400000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_215:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1595:1608  uint256 ratio */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1628:1629  0 */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1621:1624  0x1 */\n      0x01\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1611:1618  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1611:1624  absTick & 0x1 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1611:1629  absTick & 0x1 != 0 */\n      eq\n      iszero\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      tag_216\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1669:1704  0x100000000000000000000000000000000 */\n      0x0100000000000000000000000000000000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      jump(tag_217)\n    tag_216:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1632:1666  0xfffcb933bd6fad37aa2d162d1a594001 */\n      0xfffcb933bd6fad37aa2d162d1a594001\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n    tag_217:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1595:1704  uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      0xffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1735:1736  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1728:1731  0x2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1718:1725  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1718:1731  absTick & 0x2 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1718:1736  absTick & 0x2 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      tag_218\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1794:1797  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1755:1789  0xfff97272373d413259a46990580e213a */\n      0xfff97272373d413259a46990580e213a\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1747:1752  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1747:1789  ratio * 0xfff97272373d413259a46990580e213a */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1746:1797  (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1738:1797  ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n    tag_218:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1828:1829  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1821:1824  0x4 */\n      0x04\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1811:1818  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1811:1824  absTick & 0x4 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1811:1829  absTick & 0x4 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      tag_219\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1887:1890  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1848:1882  0xfff2e50f5f656932ef12357cf3c7fdcc */\n      0xfff2e50f5f656932ef12357cf3c7fdcc\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1840:1845  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1840:1882  ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1839:1890  (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1831:1890  ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n    tag_219:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1921:1922  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1914:1917  0x8 */\n      0x08\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1904:1911  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1904:1917  absTick & 0x8 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1904:1922  absTick & 0x8 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      tag_220\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1980:1983  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1941:1975  0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      0xffe5caca7e10e4e61c3624eaa0941cd0\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1933:1938  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1933:1975  ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1932:1983  (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1924:1983  ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n    tag_220:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2015:2016  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2007:2011  0x10 */\n      0x10\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1997:2004  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1997:2011  absTick & 0x10 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1997:2016  absTick & 0x10 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      tag_221\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2074:2077  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2035:2069  0xffcb9843d60f6159c9db58835c926644 */\n      0xffcb9843d60f6159c9db58835c926644\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2027:2032  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2027:2069  ratio * 0xffcb9843d60f6159c9db58835c926644 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2026:2077  (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2018:2077  ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n    tag_221:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2109:2110  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2101:2105  0x20 */\n      0x20\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2091:2098  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2091:2105  absTick & 0x20 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2091:2110  absTick & 0x20 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      tag_222\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2168:2171  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2129:2163  0xff973b41fa98c081472e6896dfb254c0 */\n      0xff973b41fa98c081472e6896dfb254c0\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2121:2126  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2121:2163  ratio * 0xff973b41fa98c081472e6896dfb254c0 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2120:2171  (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2112:2171  ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n    tag_222:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2203:2204  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2195:2199  0x40 */\n      0x40\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2185:2192  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2185:2199  absTick & 0x40 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2185:2204  absTick & 0x40 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      tag_223\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2262:2265  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2223:2257  0xff2ea16466c96a3843ec78b326b52861 */\n      0xff2ea16466c96a3843ec78b326b52861\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2215:2220  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2215:2257  ratio * 0xff2ea16466c96a3843ec78b326b52861 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2214:2265  (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2206:2265  ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n    tag_223:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2297:2298  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2289:2293  0x80 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2279:2286  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2279:2293  absTick & 0x80 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2279:2298  absTick & 0x80 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      tag_224\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2356:2359  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2317:2351  0xfe5dee046a99a2a811c461f1969c3053 */\n      0xfe5dee046a99a2a811c461f1969c3053\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2309:2314  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2309:2351  ratio * 0xfe5dee046a99a2a811c461f1969c3053 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2308:2359  (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2300:2359  ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n    tag_224:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2392:2393  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2383:2388  0x100 */\n      0x0100\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2373:2380  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2373:2388  absTick & 0x100 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2373:2393  absTick & 0x100 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      tag_225\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2451:2454  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2412:2446  0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      0xfcbe86c7900a88aedcffc83b479aa3a4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2404:2409  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2404:2446  ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2403:2454  (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2395:2454  ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n    tag_225:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2487:2488  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2478:2483  0x200 */\n      0x0200\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2468:2475  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2468:2483  absTick & 0x200 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2468:2488  absTick & 0x200 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      tag_226\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2546:2549  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2507:2541  0xf987a7253ac413176f2b074cf7815e54 */\n      0xf987a7253ac413176f2b074cf7815e54\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2499:2504  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2499:2541  ratio * 0xf987a7253ac413176f2b074cf7815e54 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2498:2549  (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2490:2549  ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n    tag_226:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2582:2583  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2573:2578  0x400 */\n      0x0400\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2563:2570  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2563:2578  absTick & 0x400 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2563:2583  absTick & 0x400 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      tag_227\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2641:2644  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2602:2636  0xf3392b0822b70005940c7a398e4b70f3 */\n      0xf3392b0822b70005940c7a398e4b70f3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2594:2599  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2594:2636  ratio * 0xf3392b0822b70005940c7a398e4b70f3 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2593:2644  (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2585:2644  ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n    tag_227:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2677:2678  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2668:2673  0x800 */\n      0x0800\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2658:2665  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2658:2673  absTick & 0x800 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2658:2678  absTick & 0x800 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      tag_228\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2736:2739  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2697:2731  0xe7159475a2c29b7443b29c7fa6e889d9 */\n      0xe7159475a2c29b7443b29c7fa6e889d9\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2689:2694  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2689:2731  ratio * 0xe7159475a2c29b7443b29c7fa6e889d9 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2688:2739  (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2680:2739  ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n    tag_228:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2773:2774  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2763:2769  0x1000 */\n      0x1000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2753:2760  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2753:2769  absTick & 0x1000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2753:2774  absTick & 0x1000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      tag_229\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2832:2835  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2793:2827  0xd097f3bdfd2022b8845ad8f792aa5825 */\n      0xd097f3bdfd2022b8845ad8f792aa5825\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2785:2790  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2785:2827  ratio * 0xd097f3bdfd2022b8845ad8f792aa5825 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2784:2835  (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2776:2835  ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n    tag_229:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2869:2870  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2859:2865  0x2000 */\n      0x2000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2849:2856  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2849:2865  absTick & 0x2000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2849:2870  absTick & 0x2000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      tag_230\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2928:2931  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2889:2923  0xa9f746462d870fdf8a65dc1f90e061e5 */\n      0xa9f746462d870fdf8a65dc1f90e061e5\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2881:2886  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2881:2923  ratio * 0xa9f746462d870fdf8a65dc1f90e061e5 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2880:2931  (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2872:2931  ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n    tag_230:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2965:2966  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2955:2961  0x4000 */\n      0x4000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2945:2952  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2945:2961  absTick & 0x4000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2945:2966  absTick & 0x4000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      tag_231\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3024:3027  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2985:3019  0x70d869a156d2a1b890bb3df62baf32f7 */\n      0x70d869a156d2a1b890bb3df62baf32f7\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2977:2982  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2977:3019  ratio * 0x70d869a156d2a1b890bb3df62baf32f7 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2976:3027  (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2968:3027  ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n    tag_231:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3061:3062  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3051:3057  0x8000 */\n      0x8000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3041:3048  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3041:3057  absTick & 0x8000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3041:3062  absTick & 0x8000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      tag_232\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3120:3123  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3081:3115  0x31be135f97d08fd981231505542fcfa6 */\n      0x31be135f97d08fd981231505542fcfa6\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3073:3078  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3073:3115  ratio * 0x31be135f97d08fd981231505542fcfa6 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3072:3123  (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3064:3123  ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n    tag_232:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3158:3159  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3147:3154  0x10000 */\n      0x010000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3137:3144  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3137:3154  absTick & 0x10000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3137:3159  absTick & 0x10000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      tag_233\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3216:3219  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3178:3211  0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      0x09aa508b5b7a84e1c677de54f3e99bc9\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3170:3175  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3170:3211  ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3169:3219  (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3161:3219  ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n    tag_233:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3254:3255  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3243:3250  0x20000 */\n      0x020000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3233:3240  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3233:3250  absTick & 0x20000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3233:3255  absTick & 0x20000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      tag_234\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3311:3314  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3274:3306  0x5d6af8dedb81196699c329225ee604 */\n      0x5d6af8dedb81196699c329225ee604\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3266:3271  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3266:3306  ratio * 0x5d6af8dedb81196699c329225ee604 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3265:3314  (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3257:3314  ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n    tag_234:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3349:3350  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3338:3345  0x40000 */\n      0x040000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3328:3335  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3328:3345  absTick & 0x40000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3328:3350  absTick & 0x40000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      tag_235\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3404:3407  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3369:3399  0x2216e584f5fa1ea926041bedfe98 */\n      0x2216e584f5fa1ea926041bedfe98\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3361:3366  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3361:3399  ratio * 0x2216e584f5fa1ea926041bedfe98 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3360:3407  (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3352:3407  ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n    tag_235:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3442:3443  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3431:3438  0x80000 */\n      0x080000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3421:3428  absTick */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3421:3438  absTick & 0x80000 */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3421:3443  absTick & 0x80000 != 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      tag_236\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3492:3495  128 */\n      0x80\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3462:3487  0x48a170391f7dc42444e8fa2 */\n      0x048a170391f7dc42444e8fa2\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3454:3459  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3454:3487  ratio * 0x48a170391f7dc42444e8fa2 */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3453:3495  (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3445:3495  ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n    tag_236:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3517:3518  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3510:3514  tick */\n      dup5\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3510:3518  tick > 0 */\n      0x02\n      signextend\n      sgt\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n      iszero\n      tag_237\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3548:3553  ratio */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3528:3545  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3528:3553  type(uint256).max / ratio */\n      dup2\n      tag_238\n      jumpi\n      invalid\n    tag_238:\n      div\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3520:3553  ratio = type(uint256).max / ratio */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n    tag_237:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3924:3925  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3912:3919  1 << 32 */\n      0x0100000000\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3903:3908  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3903:3920  ratio % (1 << 32) */\n      dup2\n      tag_239\n      jumpi\n      invalid\n    tag_239:\n      mod\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3903:3925  ratio % (1 << 32) == 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      tag_240\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3932:3933  1 */\n      0x01\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      jump(tag_241)\n    tag_240:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3928:3929  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n    tag_241:\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      0xff\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3896:3898  32 */\n      0x20\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3887:3892  ratio */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3887:3898  ratio >> 32 */\n      swap1\n      shr\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      add\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":3863:3935  sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)) */\n      swap3\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n      pop\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":762:4538  function mulDiv(... */\n    tag_203:\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":874:888  uint256 result */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1203:1216  uint256 prod0 */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1271:1284  uint256 prod1 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1388:1389  0 */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1384:1390  not(0) */\n      not\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1381:1382  b */\n      dup6\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1378:1379  a */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1371:1391  mulmod(a, b, not(0)) */\n      mulmod\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1420:1421  b */\n      dup6\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1417:1418  a */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1413:1422  mul(a, b) */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1404:1422  prod0 := mul(a, b) */\n      swap3\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1471:1476  prod0 */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1467:1469  mm */\n      dup2\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1464:1477  lt(mm, prod0) */\n      lt\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1456:1461  prod0 */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1452:1454  mm */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1448:1462  sub(mm, prod0) */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1444:1478  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1435:1478  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1347:1488  {... */\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1569:1570  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1560:1565  prod1 */\n      dup2\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1560:1570  prod1 == 0 */\n      eq\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1556:1735  if (prod1 == 0) {... */\n      iszero\n      tag_243\n      jumpi\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1608:1609  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1594:1605  denominator */\n      dup5\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1594:1609  denominator > 0 */\n      gt\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1586:1610  require(denominator > 0) */\n      tag_244\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_244:\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1672:1683  denominator */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1665:1670  prod0 */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1661:1684  div(prod0, denominator) */\n      div\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1651:1684  result := div(prod0, denominator) */\n      swap3\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1711:1724  return result */\n      pop\n      pop\n      jump(tag_242)\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1556:1735  if (prod1 == 0) {... */\n    tag_243:\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1862:1867  prod1 */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1848:1859  denominator */\n      dup5\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1848:1867  denominator > prod1 */\n      gt\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":1840:1868  require(denominator > prod1) */\n      tag_245\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_245:\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2145:2162  uint256 remainder */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2221:2232  denominator */\n      dup5\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2218:2219  b */\n      dup7\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2215:2216  a */\n      dup9\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2208:2233  mulmod(a, b, denominator) */\n      mulmod\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2195:2233  remainder := mulmod(a, b, denominator) */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2364:2369  prod0 */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2353:2362  remainder */\n      dup2\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2350:2370  gt(remainder, prod0) */\n      gt\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2343:2348  prod1 */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2339:2371  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2330:2371  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2404:2413  remainder */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2397:2402  prod0 */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2393:2414  sub(prod0, remainder) */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2384:2414  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2573:2585  uint256 twos */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2603:2614  denominator */\n      dup6\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2589:2600  denominator */\n      dup7\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2588:2600  -denominator */\n      0x00\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2588:2614  -denominator & denominator */\n      and\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2573:2614  uint256 twos = -denominator & denominator */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2725:2729  twos */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2712:2723  denominator */\n      dup7\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2708:2730  div(denominator, twos) */\n      div\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2693:2730  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2847:2851  twos */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2840:2845  prod0 */\n      dup5\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2836:2852  div(prod0, twos) */\n      div\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":2827:2852  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3101:3102  1 */\n      0x01\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3094:3098  twos */\n      dup2\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3087:3091  twos */\n      dup3\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3084:3085  0 */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3080:3092  sub(0, twos) */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3076:3099  div(sub(0, twos), twos) */\n      div\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3072:3103  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3064:3103  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3139:3143  twos */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3131:3136  prod1 */\n      dup4\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3131:3143  prod1 * twos */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3122:3143  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3477:3488  uint256 inv */\n      0x00\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3511:3512  2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3496:3507  denominator */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3492:3493  3 */\n      0x03\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3492:3507  3 * denominator */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3491:3512  (3 * denominator) ^ 2 */\n      xor\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3477:3512  uint256 inv = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3752:3755  inv */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3738:3749  denominator */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3738:3755  denominator * inv */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3734:3735  2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3734:3755  2 - denominator * inv */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3727:3755  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3810:3813  inv */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3796:3807  denominator */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3796:3813  denominator * inv */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3792:3793  2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3792:3813  2 - denominator * inv */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3785:3813  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3869:3872  inv */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3855:3866  denominator */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3855:3872  denominator * inv */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3851:3852  2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3851:3872  2 - denominator * inv */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3844:3872  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3928:3931  inv */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3914:3925  denominator */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3914:3931  denominator * inv */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3910:3911  2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3910:3931  2 - denominator * inv */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3903:3931  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3987:3990  inv */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3973:3984  denominator */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3973:3990  denominator * inv */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3969:3970  2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3969:3990  2 - denominator * inv */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":3962:3990  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4047:4050  inv */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4033:4044  denominator */\n      dup8\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4033:4050  denominator * inv */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4029:4030  2 */\n      0x02\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4029:4050  2 - denominator * inv */\n      sub\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4022:4050  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4505:4508  inv */\n      dup1\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4497:4502  prod0 */\n      dup6\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4497:4508  prod0 * inv */\n      mul\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4488:4508  result = prod0 * inv */\n      swap6\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":4518:4531  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":762:4538  function mulDiv(... */\n    tag_242:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212202a74913e8bb9c0df56838a359fc279825fbfdaeb6b855599d5bb1db4d9db629064736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507355d398326f99059ff775485246999027b3197955600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600781905550612069806101136000396000f3fe6080604052600436106101395760003560e01c806367b51834116100ab578063a6f9dae11161006f578063a6f9dae1146106be578063c0404fa71461070f578063d63a6ccd14610761578063e03d1632146107a2578063f5a6ba2e146107cd578063f74b28c1146108325761025d565b806367b51834146104d65780636c7474da146105365780636d201e8b146105885780638da5cb5b146105ed578063a1c6a4051461062e5761025d565b80633b907d14116100fd5780633b907d141461039a578063448883d7146103eb57806349a876e4146104025780634d899b32146104435780635e59c8ce1461046e57806365a6cc2e146104bf5761025d565b8063026f0dbe1461026257806309cf28da1461028f57806314b085a4146102ba5780632e5bb6ff1461032157806332a6013c1461035c5761025d565b3661025d576007543410156101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f56616c7565204c6f77000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600061020d600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661085d565b905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060008190555050005b600080fd5b34801561026e57600080fd5b50610277610ae7565b60405180821515815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610b3b565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610309600480360360208110156102dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbc565b60405180821515815260200191505060405180910390f35b34801561032d57600080fd5b5061035a6004803603602081101561034457600080fd5b8101908080359060200190929190505050610bdc565b005b34801561036857600080fd5b506103986004803603602081101561037f57600080fd5b81019080803560ff169060200190929190505050610c40565b005b3480156103a657600080fd5b506103e9600480360360208110156103bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d75565b005b3480156103f757600080fd5b50610400610e13565b005b34801561040e57600080fd5b50610417610f4f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044f57600080fd5b50610458610f75565b6040518082815260200191505060405180910390f35b34801561047a57600080fd5b506104bd6004803603602081101561049157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f7b565b005b3480156104cb57600080fd5b506104d4611019565b005b3480156104e257600080fd5b50610534600480360360408110156104f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803562ffffff1690602001909291905050506110bf565b005b34801561054257600080fd5b506105726004803603602081101561055957600080fd5b81019080803560ff169060200190929190505050611339565b6040518082815260200191505060405180910390f35b34801561059457600080fd5b506105c1600480360360208110156105ab57600080fd5b810190808035906020019092919050505061149b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f957600080fd5b506106026114da565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063a57600080fd5b50610643611500565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610683578082015181840152602081019050610668565b50505050905090810190601f1680156106b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106ca57600080fd5b5061070d600480360360208110156106e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115d0565b005b34801561071b57600080fd5b5061074b6004803603602081101561073257600080fd5b81019080803560ff16906020019092919050505061166e565b6040518082815260200191505060405180910390f35b34801561076d57600080fd5b506107766117d0565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107ae57600080fd5b506107b76117f6565b6040518082815260200191505060405180910390f35b3480156107d957600080fd5b5061081c600480360360208110156107f057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118f1565b6040518082815260200191505060405180910390f35b34801561083e57600080fd5b50610847611909565b6040518082815260200191505060405180910390f35b600080600080600090505b6004805490508160ff161015610a5757600060048260ff168154811061088a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156108fa57600080fd5b505afa15801561090e573d6000803e3d6000fd5b505050506040513d60e081101561092457600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505050509150506000610a2f82670de0b6b3a7640000896109b557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109d9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b8a610a0657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610a2a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b61191b565b90506000811115610a4857808501945083806001019450505b50508080600101915050610868565b5060008160ff1611610ad1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f20707269636520666f756e6400000000000000000000000000000000000081525060200191505060405180910390fd5b8060ff168281610add57fe5b0492505050919050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b60008060005411610bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f2073746f726564207072696365000000000000000000000000000000000081525060200191505060405180910390fd5b600054905090565b60056020528060005260406000206000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c3657600080fd5b8060078190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c9a57600080fd5b600460016004805490500381548110610caf57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048260ff1681548110610cea57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004805480610d3d57fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dcf57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6d57600080fd5b6000471015610ee4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f7420656e6f7567682062616c616e6365000000000000000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610f4c573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fd557600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111957600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16631698ee82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff168152602001935050505060206040518083038186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f506f6f6c204e6f7420466f756e6400000000000000000000000000000000000081525060200191505060405180910390fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008060048360ff168154811061134c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156113bc57600080fd5b505afa1580156113d0573d6000803e3d6000fd5b505050506040513d60e08110156113e657600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050505050505091505061149381670de0b6b3a7640000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661191b565b915050919050565b600481815481106114ab57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611590576040518060400160405280600781526020017f424e4255534454000000000000000000000000000000000000000000000000008152506115c7565b6040518060400160405280600781526020017f55534454424e42000000000000000000000000000000000000000000000000008152505b90508091505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461162a57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060048360ff168154811061168157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156116f157600080fd5b505afa158015611705573d6000803e3d6000fd5b505050506040513d60e081101561171b57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505050509150506117c881670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661191b565b915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116118ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f2073746f726564207072696365000000000000000000000000000000000081525060200191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60066020528060005260406000206000915090505481565b60008060048054905090508091505090565b60008061192786611b1e565b90506fffffffffffffffffffffffffffffffff80168173ffffffffffffffffffffffffffffffffffffffff1611611a385760008173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160290508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106119f9576119f47801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611f59565b611a30565b611a2f81876fffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000611f59565b5b925050611b15565b6000611a7a8273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1668010000000000000000611f59565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610611ae257611add700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611f59565b611b11565b611b1081876fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000611f59565b5b9250505b50949350505050565b60008060008360020b12611b35578260020b611b3d565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b811115611bdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600183161415611bff57700100000000000000000000000000000000611c11565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060006002831614611c4b5760806ffff97272373d413259a46990580e213a8202901c90505b60006004831614611c705760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b60006008831614611c955760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b60006010831614611cba5760806fffcb9843d60f6159c9db58835c9266448202901c90505b60006020831614611cdf5760806fff973b41fa98c081472e6896dfb254c08202901c90505b60006040831614611d045760806fff2ea16466c96a3843ec78b326b528618202901c90505b60006080831614611d295760806ffe5dee046a99a2a811c461f1969c30538202901c90505b6000610100831614611d4f5760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b6000610200831614611d755760806ff987a7253ac413176f2b074cf7815e548202901c90505b6000610400831614611d9b5760806ff3392b0822b70005940c7a398e4b70f38202901c90505b6000610800831614611dc15760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b6000611000831614611de75760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b6000612000831614611e0d5760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b6000614000831614611e335760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b6000618000831614611e595760806f31be135f97d08fd981231505542fcfa68202901c90505b600062010000831614611e805760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b600062020000831614611ea65760806e5d6af8dedb81196699c329225ee6048202901c90505b600062040000831614611ecb5760806d2216e584f5fa1ea926041bedfe988202901c90505b600062080000831614611eee5760806b048a170391f7dc42444e8fa28202901c90505b60008460020b1315611f2757807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611f2357fe5b0490505b60006401000000008281611f3757fe5b0614611f44576001611f47565b60005b60ff16602082901c0192505050919050565b600080600080198587098587029250828110838203039150506000811415611f945760008411611f8857600080fd5b8382049250505061202c565b808411611fa057600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b939250505056fea26469706673582212202a74913e8bb9c0df56838a359fc279825fbfdaeb6b855599d5bb1db4d9db629064736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0x55D398326F99059FF775485246999027B3197955 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH2 0x2069 DUP1 PUSH2 0x113 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x139 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x67B51834 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xA6F9DAE1 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xA6F9DAE1 EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0xC0404FA7 EQ PUSH2 0x70F JUMPI DUP1 PUSH4 0xD63A6CCD EQ PUSH2 0x761 JUMPI DUP1 PUSH4 0xE03D1632 EQ PUSH2 0x7A2 JUMPI DUP1 PUSH4 0xF5A6BA2E EQ PUSH2 0x7CD JUMPI DUP1 PUSH4 0xF74B28C1 EQ PUSH2 0x832 JUMPI PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH4 0x67B51834 EQ PUSH2 0x4D6 JUMPI DUP1 PUSH4 0x6C7474DA EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0x6D201E8B EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0xA1C6A405 EQ PUSH2 0x62E JUMPI PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH4 0x3B907D14 GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x3B907D14 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0x448883D7 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x49A876E4 EQ PUSH2 0x402 JUMPI DUP1 PUSH4 0x4D899B32 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x5E59C8CE EQ PUSH2 0x46E JUMPI DUP1 PUSH4 0x65A6CC2E EQ PUSH2 0x4BF JUMPI PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH4 0x26F0DBE EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0x9CF28DA EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0x14B085A4 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x2E5BB6FF EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0x32A6013C EQ PUSH2 0x35C JUMPI PUSH2 0x25D JUMP JUMPDEST CALLDATASIZE PUSH2 0x25D JUMPI PUSH1 0x7 SLOAD CALLVALUE LT ISZERO PUSH2 0x1B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x56616C7565204C6F770000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x20D PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x85D JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0xAE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A4 PUSH2 0xB3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBBC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBDC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x398 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC40 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD75 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x400 PUSH2 0xE13 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x417 PUSH2 0xF4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x458 PUSH2 0xF75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF7B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D4 PUSH2 0x1019 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x534 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH3 0xFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x10BF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x572 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1339 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x602 PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x643 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x683 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x668 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x6B0 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x15D0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x74B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x166E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x776 PUSH2 0x17D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B7 PUSH2 0x17F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x81C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x18F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x83E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x847 PUSH2 0x1909 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0xA57 JUMPI PUSH1 0x0 PUSH1 0x4 DUP3 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x88A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x90E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP POP POP POP POP SWAP2 POP POP PUSH1 0x0 PUSH2 0xA2F DUP3 PUSH8 0xDE0B6B3A7640000 DUP10 PUSH2 0x9B5 JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9D9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST DUP11 PUSH2 0xA06 JUMPI PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xA48 JUMPI DUP1 DUP6 ADD SWAP5 POP DUP4 DUP1 PUSH1 0x1 ADD SWAP5 POP POP JUMPDEST POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x868 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0xFF AND GT PUSH2 0xAD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F20707269636520666F756E64000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFF AND DUP3 DUP2 PUSH2 0xADD JUMPI INVALID JUMPDEST DIV SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD GT PUSH2 0xBB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F2073746F7265642070726963650000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x7 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x1 PUSH1 0x4 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT PUSH2 0xCAF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 DUP3 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0xCEA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x4 DUP1 SLOAD DUP1 PUSH2 0xD3D JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SELFBALANCE LT ISZERO PUSH2 0xEE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F7420656E6F7567682062616C616E63650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xF4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1205 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x121B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x12D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x506F6F6C204E6F7420466F756E64000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x134C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x13E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP POP POP POP POP SWAP2 POP POP PUSH2 0x1493 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x191B JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x14AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1590 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x424E425553445400000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x15C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x55534454424E4200000000000000000000000000000000000000000000000000 DUP2 MSTORE POP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x162A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1681 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1705 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x171B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP POP POP POP POP SWAP2 POP POP PUSH2 0x17C8 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x191B JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x18AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F2073746F7265642070726963650000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP1 SLOAD SWAP1 POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1927 DUP7 PUSH2 0x1B1E JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x1A38 JUMPI PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x19F9 JUMPI PUSH2 0x19F4 PUSH25 0x1000000000000000000000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x1F59 JUMP JUMPDEST PUSH2 0x1A30 JUMP JUMPDEST PUSH2 0x1A2F DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH25 0x1000000000000000000000000000000000000000000000000 PUSH2 0x1F59 JUMP JUMPDEST JUMPDEST SWAP3 POP POP PUSH2 0x1B15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7A DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH2 0x1F59 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x1AE2 JUMPI PUSH2 0x1ADD PUSH17 0x100000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x1F59 JUMP JUMPDEST PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0x1B10 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH17 0x100000000000000000000000000000000 PUSH2 0x1F59 JUMP JUMPDEST JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1B35 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1B3D JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0x1BDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0x1BFF JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0x1C11 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0x1C4B JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0x1C70 JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0x1C95 JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0x1CBA JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0x1CDF JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0x1D04 JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0x1D29 JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0x1D4F JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0x1D75 JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0x1D9B JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0x1DC1 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0x1DE7 JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0x1E0D JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0x1E33 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0x1E59 JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0x1E80 JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0x1EA6 JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0x1ECB JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0x1EEE JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1F27 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0x1F23 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0x1F37 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x1F44 JUMPI PUSH1 0x1 PUSH2 0x1F47 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x1F94 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0x202C JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1FA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A PUSH21 0x913E8BB9C0DF56838A359FC279825FBFDAEB6B8555 SWAP10 0xD5 0xBB SAR 0xB4 0xD9 0xDB PUSH3 0x906473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "284:4012:11:-:0;;;698:213;;;;;;;;;;738:10;722:5;;:27;;;;;;;;;;;;;;;;;;766:42;760:3;;:48;;;;;;;;;;;;;;;;;;825:42;819:3;;:48;;;;;;;;;;;;;;;;;;884:1;878:3;:7;;;;284:4012;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106101395760003560e01c806367b51834116100ab578063a6f9dae11161006f578063a6f9dae1146106be578063c0404fa71461070f578063d63a6ccd14610761578063e03d1632146107a2578063f5a6ba2e146107cd578063f74b28c1146108325761025d565b806367b51834146104d65780636c7474da146105365780636d201e8b146105885780638da5cb5b146105ed578063a1c6a4051461062e5761025d565b80633b907d14116100fd5780633b907d141461039a578063448883d7146103eb57806349a876e4146104025780634d899b32146104435780635e59c8ce1461046e57806365a6cc2e146104bf5761025d565b8063026f0dbe1461026257806309cf28da1461028f57806314b085a4146102ba5780632e5bb6ff1461032157806332a6013c1461035c5761025d565b3661025d576007543410156101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f56616c7565204c6f77000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600061020d600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661085d565b905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060008190555050005b600080fd5b34801561026e57600080fd5b50610277610ae7565b60405180821515815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610b3b565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610309600480360360208110156102dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbc565b60405180821515815260200191505060405180910390f35b34801561032d57600080fd5b5061035a6004803603602081101561034457600080fd5b8101908080359060200190929190505050610bdc565b005b34801561036857600080fd5b506103986004803603602081101561037f57600080fd5b81019080803560ff169060200190929190505050610c40565b005b3480156103a657600080fd5b506103e9600480360360208110156103bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d75565b005b3480156103f757600080fd5b50610400610e13565b005b34801561040e57600080fd5b50610417610f4f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044f57600080fd5b50610458610f75565b6040518082815260200191505060405180910390f35b34801561047a57600080fd5b506104bd6004803603602081101561049157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f7b565b005b3480156104cb57600080fd5b506104d4611019565b005b3480156104e257600080fd5b50610534600480360360408110156104f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803562ffffff1690602001909291905050506110bf565b005b34801561054257600080fd5b506105726004803603602081101561055957600080fd5b81019080803560ff169060200190929190505050611339565b6040518082815260200191505060405180910390f35b34801561059457600080fd5b506105c1600480360360208110156105ab57600080fd5b810190808035906020019092919050505061149b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f957600080fd5b506106026114da565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063a57600080fd5b50610643611500565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610683578082015181840152602081019050610668565b50505050905090810190601f1680156106b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106ca57600080fd5b5061070d600480360360208110156106e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115d0565b005b34801561071b57600080fd5b5061074b6004803603602081101561073257600080fd5b81019080803560ff16906020019092919050505061166e565b6040518082815260200191505060405180910390f35b34801561076d57600080fd5b506107766117d0565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107ae57600080fd5b506107b76117f6565b6040518082815260200191505060405180910390f35b3480156107d957600080fd5b5061081c600480360360208110156107f057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118f1565b6040518082815260200191505060405180910390f35b34801561083e57600080fd5b50610847611909565b6040518082815260200191505060405180910390f35b600080600080600090505b6004805490508160ff161015610a5757600060048260ff168154811061088a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156108fa57600080fd5b505afa15801561090e573d6000803e3d6000fd5b505050506040513d60e081101561092457600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505050509150506000610a2f82670de0b6b3a7640000896109b557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109d9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b8a610a0657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610a2a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b61191b565b90506000811115610a4857808501945083806001019450505b50508080600101915050610868565b5060008160ff1611610ad1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f20707269636520666f756e6400000000000000000000000000000000000081525060200191505060405180910390fd5b8060ff168281610add57fe5b0492505050919050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b60008060005411610bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f2073746f726564207072696365000000000000000000000000000000000081525060200191505060405180910390fd5b600054905090565b60056020528060005260406000206000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c3657600080fd5b8060078190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c9a57600080fd5b600460016004805490500381548110610caf57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048260ff1681548110610cea57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004805480610d3d57fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dcf57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6d57600080fd5b6000471015610ee4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f7420656e6f7567682062616c616e6365000000000000000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610f4c573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fd557600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111957600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16631698ee82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff168152602001935050505060206040518083038186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f506f6f6c204e6f7420466f756e6400000000000000000000000000000000000081525060200191505060405180910390fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008060048360ff168154811061134c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156113bc57600080fd5b505afa1580156113d0573d6000803e3d6000fd5b505050506040513d60e08110156113e657600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050505050505091505061149381670de0b6b3a7640000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661191b565b915050919050565b600481815481106114ab57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611590576040518060400160405280600781526020017f424e4255534454000000000000000000000000000000000000000000000000008152506115c7565b6040518060400160405280600781526020017f55534454424e42000000000000000000000000000000000000000000000000008152505b90508091505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461162a57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060048360ff168154811061168157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156116f157600080fd5b505afa158015611705573d6000803e3d6000fd5b505050506040513d60e081101561171b57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505050509150506117c881670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661191b565b915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116118ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f2073746f726564207072696365000000000000000000000000000000000081525060200191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60066020528060005260406000206000915090505481565b60008060048054905090508091505090565b60008061192786611b1e565b90506fffffffffffffffffffffffffffffffff80168173ffffffffffffffffffffffffffffffffffffffff1611611a385760008173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160290508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106119f9576119f47801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611f59565b611a30565b611a2f81876fffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000611f59565b5b925050611b15565b6000611a7a8273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1668010000000000000000611f59565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610611ae257611add700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611f59565b611b11565b611b1081876fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000611f59565b5b9250505b50949350505050565b60008060008360020b12611b35578260020b611b3d565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b811115611bdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600183161415611bff57700100000000000000000000000000000000611c11565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060006002831614611c4b5760806ffff97272373d413259a46990580e213a8202901c90505b60006004831614611c705760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b60006008831614611c955760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b60006010831614611cba5760806fffcb9843d60f6159c9db58835c9266448202901c90505b60006020831614611cdf5760806fff973b41fa98c081472e6896dfb254c08202901c90505b60006040831614611d045760806fff2ea16466c96a3843ec78b326b528618202901c90505b60006080831614611d295760806ffe5dee046a99a2a811c461f1969c30538202901c90505b6000610100831614611d4f5760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b6000610200831614611d755760806ff987a7253ac413176f2b074cf7815e548202901c90505b6000610400831614611d9b5760806ff3392b0822b70005940c7a398e4b70f38202901c90505b6000610800831614611dc15760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b6000611000831614611de75760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b6000612000831614611e0d5760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b6000614000831614611e335760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b6000618000831614611e595760806f31be135f97d08fd981231505542fcfa68202901c90505b600062010000831614611e805760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b600062020000831614611ea65760806e5d6af8dedb81196699c329225ee6048202901c90505b600062040000831614611ecb5760806d2216e584f5fa1ea926041bedfe988202901c90505b600062080000831614611eee5760806b048a170391f7dc42444e8fa28202901c90505b60008460020b1315611f2757807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611f2357fe5b0490505b60006401000000008281611f3757fe5b0614611f44576001611f47565b60005b60ff16602082901c0192505050919050565b600080600080198587098587029250828110838203039150506000811415611f945760008411611f8857600080fd5b8382049250505061202c565b808411611fa057600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b939250505056fea26469706673582212202a74913e8bb9c0df56838a359fc279825fbfdaeb6b855599d5bb1db4d9db629064736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x139 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x67B51834 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xA6F9DAE1 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xA6F9DAE1 EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0xC0404FA7 EQ PUSH2 0x70F JUMPI DUP1 PUSH4 0xD63A6CCD EQ PUSH2 0x761 JUMPI DUP1 PUSH4 0xE03D1632 EQ PUSH2 0x7A2 JUMPI DUP1 PUSH4 0xF5A6BA2E EQ PUSH2 0x7CD JUMPI DUP1 PUSH4 0xF74B28C1 EQ PUSH2 0x832 JUMPI PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH4 0x67B51834 EQ PUSH2 0x4D6 JUMPI DUP1 PUSH4 0x6C7474DA EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0x6D201E8B EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0xA1C6A405 EQ PUSH2 0x62E JUMPI PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH4 0x3B907D14 GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x3B907D14 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0x448883D7 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0x49A876E4 EQ PUSH2 0x402 JUMPI DUP1 PUSH4 0x4D899B32 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x5E59C8CE EQ PUSH2 0x46E JUMPI DUP1 PUSH4 0x65A6CC2E EQ PUSH2 0x4BF JUMPI PUSH2 0x25D JUMP JUMPDEST DUP1 PUSH4 0x26F0DBE EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0x9CF28DA EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0x14B085A4 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x2E5BB6FF EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0x32A6013C EQ PUSH2 0x35C JUMPI PUSH2 0x25D JUMP JUMPDEST CALLDATASIZE PUSH2 0x25D JUMPI PUSH1 0x7 SLOAD CALLVALUE LT ISZERO PUSH2 0x1B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x56616C7565204C6F770000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x20D PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x85D JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0xAE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A4 PUSH2 0xB3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBBC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBDC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x398 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC40 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD75 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x400 PUSH2 0xE13 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x417 PUSH2 0xF4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x458 PUSH2 0xF75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF7B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D4 PUSH2 0x1019 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x534 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH3 0xFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x10BF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x572 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1339 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x602 PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x643 PUSH2 0x1500 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x683 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x668 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x6B0 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x15D0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x74B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x166E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x776 PUSH2 0x17D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B7 PUSH2 0x17F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x81C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x18F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x83E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x847 PUSH2 0x1909 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0xA57 JUMPI PUSH1 0x0 PUSH1 0x4 DUP3 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x88A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x90E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP POP POP POP POP SWAP2 POP POP PUSH1 0x0 PUSH2 0xA2F DUP3 PUSH8 0xDE0B6B3A7640000 DUP10 PUSH2 0x9B5 JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9D9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST DUP11 PUSH2 0xA06 JUMPI PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST PUSH2 0x191B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xA48 JUMPI DUP1 DUP6 ADD SWAP5 POP DUP4 DUP1 PUSH1 0x1 ADD SWAP5 POP POP JUMPDEST POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x868 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0xFF AND GT PUSH2 0xAD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F20707269636520666F756E64000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFF AND DUP3 DUP2 PUSH2 0xADD JUMPI INVALID JUMPDEST DIV SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD GT PUSH2 0xBB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F2073746F7265642070726963650000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x7 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x1 PUSH1 0x4 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT PUSH2 0xCAF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 DUP3 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0xCEA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x4 DUP1 SLOAD DUP1 PUSH2 0xD3D JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SELFBALANCE LT ISZERO PUSH2 0xEE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F7420656E6F7567682062616C616E63650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xF4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1205 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x121B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x12D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x506F6F6C204E6F7420466F756E64000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x134C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x13E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP POP POP POP POP SWAP2 POP POP PUSH2 0x1493 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x191B JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x14AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1590 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x424E425553445400000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x15C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x55534454424E4200000000000000000000000000000000000000000000000000 DUP2 MSTORE POP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x162A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1681 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1705 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x171B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP POP POP POP POP SWAP2 POP POP PUSH2 0x17C8 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x191B JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x18AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F2073746F7265642070726963650000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP1 SLOAD SWAP1 POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1927 DUP7 PUSH2 0x1B1E JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x1A38 JUMPI PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x19F9 JUMPI PUSH2 0x19F4 PUSH25 0x1000000000000000000000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x1F59 JUMP JUMPDEST PUSH2 0x1A30 JUMP JUMPDEST PUSH2 0x1A2F DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH25 0x1000000000000000000000000000000000000000000000000 PUSH2 0x1F59 JUMP JUMPDEST JUMPDEST SWAP3 POP POP PUSH2 0x1B15 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7A DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH2 0x1F59 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x1AE2 JUMPI PUSH2 0x1ADD PUSH17 0x100000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x1F59 JUMP JUMPDEST PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0x1B10 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH17 0x100000000000000000000000000000000 PUSH2 0x1F59 JUMP JUMPDEST JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1B35 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1B3D JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0x1BDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0x1BFF JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0x1C11 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0x1C4B JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0x1C70 JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0x1C95 JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0x1CBA JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0x1CDF JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0x1D04 JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0x1D29 JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0x1D4F JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0x1D75 JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0x1D9B JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0x1DC1 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0x1DE7 JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0x1E0D JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0x1E33 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0x1E59 JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0x1E80 JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0x1EA6 JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0x1ECB JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0x1EEE JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1F27 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0x1F23 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0x1F37 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x1F44 JUMPI PUSH1 0x1 PUSH2 0x1F47 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x1F94 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0x202C JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1FA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A PUSH21 0x913E8BB9C0DF56838A359FC279825FBFDAEB6B8555 SWAP10 0xD5 0xBB SAR 0xB4 0xD9 0xDB PUSH3 0x906473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "284:4012:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3720:3;;3707:9;:16;;3699:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3749:13;3765:28;3774:6;:18;3781:10;3774:18;;;;;;;;;;;;;;;;;;;;;;;;;3765:8;:28::i;:::-;3749:44;;3828:5;3804:9;:21;3814:10;3804:21;;;;;;;;;;;;;;;:29;;;;3862:5;3844:15;:23;;;;3661:214;284:4012;;;;;2986:91;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4057:155;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;459:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4220:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1367:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2709:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3488:163;;;;;;;;;;;;;:::i;:::-;;342:18;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;308:27;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2799:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2889:87;;;;;;;;;;;;;:::i;:::-;;1067:292;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1773:242;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;427:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;392:28;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3203:164;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3375:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1520:243;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;367:18;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3883:166;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;545:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3085:110;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2033:668;2086:15;2114:14;2139:16;2173:7;2183:1;2173:11;;2168:432;2190:8;:15;;;;2186:1;:19;;;2168:432;;;2230:10;2264:8;2273:1;2264:11;;;;;;;;;;;;;;;;;;;;;;;;;;;2249:33;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2227:57;;;;;;;;2299:13;2315:161;2362:4;2385;2408:5;:17;;2422:3;;;;;;;;;;;2408:17;;;2416:3;;;;;;;;;;;2408:17;2444:5;:17;;2458:3;;;;;;;;;;;2444:17;;;2452:3;;;;;;;;;;;2444:17;2315:28;:161::i;:::-;2299:177;;2505:1;2497:5;:9;2493:96;;;2537:5;2527:15;;;;2561:12;;;;;;;2493:96;2168:432;;2207:3;;;;;;;2168:432;;;;2633:1;2620:10;:14;;;2612:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2683:10;2674:19;;:6;:19;;;;;;2664:29;;2033:668;;;;;:::o;2986:91::-;3028:4;3051:6;:18;3058:10;3051:18;;;;;;;;;;;;;;;;;;;;;;;;;3044:25;;2986:91;:::o;4057:155::-;4108:4;4150:1;4132:15;;:19;4124:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4189:15;;4182:22;;4057:155;:::o;459:40::-;;;;;;;;;;;;;;;;;;;;;;:::o;4220:73::-;970:5;;;;;;;;;;;956:19;;:10;:19;;;948:28;;;;;;4281:4:::1;4275:3;:10;;;;4220:73:::0;:::o;1367:145::-;970:5;;;;;;;;;;;956:19;;:10;:19;;;948:28;;;;;;1450:8:::1;1477:1;1459:8;:15;;;;:19;1450:29;;;;;;;;;;;;;;;;;;;;;;;;;1432:8;1441:5;1432:15;;;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;1490:8;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1367:145:::0;:::o;2709:82::-;970:5;;;;;;;;;;;956:19;;:10;:19;;;948:28;;;;;;2779:4:::1;2773:3;;:10;;;;;;;;;;;;;;;;;;2709:82:::0;:::o;3488:163::-;970:5;;;;;;;;;;;956:19;;:10;:19;;;948:28;;;;;;3571:1:::1;3546:21;:26;;3538:57;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;3606:5;;;;;;;;;;;:14;;:37;3621:21;3606:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;3488:163::o:0;342:18::-;;;;;;;;;;;;;:::o;308:27::-;;;;:::o;2799:82::-;970:5;;;;;;;;;;;956:19;;:10;:19;;;948:28;;;;;;2869:4:::1;2863:3;;:10;;;;;;;;;;;;;;;;;;2799:82:::0;:::o;2889:87::-;2950:6;:18;2957:10;2950:18;;;;;;;;;;;;;;;;;;;;;;;;;2949:19;2928:6;:18;2935:10;2928:18;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;2889:87::o;1067:292::-;970:5;;;;;;;;;;;956:19;;:10;:19;;;948:28;;;;;;1148:12:::1;1181:8;1163:35;;;1213:3;;;;;;;;;;;1231;;;;;;;;;;;1249:4;1163:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;1148:116;;1299:1;1283:18;;:4;:18;;;;1275:46;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;1332:8;1346:4;1332:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;987:1;1067:292:::0;;:::o;1773:242::-;1828:10;1852;1886:8;1895:5;1886:15;;;;;;;;;;;;;;;;;;;;;;;;;;;1871:37;;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1850:60;;;;;;;;1929:78;1972:4;1978;1984:3;;;;;;;;;;;1989;;;;;;;;;;;1929:28;:78::i;:::-;1921:86;;1773:242;;;;:::o;427:25::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;392:28::-;;;;;;;;;;;;;:::o;3203:164::-;3251:13;3277:16;3296:6;:18;3303:10;3296:18;;;;;;;;;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3277:62;;3357:2;3350:9;;;3203:164;:::o;3375:103::-;970:5;;;;;;;;;;;956:19;;:10;:19;;;948:28;;;;;;3459:9:::1;3451:5;;:17;;;;;;;;;;;;;;;;;;3375:103:::0;:::o;1520:243::-;1575:10;1599;1633:8;1642:5;1633:15;;;;;;;;;;;;;;;;;;;;;;;;;;;1618:37;;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1597:60;;;;;;;;1676:78;1719:4;1725;1731:3;;;;;;;;;;;1736;;;;;;;;;;;1676:28;:78::i;:::-;1668:86;;1520:243;;;;:::o;367:18::-;;;;;;;;;;;;;:::o;3883:166::-;3929:7;3981:1;3957:9;:21;3967:10;3957:21;;;;;;;;;;;;;;;;:25;3949:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4020:9;:21;4030:10;4020:21;;;;;;;;;;;;;;;;4013:28;;3883:166;:::o;545:44::-;;;;;;;;;;;;;;;;;:::o;3085:110::-;3128:4;3140:10;3153:8;:15;;;;3140:28;;3182:5;3175:12;;;3085:110;:::o;2632:955:10:-;2788:19;2819:20;2842:33;2870:4;2842:27;:33::i;:::-;2819:56;;3010:17;2994:33;;:12;:33;;;2990:591;;3043:17;3087:12;3063:36;;3071:12;3063:21;;:36;3043:56;;3139:10;3127:22;;:9;:22;;;:156;;3235:48;3251:8;3261:10;3235:48;;3273:9;3235:15;:48::i;:::-;3127:156;;;3168:48;3184:9;3195:10;3168:48;;3207:8;3168:15;:48::i;:::-;3127:156;3113:170;;2990:591;;;;3314:17;3334:52;3350:12;3334:52;;3364:12;3334:52;;3378:7;3334:15;:52::i;:::-;3314:72;;3426:10;3414:22;;:9;:22;;;:156;;3522:48;3538:8;3548:10;3522:48;;3560:9;3522:15;:48::i;:::-;3414:156;;;3455:48;3471:9;3482:10;3455:48;;3494:8;3455:15;:48::i;:::-;3414:156;3400:170;;2990:591;;2632:955;;;;;;;:::o;1362:2580:9:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;;484:7;644:9;;1561:17;;1550:7;:28;;1542:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1595:13;1628:1;1621:3;1611:7;:13;:18;;:93;;1669:35;1611:93;;;1632:34;1611:93;1595:109;;;;1735:1;1728:3;1718:7;:13;:18;1714:83;;1794:3;1755:34;1747:5;:42;1746:51;;1738:59;;1714:83;1828:1;1821:3;1811:7;:13;:18;1807:83;;1887:3;1848:34;1840:5;:42;1839:51;;1831:59;;1807:83;1921:1;1914:3;1904:7;:13;:18;1900:83;;1980:3;1941:34;1933:5;:42;1932:51;;1924:59;;1900:83;2015:1;2007:4;1997:7;:14;:19;1993:84;;2074:3;2035:34;2027:5;:42;2026:51;;2018:59;;1993:84;2109:1;2101:4;2091:7;:14;:19;2087:84;;2168:3;2129:34;2121:5;:42;2120:51;;2112:59;;2087:84;2203:1;2195:4;2185:7;:14;:19;2181:84;;2262:3;2223:34;2215:5;:42;2214:51;;2206:59;;2181:84;2297:1;2289:4;2279:7;:14;:19;2275:84;;2356:3;2317:34;2309:5;:42;2308:51;;2300:59;;2275:84;2392:1;2383:5;2373:7;:15;:20;2369:85;;2451:3;2412:34;2404:5;:42;2403:51;;2395:59;;2369:85;2487:1;2478:5;2468:7;:15;:20;2464:85;;2546:3;2507:34;2499:5;:42;2498:51;;2490:59;;2464:85;2582:1;2573:5;2563:7;:15;:20;2559:85;;2641:3;2602:34;2594:5;:42;2593:51;;2585:59;;2559:85;2677:1;2668:5;2658:7;:15;:20;2654:85;;2736:3;2697:34;2689:5;:42;2688:51;;2680:59;;2654:85;2773:1;2763:6;2753:7;:16;:21;2749:86;;2832:3;2793:34;2785:5;:42;2784:51;;2776:59;;2749:86;2869:1;2859:6;2849:7;:16;:21;2845:86;;2928:3;2889:34;2881:5;:42;2880:51;;2872:59;;2845:86;2965:1;2955:6;2945:7;:16;:21;2941:86;;3024:3;2985:34;2977:5;:42;2976:51;;2968:59;;2941:86;3061:1;3051:6;3041:7;:16;:21;3037:86;;3120:3;3081:34;3073:5;:42;3072:51;;3064:59;;3037:86;3158:1;3147:7;3137;:17;:22;3133:86;;3216:3;3178:33;3170:5;:41;3169:50;;3161:58;;3133:86;3254:1;3243:7;3233;:17;:22;3229:85;;3311:3;3274:32;3266:5;:40;3265:49;;3257:57;;3229:85;3349:1;3338:7;3328;:17;:22;3324:83;;3404:3;3369:30;3361:5;:38;3360:47;;3352:55;;3324:83;3442:1;3431:7;3421;:17;:22;3417:78;;3492:3;3462:25;3454:5;:33;3453:42;;3445:50;;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;3528:17;:25;;;;;;3520:33;;3506:47;3924:1;3912:7;3903:5;:17;;;;;;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;762:3776:8:-;874:14;1203:13;1271;1388:1;1384:6;1381:1;1378;1371:20;1420:1;1417;1413:9;1404:18;;1471:5;1467:2;1464:13;1456:5;1452:2;1448:14;1444:34;1435:43;;1347:141;1569:1;1560:5;:10;1556:179;;;1608:1;1594:11;:15;1586:24;;;;;;1672:11;1665:5;1661:23;1651:33;;1711:13;;;;1556:179;1862:5;1848:11;:19;1840:28;;;;;;2145:17;2221:11;2218:1;2215;2208:25;2195:38;;2364:5;2353:9;2350:20;2343:5;2339:32;2330:41;;2404:9;2397:5;2393:21;2384:30;;2573:12;2603:11;2589;2588:12;;:26;2573:41;;2725:4;2712:11;2708:22;2693:37;;2847:4;2840:5;2836:16;2827:25;;3101:1;3094:4;3087;3084:1;3080:12;3076:23;3072:31;3064:39;;3139:4;3131:5;:12;3122:21;;;;3477:11;3511:1;3496:11;3492:1;:15;3491:21;3477:35;;3752:3;3738:11;:17;3734:1;:21;3727:28;;;;3810:3;3796:11;:17;3792:1;:21;3785:28;;;;3869:3;3855:11;:17;3851:1;:21;3844:28;;;;3928:3;3914:11;:17;3910:1;:21;3903:28;;;;3987:3;3973:11;:17;3969:1;:21;3962:28;;;;4047:3;4033:11;:17;4029:1;:21;4022:28;;;;4505:3;4497:5;:11;4488:20;;4518:13;;;;;762:3776;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1659400",
								"executionCost": "84357",
								"totalCost": "1743757"
							},
							"external": {
								"addPoolUSD(address,uint24)": "infinite",
								"bnb()": "1114",
								"bnbToUsd(uint8)": "infinite",
								"changeOwner(address)": "21993",
								"claimTax()": "infinite",
								"eqMode(address)": "1268",
								"getEqMode()": "1168",
								"getEqModeString()": "infinite",
								"lastPrice(address)": "1279",
								"lastPriceStatic()": "1094",
								"owner()": "1136",
								"poolsLenght()": "1166",
								"poolsUSD(uint256)": "2078",
								"removePoolUSD(uint8)": "67233",
								"setBnbAddress(address)": "21994",
								"setEqMode()": "22161",
								"setTax(uint256)": "21202",
								"setUsdAddress(address)": "22082",
								"usd()": "1113",
								"usdToBnb(uint8)": "infinite",
								"viewAverage()": "2102",
								"viewAverageStatic()": "1882"
							},
							"internal": {
								"_average(bool)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 284,
									"end": 4296,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 911,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 911,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 911,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 698,
									"end": 911,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 738,
									"end": 748,
									"name": "CALLER",
									"source": 11
								},
								{
									"begin": 722,
									"end": 727,
									"name": "PUSH",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 722,
									"end": 727,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 722,
									"end": 749,
									"name": "PUSH",
									"source": 11,
									"value": "100"
								},
								{
									"begin": 722,
									"end": 749,
									"name": "EXP",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 722,
									"end": 749,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 722,
									"end": 749,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 722,
									"end": 749,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 766,
									"end": 808,
									"name": "PUSH",
									"source": 11,
									"value": "BB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C"
								},
								{
									"begin": 760,
									"end": 763,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 760,
									"end": 763,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 808,
									"name": "PUSH",
									"source": 11,
									"value": "100"
								},
								{
									"begin": 760,
									"end": 808,
									"name": "EXP",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 760,
									"end": 808,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 760,
									"end": 808,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 760,
									"end": 808,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 825,
									"end": 867,
									"name": "PUSH",
									"source": 11,
									"value": "55D398326F99059FF775485246999027B3197955"
								},
								{
									"begin": 819,
									"end": 822,
									"name": "PUSH",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 819,
									"end": 822,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 819,
									"end": 867,
									"name": "PUSH",
									"source": 11,
									"value": "100"
								},
								{
									"begin": 819,
									"end": 867,
									"name": "EXP",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 819,
									"end": 867,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 819,
									"end": 867,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 819,
									"end": 867,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 884,
									"end": 885,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 878,
									"end": 881,
									"name": "PUSH",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 878,
									"end": 885,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 878,
									"end": 885,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 878,
									"end": 885,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 878,
									"end": 885,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 284,
									"end": 4296,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202a74913e8bb9c0df56838a359fc279825fbfdaeb6b855599d5bb1db4d9db629064736f6c63430007060033",
									".code": [
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "67B51834"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "A6F9DAE1"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "A6F9DAE1"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "C0404FA7"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "D63A6CCD"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "E03D1632"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "F5A6BA2E"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "F74B28C1"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "tag",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "67B51834"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "6C7474DA"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "6D201E8B"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "8DA5CB5B"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "A1C6A405"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "tag",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "3B907D14"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "3B907D14"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "448883D7"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "49A876E4"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "4D899B32"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "5E59C8CE"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "65A6CC2E"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "tag",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "26F0DBE"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "9CF28DA"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "14B085A4"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "2E5BB6FF"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "32A6013C"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3720,
											"end": 3723,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 3720,
											"end": 3723,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3707,
											"end": 3716,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3707,
											"end": 3723,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3707,
											"end": 3723,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "56616C7565204C6F770000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "tag",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 3699,
											"end": 3738,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3749,
											"end": 3762,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 3774,
											"end": 3780,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3781,
											"end": 3791,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3774,
											"end": 3792,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3765,
											"end": 3773,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3749,
											"end": 3793,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3749,
											"end": 3793,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3828,
											"end": 3833,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3813,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3814,
											"end": 3824,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3804,
											"end": 3825,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3833,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3833,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3833,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3833,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3862,
											"end": 3867,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3844,
											"end": 3859,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3844,
											"end": 3867,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3844,
											"end": 3867,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3844,
											"end": 3867,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 3844,
											"end": 3867,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3661,
											"end": 3875,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 284,
											"end": 4296,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "tag",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "tag",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "tag",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "tag",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "tag",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "tag",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "tag",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "tag",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "tag",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "tag",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "48"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "tag",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "tag",
											"source": 11,
											"value": "48"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "tag",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "52"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "tag",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "tag",
											"source": 11,
											"value": "52"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "tag",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "tag",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "56"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "tag",
											"source": 11,
											"value": "56"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "tag",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "tag",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "tag",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "tag",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "tag",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "63"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "tag",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "tag",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "66"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "tag",
											"source": 11,
											"value": "66"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "tag",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "tag",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "68"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "tag",
											"source": 11,
											"value": "68"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "tag",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "tag",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "71"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "tag",
											"source": 11,
											"value": "71"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "tag",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFF"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "tag",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "tag",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "tag",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "tag",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "tag",
											"source": 11,
											"value": "76"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 11,
											"value": "79"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "tag",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "tag",
											"source": 11,
											"value": "83"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "tag",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "tag",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "tag",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "tag",
											"source": 11,
											"value": "89"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "89"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "tag",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "92"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "tag",
											"source": 11,
											"value": "92"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "93"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "tag",
											"source": 11,
											"value": "93"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "tag",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "tag",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "tag",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "tag",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "tag",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "tag",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "tag",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "tag",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "106"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "tag",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "tag",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "tag",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "tag",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "tag",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "tag",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2086,
											"end": 2101,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2114,
											"end": 2128,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2139,
											"end": 2155,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2173,
											"end": 2180,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2183,
											"end": 2184,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2173,
											"end": 2184,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2173,
											"end": 2184,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "tag",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2190,
											"end": 2198,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2190,
											"end": 2205,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2190,
											"end": 2205,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2190,
											"end": 2205,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2190,
											"end": 2205,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2186,
											"end": 2187,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2186,
											"end": 2205,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2186,
											"end": 2205,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2186,
											"end": 2205,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2230,
											"end": 2240,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2264,
											"end": 2272,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2273,
											"end": 2274,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "tag",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2264,
											"end": 2275,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2282,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2249,
											"end": 2282,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2282,
											"name": "PUSH",
											"source": 11,
											"value": "3850C7BD"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "EXTCODESIZE",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "tag",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "122"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "tag",
											"source": 11,
											"value": "122"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "tag",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2249,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2227,
											"end": 2284,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2299,
											"end": 2312,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2315,
											"end": 2476,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 2362,
											"end": 2366,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2385,
											"end": 2389,
											"name": "PUSH",
											"source": 11,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 2408,
											"end": 2413,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2422,
											"end": 2425,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "tag",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2416,
											"end": 2419,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "tag",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2444,
											"end": 2449,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2458,
											"end": 2461,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "tag",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2452,
											"end": 2455,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "tag",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 2444,
											"end": 2461,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2315,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "129"
										},
										{
											"begin": 2315,
											"end": 2476,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2315,
											"end": 2476,
											"name": "tag",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 2315,
											"end": 2476,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2299,
											"end": 2476,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2299,
											"end": 2476,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2505,
											"end": 2506,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2497,
											"end": 2502,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2497,
											"end": 2506,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2493,
											"end": 2589,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2493,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 2493,
											"end": 2589,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2537,
											"end": 2542,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2527,
											"end": 2542,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2527,
											"end": 2542,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2527,
											"end": 2542,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 2527,
											"end": 2542,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2561,
											"end": 2573,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2561,
											"end": 2573,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2561,
											"end": 2573,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 2561,
											"end": 2573,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2561,
											"end": 2573,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 2561,
											"end": 2573,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2561,
											"end": 2573,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2493,
											"end": 2589,
											"name": "tag",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 2493,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2207,
											"end": 2210,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2207,
											"end": 2210,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2207,
											"end": 2210,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 2207,
											"end": 2210,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2207,
											"end": 2210,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2207,
											"end": 2210,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2207,
											"end": 2210,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "tag",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2168,
											"end": 2600,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2633,
											"end": 2634,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2620,
											"end": 2630,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2620,
											"end": 2634,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2620,
											"end": 2634,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2620,
											"end": 2634,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "E"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "4E6F20707269636520666F756E64000000000000000000000000000000000000"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "tag",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 2612,
											"end": 2653,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2683,
											"end": 2693,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2680,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "tag",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2693,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2664,
											"end": 2693,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2664,
											"end": 2693,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2701,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "tag",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3028,
											"end": 3032,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3057,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3058,
											"end": 3068,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3051,
											"end": 3069,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3044,
											"end": 3069,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3044,
											"end": 3069,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2986,
											"end": 3077,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "tag",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4108,
											"end": 4112,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4150,
											"end": 4151,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4132,
											"end": 4147,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4132,
											"end": 4147,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4132,
											"end": 4151,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "F"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "4E6F2073746F7265642070726963650000000000000000000000000000000000"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "tag",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 4124,
											"end": 4171,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4189,
											"end": 4204,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4189,
											"end": 4204,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4182,
											"end": 4204,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4182,
											"end": 4204,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "tag",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 459,
											"end": 499,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 459,
											"end": 499,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "tag",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "137"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "tag",
											"source": 11,
											"value": "137"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4281,
											"end": 4285,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4275,
											"end": 4278,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 4275,
											"end": 4285,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4275,
											"end": 4285,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4275,
											"end": 4285,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4275,
											"end": 4285,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4220,
											"end": 4293,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "tag",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "tag",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1458,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1477,
											"end": 1478,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1459,
											"end": 1467,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1459,
											"end": 1474,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1459,
											"end": 1474,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1459,
											"end": 1474,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1459,
											"end": 1474,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1459,
											"end": 1478,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1450,
											"end": 1479,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1440,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1441,
											"end": 1446,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "tag",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1447,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1498,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "tag",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1490,
											"end": 1504,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1367,
											"end": 1512,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "tag",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "149"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "tag",
											"source": 11,
											"value": "149"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2779,
											"end": 2783,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2776,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 2773,
											"end": 2776,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2709,
											"end": 2791,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "tag",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "tag",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3572,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3546,
											"end": 3567,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 3546,
											"end": 3572,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3546,
											"end": 3572,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "4E6F7420656E6F7567682062616C616E63650000000000000000000000000000"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 3538,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3606,
											"end": 3611,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3620,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3606,
											"end": 3620,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"source": 11,
											"value": "8FC"
										},
										{
											"begin": 3621,
											"end": 3642,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "156"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "tag",
											"source": 11,
											"value": "156"
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3643,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3488,
											"end": 3651,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "tag",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 342,
											"end": 360,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 342,
											"end": 360,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "tag",
											"source": 11,
											"value": "63"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 308,
											"end": 335,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 308,
											"end": 335,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "tag",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "tag",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2869,
											"end": 2873,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2866,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 2863,
											"end": 2866,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2863,
											"end": 2873,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2799,
											"end": 2881,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "tag",
											"source": 11,
											"value": "70"
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2956,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 2967,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2950,
											"end": 2968,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2949,
											"end": 2968,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2934,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2935,
											"end": 2945,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2928,
											"end": 2968,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2889,
											"end": 2976,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "tag",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "tag",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1148,
											"end": 1160,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1181,
											"end": 1189,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1198,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1163,
											"end": 1198,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1198,
											"name": "PUSH",
											"source": 11,
											"value": "1698EE82"
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1213,
											"end": 1216,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1231,
											"end": 1234,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1249,
											"end": 1253,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFF"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "EXTCODESIZE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "tag",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "tag",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "tag",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1163,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1148,
											"end": 1264,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1148,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1299,
											"end": 1300,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1283,
											"end": 1301,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1283,
											"end": 1301,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1283,
											"end": 1287,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1283,
											"end": 1301,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1283,
											"end": 1301,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1283,
											"end": 1301,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1283,
											"end": 1301,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "E"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "506F6F6C204E6F7420466F756E64000000000000000000000000000000000000"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "tag",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 1275,
											"end": 1321,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1340,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1346,
											"end": 1350,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1351,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 987,
											"end": 988,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1067,
											"end": 1359,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "tag",
											"source": 11,
											"value": "78"
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1828,
											"end": 1838,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1852,
											"end": 1862,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1894,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1895,
											"end": 1900,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "tag",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1908,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1871,
											"end": 1908,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1908,
											"name": "PUSH",
											"source": 11,
											"value": "3850C7BD"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "EXTCODESIZE",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "tag",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "tag",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "tag",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1871,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1850,
											"end": 1910,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1929,
											"end": 2007,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 1972,
											"end": 1976,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1978,
											"end": 1982,
											"name": "PUSH",
											"source": 11,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1989,
											"end": 1992,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1929,
											"end": 1957,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "129"
										},
										{
											"begin": 1929,
											"end": 2007,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1929,
											"end": 2007,
											"name": "tag",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 1929,
											"end": 2007,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1921,
											"end": 2007,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1921,
											"end": 2007,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1773,
											"end": 2015,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "178"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "tag",
											"source": 11,
											"value": "178"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 427,
											"end": 452,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 427,
											"end": 452,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "tag",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 392,
											"end": 420,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 392,
											"end": 420,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3251,
											"end": 3264,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3277,
											"end": 3293,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3296,
											"end": 3302,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3303,
											"end": 3313,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "181"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "424E425553445400000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "182"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "tag",
											"source": 11,
											"value": "181"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "PUSH",
											"source": 11,
											"value": "55534454424E4200000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "tag",
											"source": 11,
											"value": "182"
										},
										{
											"begin": 3296,
											"end": 3339,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3277,
											"end": 3339,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3277,
											"end": 3339,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3357,
											"end": 3359,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3350,
											"end": 3359,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3350,
											"end": 3359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3350,
											"end": 3359,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3203,
											"end": 3367,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "tag",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 970,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 970,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 956,
											"end": 975,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 956,
											"end": 975,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 948,
											"end": 976,
											"name": "tag",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3459,
											"end": 3468,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3456,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 3451,
											"end": 3456,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 3451,
											"end": 3468,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3375,
											"end": 3478,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "tag",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1575,
											"end": 1585,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1599,
											"end": 1609,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1641,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1642,
											"end": 1647,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "INVALID",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "tag",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1633,
											"end": 1648,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1655,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1618,
											"end": 1655,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1655,
											"name": "PUSH",
											"source": 11,
											"value": "3850C7BD"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "EXTCODESIZE",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "tag",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "tag",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "tag",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1618,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1676,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 1719,
											"end": 1723,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1725,
											"end": 1729,
											"name": "PUSH",
											"source": 11,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1731,
											"end": 1734,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1676,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "129"
										},
										{
											"begin": 1676,
											"end": 1754,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1676,
											"end": 1754,
											"name": "tag",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 1676,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1668,
											"end": 1754,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1668,
											"end": 1754,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1520,
											"end": 1763,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "tag",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 367,
											"end": 385,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 367,
											"end": 385,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "tag",
											"source": 11,
											"value": "106"
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3929,
											"end": 3936,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3981,
											"end": 3982,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3966,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3967,
											"end": 3977,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3978,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3957,
											"end": 3982,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "F"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "4E6F2073746F7265642070726963650000000000000000000000000000000000"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 3949,
											"end": 4002,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4029,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4030,
											"end": 4040,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4041,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4013,
											"end": 4041,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4013,
											"end": 4041,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3883,
											"end": 4049,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "tag",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 545,
											"end": 589,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "tag",
											"source": 11,
											"value": "113"
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3128,
											"end": 3132,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3140,
											"end": 3150,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3153,
											"end": 3161,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3153,
											"end": 3168,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3153,
											"end": 3168,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3153,
											"end": 3168,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3153,
											"end": 3168,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3168,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3168,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3182,
											"end": 3187,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3175,
											"end": 3187,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3175,
											"end": 3187,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3175,
											"end": 3187,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3085,
											"end": 3195,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2788,
											"end": 2807,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2819,
											"end": 2839,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2842,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 2870,
											"end": 2874,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2842,
											"end": 2869,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 2842,
											"end": 2875,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2842,
											"end": 2875,
											"name": "tag",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 2842,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2819,
											"end": 2875,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2819,
											"end": 2875,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3010,
											"end": 3027,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2994,
											"end": 3027,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2994,
											"end": 3027,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2994,
											"end": 3006,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2994,
											"end": 3027,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2994,
											"end": 3027,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2994,
											"end": 3027,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3043,
											"end": 3060,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3087,
											"end": 3099,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3099,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3063,
											"end": 3099,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3071,
											"end": 3083,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3084,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3063,
											"end": 3084,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3099,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 3043,
											"end": 3099,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3043,
											"end": 3099,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3139,
											"end": 3149,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3149,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3127,
											"end": 3149,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3136,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3149,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3127,
											"end": 3149,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3149,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 3251,
											"end": 3259,
											"name": "PUSH",
											"source": 10,
											"value": "1000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3261,
											"end": 3271,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3273,
											"end": 3282,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3235,
											"end": 3250,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "tag",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 3235,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3216,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 3184,
											"end": 3193,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3195,
											"end": 3205,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3168,
											"end": 3216,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3168,
											"end": 3216,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3207,
											"end": 3215,
											"name": "PUSH",
											"source": 10,
											"value": "1000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3168,
											"end": 3183,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 3168,
											"end": 3216,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3168,
											"end": 3216,
											"name": "tag",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 3168,
											"end": 3216,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "tag",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 3127,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3113,
											"end": 3283,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3113,
											"end": 3283,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "tag",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3314,
											"end": 3331,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 3350,
											"end": 3362,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3364,
											"end": 3376,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "PUSH",
											"source": 10,
											"value": "10000000000000000"
										},
										{
											"begin": 3334,
											"end": 3349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "tag",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 3334,
											"end": 3386,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3314,
											"end": 3386,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3314,
											"end": 3386,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3426,
											"end": 3436,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3436,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3414,
											"end": 3436,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3423,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3436,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3414,
											"end": 3436,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3436,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3522,
											"end": 3570,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 3538,
											"end": 3546,
											"name": "PUSH",
											"source": 10,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 3548,
											"end": 3558,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3522,
											"end": 3570,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3522,
											"end": 3570,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3560,
											"end": 3569,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3522,
											"end": 3537,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 3522,
											"end": 3570,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3522,
											"end": 3570,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 3522,
											"end": 3570,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "tag",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3455,
											"end": 3503,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 3471,
											"end": 3480,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3482,
											"end": 3492,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3455,
											"end": 3503,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3455,
											"end": 3503,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3494,
											"end": 3502,
											"name": "PUSH",
											"source": 10,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 3455,
											"end": 3470,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 3455,
											"end": 3503,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3455,
											"end": 3503,
											"name": "tag",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 3455,
											"end": 3503,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "tag",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 3414,
											"end": 3570,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3400,
											"end": 3570,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3400,
											"end": 3570,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "tag",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 2990,
											"end": 3581,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2632,
											"end": 3587,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "tag",
											"source": 9,
											"value": "199"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1445,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1457,
											"end": 1472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1482,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1479,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "213"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1526,
											"end": 1530,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "213"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1502,
											"end": 1506,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 484,
											"end": 491,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1557,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "5400000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "tag",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1608,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1628,
											"end": 1629,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1621,
											"end": 1624,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 1618,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1624,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1669,
											"end": 1704,
											"name": "PUSH",
											"source": 9,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1632,
											"end": 1666,
											"name": "PUSH",
											"source": 9,
											"value": "FFFCB933BD6FAD37AA2D162D1A594001"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1735,
											"end": 1736,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1728,
											"end": 1731,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1718,
											"end": 1725,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1718,
											"end": 1731,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1718,
											"end": 1736,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1797,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1755,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "FFF97272373D413259A46990580E213A"
										},
										{
											"begin": 1747,
											"end": 1752,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1747,
											"end": 1789,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "tag",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1821,
											"end": 1824,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1811,
											"end": 1818,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1811,
											"end": 1824,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1811,
											"end": 1829,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1848,
											"end": 1882,
											"name": "PUSH",
											"source": 9,
											"value": "FFF2E50F5F656932EF12357CF3C7FDCC"
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1840,
											"end": 1882,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "tag",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1921,
											"end": 1922,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1914,
											"end": 1917,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 1904,
											"end": 1911,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1904,
											"end": 1917,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1904,
											"end": 1922,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "220"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 1983,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1941,
											"end": 1975,
											"name": "PUSH",
											"source": 9,
											"value": "FFE5CACA7E10E4E61C3624EAA0941CD0"
										},
										{
											"begin": 1933,
											"end": 1938,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1933,
											"end": 1975,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "tag",
											"source": 9,
											"value": "220"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2015,
											"end": 2016,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2007,
											"end": 2011,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 1997,
											"end": 2004,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1997,
											"end": 2011,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1997,
											"end": 2016,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "221"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2074,
											"end": 2077,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2035,
											"end": 2069,
											"name": "PUSH",
											"source": 9,
											"value": "FFCB9843D60F6159C9DB58835C926644"
										},
										{
											"begin": 2027,
											"end": 2032,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2027,
											"end": 2069,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "tag",
											"source": 9,
											"value": "221"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2110,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2101,
											"end": 2105,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2105,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2110,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2168,
											"end": 2171,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2129,
											"end": 2163,
											"name": "PUSH",
											"source": 9,
											"value": "FF973B41FA98C081472E6896DFB254C0"
										},
										{
											"begin": 2121,
											"end": 2126,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "tag",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2204,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2199,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2185,
											"end": 2192,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2185,
											"end": 2199,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2185,
											"end": 2204,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2262,
											"end": 2265,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2223,
											"end": 2257,
											"name": "PUSH",
											"source": 9,
											"value": "FF2EA16466C96A3843EC78B326B52861"
										},
										{
											"begin": 2215,
											"end": 2220,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2215,
											"end": 2257,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "tag",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2298,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2289,
											"end": 2293,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2279,
											"end": 2286,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2279,
											"end": 2293,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2279,
											"end": 2298,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2359,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2317,
											"end": 2351,
											"name": "PUSH",
											"source": 9,
											"value": "FE5DEE046A99A2A811C461F1969C3053"
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2309,
											"end": 2351,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "tag",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2392,
											"end": 2393,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2373,
											"end": 2380,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2373,
											"end": 2388,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2373,
											"end": 2393,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2451,
											"end": 2454,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2412,
											"end": 2446,
											"name": "PUSH",
											"source": 9,
											"value": "FCBE86C7900A88AEDCFFC83B479AA3A4"
										},
										{
											"begin": 2404,
											"end": 2409,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2404,
											"end": 2446,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "tag",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2487,
											"end": 2488,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2483,
											"name": "PUSH",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2483,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2488,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2546,
											"end": 2549,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2507,
											"end": 2541,
											"name": "PUSH",
											"source": 9,
											"value": "F987A7253AC413176F2B074CF7815E54"
										},
										{
											"begin": 2499,
											"end": 2504,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2541,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "tag",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2583,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2573,
											"end": 2578,
											"name": "PUSH",
											"source": 9,
											"value": "400"
										},
										{
											"begin": 2563,
											"end": 2570,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2563,
											"end": 2583,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2641,
											"end": 2644,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "PUSH",
											"source": 9,
											"value": "F3392B0822B70005940C7A398E4B70F3"
										},
										{
											"begin": 2594,
											"end": 2599,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2594,
											"end": 2636,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "tag",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2677,
											"end": 2678,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2668,
											"end": 2673,
											"name": "PUSH",
											"source": 9,
											"value": "800"
										},
										{
											"begin": 2658,
											"end": 2665,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2673,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2678,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2736,
											"end": 2739,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2697,
											"end": 2731,
											"name": "PUSH",
											"source": 9,
											"value": "E7159475A2C29B7443B29C7FA6E889D9"
										},
										{
											"begin": 2689,
											"end": 2694,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2731,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "tag",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2773,
											"end": 2774,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2763,
											"end": 2769,
											"name": "PUSH",
											"source": 9,
											"value": "1000"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2753,
											"end": 2769,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2753,
											"end": 2774,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2832,
											"end": 2835,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2793,
											"end": 2827,
											"name": "PUSH",
											"source": 9,
											"value": "D097F3BDFD2022B8845AD8F792AA5825"
										},
										{
											"begin": 2785,
											"end": 2790,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2785,
											"end": 2827,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2869,
											"end": 2870,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2859,
											"end": 2865,
											"name": "PUSH",
											"source": 9,
											"value": "2000"
										},
										{
											"begin": 2849,
											"end": 2856,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2849,
											"end": 2865,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2849,
											"end": 2870,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2928,
											"end": 2931,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2889,
											"end": 2923,
											"name": "PUSH",
											"source": 9,
											"value": "A9F746462D870FDF8A65DC1F90E061E5"
										},
										{
											"begin": 2881,
											"end": 2886,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2881,
											"end": 2923,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2965,
											"end": 2966,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2955,
											"end": 2961,
											"name": "PUSH",
											"source": 9,
											"value": "4000"
										},
										{
											"begin": 2945,
											"end": 2952,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2961,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2966,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3024,
											"end": 3027,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2985,
											"end": 3019,
											"name": "PUSH",
											"source": 9,
											"value": "70D869A156D2A1B890BB3DF62BAF32F7"
										},
										{
											"begin": 2977,
											"end": 2982,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2977,
											"end": 3019,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3061,
											"end": 3062,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3057,
											"name": "PUSH",
											"source": 9,
											"value": "8000"
										},
										{
											"begin": 3041,
											"end": 3048,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3057,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3062,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3120,
											"end": 3123,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3081,
											"end": 3115,
											"name": "PUSH",
											"source": 9,
											"value": "31BE135F97D08FD981231505542FCFA6"
										},
										{
											"begin": 3073,
											"end": 3078,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3073,
											"end": 3115,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "tag",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3158,
											"end": 3159,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3147,
											"end": 3154,
											"name": "PUSH",
											"source": 9,
											"value": "10000"
										},
										{
											"begin": 3137,
											"end": 3144,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3137,
											"end": 3154,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3137,
											"end": 3159,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3216,
											"end": 3219,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3178,
											"end": 3211,
											"name": "PUSH",
											"source": 9,
											"value": "9AA508B5B7A84E1C677DE54F3E99BC9"
										},
										{
											"begin": 3170,
											"end": 3175,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3170,
											"end": 3211,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "tag",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 3255,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3243,
											"end": 3250,
											"name": "PUSH",
											"source": 9,
											"value": "20000"
										},
										{
											"begin": 3233,
											"end": 3240,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3233,
											"end": 3250,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3233,
											"end": 3255,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3311,
											"end": 3314,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3274,
											"end": 3306,
											"name": "PUSH",
											"source": 9,
											"value": "5D6AF8DEDB81196699C329225EE604"
										},
										{
											"begin": 3266,
											"end": 3271,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3266,
											"end": 3306,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "tag",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3349,
											"end": 3350,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3338,
											"end": 3345,
											"name": "PUSH",
											"source": 9,
											"value": "40000"
										},
										{
											"begin": 3328,
											"end": 3335,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3328,
											"end": 3345,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3328,
											"end": 3350,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3404,
											"end": 3407,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3369,
											"end": 3399,
											"name": "PUSH",
											"source": 9,
											"value": "2216E584F5FA1EA926041BEDFE98"
										},
										{
											"begin": 3361,
											"end": 3366,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3361,
											"end": 3399,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "tag",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3442,
											"end": 3443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3431,
											"end": 3438,
											"name": "PUSH",
											"source": 9,
											"value": "80000"
										},
										{
											"begin": 3421,
											"end": 3428,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3438,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3492,
											"end": 3495,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3462,
											"end": 3487,
											"name": "PUSH",
											"source": 9,
											"value": "48A170391F7DC42444E8FA2"
										},
										{
											"begin": 3454,
											"end": 3459,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3454,
											"end": 3487,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "tag",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3517,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3510,
											"end": 3514,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SGT",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3548,
											"end": 3553,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3545,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "INVALID",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "tag",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "tag",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 3925,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3912,
											"end": 3919,
											"name": "PUSH",
											"source": 9,
											"value": "100000000"
										},
										{
											"begin": 3903,
											"end": 3908,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "INVALID",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "tag",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "MOD",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3925,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3933,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3928,
											"end": 3929,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3896,
											"end": 3898,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3887,
											"end": 3892,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "tag",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 874,
											"end": 888,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1203,
											"end": 1216,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1271,
											"end": 1284,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1388,
											"end": 1389,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1390,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1381,
											"end": 1382,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1378,
											"end": 1379,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1371,
											"end": 1391,
											"name": "MULMOD",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1421,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1417,
											"end": 1418,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1413,
											"end": 1422,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1404,
											"end": 1422,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1404,
											"end": 1422,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1471,
											"end": 1476,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1467,
											"end": 1469,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1464,
											"end": 1477,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1456,
											"end": 1461,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1452,
											"end": 1454,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1448,
											"end": 1462,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1444,
											"end": 1478,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1435,
											"end": 1478,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1347,
											"end": 1488,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1569,
											"end": 1570,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1560,
											"end": 1565,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1560,
											"end": 1570,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1556,
											"end": 1735,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1556,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 1556,
											"end": 1735,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1608,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1594,
											"end": 1605,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1594,
											"end": 1609,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1586,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 1586,
											"end": 1610,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1586,
											"end": 1610,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1610,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1586,
											"end": 1610,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1586,
											"end": 1610,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 1586,
											"end": 1610,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1672,
											"end": 1683,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1665,
											"end": 1670,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1661,
											"end": 1684,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1651,
											"end": 1684,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1651,
											"end": 1684,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1711,
											"end": 1724,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1711,
											"end": 1724,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1711,
											"end": 1724,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 1711,
											"end": 1724,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1556,
											"end": 1735,
											"name": "tag",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 1556,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1862,
											"end": 1867,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1848,
											"end": 1859,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1848,
											"end": 1867,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1840,
											"end": 1868,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 1840,
											"end": 1868,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1840,
											"end": 1868,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1840,
											"end": 1868,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1840,
											"end": 1868,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1840,
											"end": 1868,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 1840,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2145,
											"end": 2162,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2221,
											"end": 2232,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2218,
											"end": 2219,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2215,
											"end": 2216,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 2208,
											"end": 2233,
											"name": "MULMOD",
											"source": 8
										},
										{
											"begin": 2195,
											"end": 2233,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2195,
											"end": 2233,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2364,
											"end": 2369,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2353,
											"end": 2362,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2350,
											"end": 2370,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2343,
											"end": 2348,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2339,
											"end": 2371,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2330,
											"end": 2371,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2330,
											"end": 2371,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2404,
											"end": 2413,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2397,
											"end": 2402,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2393,
											"end": 2414,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2384,
											"end": 2414,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2384,
											"end": 2414,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2573,
											"end": 2585,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2603,
											"end": 2614,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2589,
											"end": 2600,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2588,
											"end": 2600,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2588,
											"end": 2600,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2588,
											"end": 2614,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2573,
											"end": 2614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2573,
											"end": 2614,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 2729,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2712,
											"end": 2723,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2708,
											"end": 2730,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2693,
											"end": 2730,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2693,
											"end": 2730,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2847,
											"end": 2851,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2840,
											"end": 2845,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2836,
											"end": 2852,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2827,
											"end": 2852,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2827,
											"end": 2852,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3101,
											"end": 3102,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3094,
											"end": 3098,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3087,
											"end": 3091,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3084,
											"end": 3085,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3080,
											"end": 3092,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3076,
											"end": 3099,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 3072,
											"end": 3103,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3064,
											"end": 3103,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3064,
											"end": 3103,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3139,
											"end": 3143,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 3136,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 3143,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3143,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3143,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3143,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3143,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3477,
											"end": 3488,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3511,
											"end": 3512,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3496,
											"end": 3507,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3492,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3492,
											"end": 3507,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3491,
											"end": 3512,
											"name": "XOR",
											"source": 8
										},
										{
											"begin": 3477,
											"end": 3512,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3477,
											"end": 3512,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3752,
											"end": 3755,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3738,
											"end": 3749,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3738,
											"end": 3755,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3734,
											"end": 3735,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3734,
											"end": 3755,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3727,
											"end": 3755,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3727,
											"end": 3755,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3727,
											"end": 3755,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3727,
											"end": 3755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3810,
											"end": 3813,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3796,
											"end": 3807,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3796,
											"end": 3813,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3792,
											"end": 3793,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3792,
											"end": 3813,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3785,
											"end": 3813,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3785,
											"end": 3813,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3785,
											"end": 3813,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3785,
											"end": 3813,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3869,
											"end": 3872,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3855,
											"end": 3866,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3855,
											"end": 3872,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3851,
											"end": 3852,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3851,
											"end": 3872,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3844,
											"end": 3872,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3844,
											"end": 3872,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3844,
											"end": 3872,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3844,
											"end": 3872,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3928,
											"end": 3931,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3914,
											"end": 3925,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3914,
											"end": 3931,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3910,
											"end": 3911,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3910,
											"end": 3931,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3903,
											"end": 3931,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3903,
											"end": 3931,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3903,
											"end": 3931,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3903,
											"end": 3931,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 3990,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3973,
											"end": 3984,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3969,
											"end": 3970,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3969,
											"end": 3990,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3962,
											"end": 3990,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3962,
											"end": 3990,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3962,
											"end": 3990,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3962,
											"end": 3990,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4047,
											"end": 4050,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4033,
											"end": 4044,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4033,
											"end": 4050,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4029,
											"end": 4030,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4029,
											"end": 4050,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4022,
											"end": 4050,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4022,
											"end": 4050,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4022,
											"end": 4050,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4022,
											"end": 4050,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4508,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4497,
											"end": 4502,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4497,
											"end": 4508,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4488,
											"end": 4508,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 4488,
											"end": 4508,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4518,
											"end": 4531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4518,
											"end": 4531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4518,
											"end": 4531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4518,
											"end": 4531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4518,
											"end": 4531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "tag",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 4538,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"addPoolUSD(address,uint24)": "67b51834",
							"bnb()": "49a876e4",
							"bnbToUsd(uint8)": "6c7474da",
							"changeOwner(address)": "a6f9dae1",
							"claimTax()": "448883d7",
							"eqMode(address)": "14b085a4",
							"getEqMode()": "026f0dbe",
							"getEqModeString()": "a1c6a405",
							"lastPrice(address)": "f5a6ba2e",
							"lastPriceStatic()": "4d899b32",
							"owner()": "8da5cb5b",
							"poolsLenght()": "f74b28c1",
							"poolsUSD(uint256)": "6d201e8b",
							"removePoolUSD(uint8)": "32a6013c",
							"setBnbAddress(address)": "3b907d14",
							"setEqMode()": "65a6cc2e",
							"setTax(uint256)": "2e5bb6ff",
							"setUsdAddress(address)": "5e59c8ce",
							"usd()": "d63a6ccd",
							"usdToBnb(uint8)": "c0404fa7",
							"viewAverage()": "e03d1632",
							"viewAverageStatic()": "09cf28da"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickPrice\",\"type\":\"uint256\"}],\"name\":\"callAverage\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"addPoolUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"bnbToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eqMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEqMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEqModeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPriceStatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"removePoolUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bnb\",\"type\":\"address\"}],\"name\":\"setBnbAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEqMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"}],\"name\":\"setUsdAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"usdToBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAverageStatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BNBPrice.sol\":\"BNBPrice\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol\":{\"keccak256\":\"0x90c41c199dbf1cb239937bd562d764e7fa13c9749fad324a162b0d0545012fb7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://558aeed10a456cef5ef0842aeac6f9328a5a0ebf14c7e0b350453bfc3070481c\",\"dweb:/ipfs/QmYKBfzf99ikop2dbqLVEn38FY9PZt5bjL1uLkRtu8VAFT\"]},\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\":{\"keccak256\":\"0x4f22208838b7b85d2d48e9a92a0cee1e5bf5f12fe0f2f5cc521ab1adabb68fbb\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f39833bc732ff76e8abe44206981f115116e3c0f4f867099d1c1a3621febefea\",\"dweb:/ipfs/QmcSb8EyNu6y6sueWZmc6uYbPrWz3Z38RuLipeWB2E5JRc\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol\":{\"keccak256\":\"0x78ed1c130111169f443c55618ff2d290ce0630b1d016cdeda3a66e12816041f6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://230ba84dfb2cbaadffe4554d9b74ddc7e6b696e51e5e9f327be469a47c332137\",\"dweb:/ipfs/Qmapm23aouHCAMVxLG6eRfUY134QZzDvsAnXqX3UnpdA2o\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol\":{\"keccak256\":\"0x45a9f30f562b5d0d55b311149c32df5cbcf0c7cfcb72aff2637a29794b06d4b6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a6a90b9532960842ebee061f6acefc680ae06bfd73e7c3536dd67f566137ded8\",\"dweb:/ipfs/QmPDfMp1k417dMPJAcFK4s6nkFX7GxiC8vtis8eAA7Jrk5\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol\":{\"keccak256\":\"0xab6ac5bd9ceadd20e3b60bb079489a2942c60f2697a6e145c585ee49b281534c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://50df58f97d6b423605489b3dfad69b0e4f68197d02950d6858072b1bffe5fa44\",\"dweb:/ipfs/QmQGa1CGYRqkr4Mv85z7A7vGRAmCgmpU2hikMuRURu7AUA\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol\":{\"keccak256\":\"0x8cde7ad64b4dced2fa40e91e3c8ffd0eaaf86954c65a1c0f7abc35f1af3a89d0\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6dda14811ba9ddf552ecf2c6b7414ea9eda70421ffa05830baec1c12c157fa77\",\"dweb:/ipfs/QmbLT6zzSxFAtD1NsZRPpuDRXKtgQ8vbg3P6NcSRA2K4Qh\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol\":{\"keccak256\":\"0x5c522018f94c194608fd0f3f6bb1c7373d53496f5b6cb5e916b7a8d61fc7caf1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4e3b53a05473e3862a40c30bc9ef64c3d835975297577a790309253917d990e9\",\"dweb:/ipfs/QmRSrGUM3AEXjBBWvrHzdvz4ibjAYDFZzfRZoXRnFDz9vi\"]},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol\":{\"keccak256\":\"0xbf4a0b7b13de3cb73722a74cfee8b34fa250855373cd17e54a093f9054efbc61\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a238096b300063a853ccad81ff3141b64784c7ae18f3e254701fdc8763f3b885\",\"dweb:/ipfs/Qmd1RiqVgZgsjdUDAmpHnp9myXDRTJyFkWyNZmZWS4bXRT\"]},\"@pancakeswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0xbefbff1aed686bac4be2ed1569a29f88649cfa17c45f417db81d6a2202fc1518\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6dac2bb25c624ab93711649cfa5735603c37285964c102e456b81cfe64d862b6\",\"dweb:/ipfs/QmRzLrrJ4QSmaE2hRmB69PzxTewavysupU3hmZgezLEQ72\"]},\"@pancakeswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]},\"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":{\"keccak256\":\"0x862a211d6bacea995e9c60c4ad20abfdf7674b83e39208798aec96efd8b959ff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://231e94c1635744b213f9362642268d9f42291786f297912d71f86552ce84de3a\",\"dweb:/ipfs/QmT9oabKX9YPbdGhDntTUUFq6Sn6i5QYn7JFLVXcFbsimL\"]},\"contracts/BNBPrice.sol\":{\"keccak256\":\"0x4b9a698c465e82d170871b53141b28359203062c16ecd0c1a0f85d9aec003675\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0460df922342f6bd988b3eab92fda37e3ff29422c741ff60d929067d6075098b\",\"dweb:/ipfs/Qmbj2mm3eRNQDekZagL6DyeKhqFfnLKYs4zS86KKQQsn6e\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1926,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "lastPriceStatic",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1928,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "bnb",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1930,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "usd",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 1932,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "owner",
								"offset": 0,
								"slot": "3",
								"type": "t_address_payable"
							},
							{
								"astId": 1935,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "poolsUSD",
								"offset": 0,
								"slot": "4",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 1939,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "eqMode",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 1943,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "lastPrice",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1945,
								"contract": "contracts/BNBPrice.sol:BNBPrice",
								"label": "tax",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol",
					"exportedSymbols": {
						"IPancakeV3Factory": [
							170
						]
					},
					"id": 171,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "71:175:0",
								"text": "@title The interface for the PancakeSwap V3 Factory\n @notice The PancakeSwap V3 Factory facilitates creation of PancakeSwap V3 pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 170,
							"linearizedBaseContracts": [
								170
							],
							"name": "IPancakeV3Factory",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IPancakeV3Factory.TickSpacingExtraInfo",
									"id": 7,
									"members": [
										{
											"constant": false,
											"id": 4,
											"mutability": "mutable",
											"name": "whitelistRequested",
											"nodeType": "VariableDeclaration",
											"scope": 7,
											"src": "318:23:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 3,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "318:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 6,
											"mutability": "mutable",
											"name": "enabled",
											"nodeType": "VariableDeclaration",
											"scope": 7,
											"src": "351:12:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 5,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "351:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TickSpacingExtraInfo",
									"nodeType": "StructDefinition",
									"scope": 170,
									"src": "280:90:0",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "376:185:0",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"id": 14,
									"name": "OwnerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "585:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "585:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "611:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "611:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "584:52:0"
									},
									"src": "566:71:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "643:421:0",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"id": 27,
									"name": "PoolCreated",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1096:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1096:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1128:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1128:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1160:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 20,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1160:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1188:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 22,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1188:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1215:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1215:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1086:147:0"
									},
									"src": "1069:165:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "1240:275:0",
										"text": "@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"
									},
									"id": 34,
									"name": "FeeAmountEnabled",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "1543:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 29,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1543:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "1563:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 31,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1542:47:0"
									},
									"src": "1520:70:0"
								},
								{
									"anonymous": false,
									"id": 42,
									"name": "FeeAmountExtraInfoUpdated",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1628:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 35,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1628:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"indexed": false,
												"mutability": "mutable",
												"name": "whitelistRequested",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1648:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 37,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1648:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"indexed": false,
												"mutability": "mutable",
												"name": "enabled",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1673:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 39,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1673:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1627:59:0"
									},
									"src": "1596:91:0"
								},
								{
									"anonymous": false,
									"id": 48,
									"name": "WhiteListAdded",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1714:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1714:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 46,
												"indexed": false,
												"mutability": "mutable",
												"name": "verified",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1736:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 45,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1736:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1713:37:0"
									},
									"src": "1693:58:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "1757:48:0",
										"text": "@notice Emitted when LM pool deployer is set"
									},
									"id": 53,
									"name": "SetLmPoolDeployer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"indexed": true,
												"mutability": "mutable",
												"name": "lmPoolDeployer",
												"nodeType": "VariableDeclaration",
												"scope": 53,
												"src": "1834:30:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1834:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1833:32:0"
									},
									"src": "1810:56:0"
								},
								{
									"documentation": {
										"id": 54,
										"nodeType": "StructuredDocumentation",
										"src": "1872:163:0",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 59,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2054:2:0"
									},
									"returnParameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "2080:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2080:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:9:0"
									},
									"scope": 170,
									"src": "2040:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 60,
										"nodeType": "StructuredDocumentation",
										"src": "2095:348:0",
										"text": "@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"
									},
									"functionSelector": "22afcccb",
									"id": 67,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2478:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 61,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2478:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2477:12:0"
									},
									"returnParameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "2513:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 64,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2513:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2512:7:0"
									},
									"scope": 170,
									"src": "2448:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "2526:365:0",
										"text": "@notice Returns the tick spacing extra info\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return whitelistRequested The flag whether should be created by white list users only"
									},
									"functionSelector": "88e8006d",
									"id": 77,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacingExtraInfo",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "2935:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 69,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2935:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2934:12:0"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "whitelistRequested",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "2970:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 72,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2970:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "enabled",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "2995:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 74,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2995:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2969:39:0"
									},
									"scope": 170,
									"src": "2896:113:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "3015:471:0",
										"text": "@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"
									},
									"functionSelector": "1698ee82",
									"id": 89,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "3517:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3517:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "3541:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 81,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3541:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "3565:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 83,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3565:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3507:74:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "3605:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3605:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3604:14:0"
									},
									"scope": 170,
									"src": "3491:128:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "3625:554:0",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"
									},
									"functionSelector": "a1671295",
									"id": 101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4213:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 91,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4237:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4261:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 95,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "4261:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4203:74:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4296:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4295:14:0"
									},
									"scope": 170,
									"src": "4184:126:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4316:144:0",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 107,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 107,
												"src": "4483:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4483:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4482:16:0"
									},
									"returnParameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4507:0:0"
									},
									"scope": 170,
									"src": "4465:43:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "4514:326:0",
										"text": "@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"
									},
									"functionSelector": "8a7c195f",
									"id": 115,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableFeeAmount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "4870:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 109,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "4870:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "4882:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 111,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4882:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4869:31:0"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4909:0:0"
									},
									"scope": 170,
									"src": "4845:65:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "4916:174:0",
										"text": "@notice Set an address into white list\n @dev Address can be updated by owner with boolean value false\n @param user The user address that add into white list"
									},
									"functionSelector": "e4a86a99",
									"id": 123,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setWhiteListAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5124:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5124:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "verified",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5138:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 119,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5138:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5123:29:0"
									},
									"returnParameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5161:0:0"
									},
									"scope": 170,
									"src": "5095:67:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "5168:248:0",
										"text": "@notice Set a fee amount extra info\n @dev Fee amounts can be updated by owner with extra info\n @param whitelistRequested The flag whether should be created by owner only\n @param enabled The flag is the fee is enabled or not"
									},
									"functionSelector": "8ff38e80",
									"id": 133,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeAmountExtraInfo",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "5461:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 125,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "5461:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "whitelistRequested",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "5481:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 127,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5481:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "enabled",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "5514:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 129,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5514:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5451:81:0"
									},
									"returnParameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5541:0:0"
									},
									"scope": 170,
									"src": "5421:121:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "80d6a792",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setLmPoolDeployer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "_lmPoolDeployer",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "5575:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5575:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5574:25:0"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5608:0:0"
									},
									"scope": 170,
									"src": "5548:61:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7e8435e6",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "5639:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5639:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "5653:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 141,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5653:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "5674:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 143,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5674:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5638:56:0"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5703:0:0"
									},
									"scope": 170,
									"src": "5615:89:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "43db87da",
									"id": 162,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "5744:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5744:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "5766:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5766:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "5793:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 152,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5793:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "5827:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 154,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5827:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5734:123:0"
									},
									"returnParameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "5876:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 157,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "5893:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 159,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5893:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:34:0"
									},
									"scope": 170,
									"src": "5710:200:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "11ff5e8d",
									"id": 169,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setLmPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "5935:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5935:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "lmPool",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "5949:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5949:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5934:30:0"
									},
									"returnParameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5973:0:0"
									},
									"scope": 170,
									"src": "5916:58:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 171,
							"src": "246:5730:0"
						}
					],
					"src": "45:5932:0"
				},
				"id": 0
			},
			"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol",
					"exportedSymbols": {
						"IPancakeV3Pool": [
							192
						],
						"IPancakeV3PoolActions": [
							288
						],
						"IPancakeV3PoolDerivedState": [
							319
						],
						"IPancakeV3PoolEvents": [
							442
						],
						"IPancakeV3PoolImmutables": [
							482
						],
						"IPancakeV3PoolOwnerActions": [
							514
						],
						"IPancakeV3PoolState": [
							622
						]
					},
					"id": 193,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 172,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:1"
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol",
							"file": "./pool/IPancakeV3PoolImmutables.sol",
							"id": 173,
							"nodeType": "ImportDirective",
							"scope": 193,
							"sourceUnit": 483,
							"src": "71:45:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol",
							"file": "./pool/IPancakeV3PoolState.sol",
							"id": 174,
							"nodeType": "ImportDirective",
							"scope": 193,
							"sourceUnit": 623,
							"src": "117:40:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol",
							"file": "./pool/IPancakeV3PoolDerivedState.sol",
							"id": 175,
							"nodeType": "ImportDirective",
							"scope": 193,
							"sourceUnit": 320,
							"src": "158:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol",
							"file": "./pool/IPancakeV3PoolActions.sol",
							"id": 176,
							"nodeType": "ImportDirective",
							"scope": 193,
							"sourceUnit": 289,
							"src": "206:42:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol",
							"file": "./pool/IPancakeV3PoolOwnerActions.sol",
							"id": 177,
							"nodeType": "ImportDirective",
							"scope": 193,
							"sourceUnit": 515,
							"src": "249:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol",
							"file": "./pool/IPancakeV3PoolEvents.sol",
							"id": 178,
							"nodeType": "ImportDirective",
							"scope": 193,
							"sourceUnit": 443,
							"src": "297:41:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 180,
										"name": "IPancakeV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 482,
										"src": "645:24:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPancakeV3PoolImmutables_$482",
											"typeString": "contract IPancakeV3PoolImmutables"
										}
									},
									"id": 181,
									"nodeType": "InheritanceSpecifier",
									"src": "645:24:1"
								},
								{
									"baseName": {
										"id": 182,
										"name": "IPancakeV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 622,
										"src": "675:19:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPancakeV3PoolState_$622",
											"typeString": "contract IPancakeV3PoolState"
										}
									},
									"id": 183,
									"nodeType": "InheritanceSpecifier",
									"src": "675:19:1"
								},
								{
									"baseName": {
										"id": 184,
										"name": "IPancakeV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 319,
										"src": "700:26:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPancakeV3PoolDerivedState_$319",
											"typeString": "contract IPancakeV3PoolDerivedState"
										}
									},
									"id": 185,
									"nodeType": "InheritanceSpecifier",
									"src": "700:26:1"
								},
								{
									"baseName": {
										"id": 186,
										"name": "IPancakeV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 288,
										"src": "732:21:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPancakeV3PoolActions_$288",
											"typeString": "contract IPancakeV3PoolActions"
										}
									},
									"id": 187,
									"nodeType": "InheritanceSpecifier",
									"src": "732:21:1"
								},
								{
									"baseName": {
										"id": 188,
										"name": "IPancakeV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 514,
										"src": "759:26:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPancakeV3PoolOwnerActions_$514",
											"typeString": "contract IPancakeV3PoolOwnerActions"
										}
									},
									"id": 189,
									"nodeType": "InheritanceSpecifier",
									"src": "759:26:1"
								},
								{
									"baseName": {
										"id": 190,
										"name": "IPancakeV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 442,
										"src": "791:20:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPancakeV3PoolEvents_$442",
											"typeString": "contract IPancakeV3PoolEvents"
										}
									},
									"id": 191,
									"nodeType": "InheritanceSpecifier",
									"src": "791:20:1"
								}
							],
							"contractDependencies": [
								288,
								319,
								442,
								482,
								514,
								622
							],
							"contractKind": "interface",
							"documentation": {
								"id": 179,
								"nodeType": "StructuredDocumentation",
								"src": "340:273:1",
								"text": "@title The interface for a PancakeSwap V3 Pool\n @notice A PancakeSwap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 192,
							"linearizedBaseContracts": [
								192,
								442,
								514,
								288,
								319,
								622,
								482
							],
							"name": "IPancakeV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 193,
							"src": "613:203:1"
						}
					],
					"src": "45:772:1"
				},
				"id": 1
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol",
					"exportedSymbols": {
						"IPancakeV3PoolActions": [
							288
						]
					},
					"id": 289,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 194,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 195,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:2",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 288,
							"linearizedBaseContracts": [
								288
							],
							"name": "IPancakeV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:2",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "442:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 197,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:2"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:2"
									},
									"scope": 288,
									"src": "422:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:2",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1536:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1563:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 205,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1588:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 207,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1613:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 209,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1637:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 211,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1681:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1698:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:2"
									},
									"scope": 288,
									"src": "1513:202:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:2",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "2805:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "2832:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 223,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "2857:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 225,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "2882:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 227,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "2916:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 229,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:2"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "2965:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 232,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "2982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 234,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:2"
									},
									"scope": 288,
									"src": "2779:220:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:2",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 251,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3664:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 239,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3689:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 241,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3714:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 243,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:2"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3753:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3770:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:2"
									},
									"scope": 288,
									"src": "3641:146:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:2",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4836:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4863:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 255,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4888:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 257,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4920:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 259,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4955:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 261,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:2"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4999:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 264,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "5015:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 266,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:2"
									},
									"scope": 288,
									"src": "4813:218:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:2",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 281,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "5723:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "5750:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "5775:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "5800:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 277,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:2"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:2"
									},
									"scope": 288,
									"src": "5699:136:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:2",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "6257:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 283,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:2"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:2"
									},
									"scope": 288,
									"src": "6213:88:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 289,
							"src": "173:6130:2"
						}
					],
					"src": "45:6259:2"
				},
				"id": 2
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IPancakeV3PoolDerivedState": [
							319
						]
					},
					"id": 320,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 290,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 291,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:3",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 319,
							"linearizedBaseContracts": [
								319
							],
							"name": "IPancakeV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:3",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 304,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "1403:29:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 293,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 294,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:3"
									},
									"returnParameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "1481:30:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 297,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 298,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "1513:51:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 300,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 301,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:3"
									},
									"scope": 319,
									"src": "1386:180:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 305,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:3",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 318,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "2383:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 306,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 308,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:3"
									},
									"returnParameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "2477:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 311,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "2517:37:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 313,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "2568:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 315,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:3"
									},
									"scope": 319,
									"src": "2348:251:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 320,
							"src": "293:2308:3"
						}
					],
					"src": "45:2557:3"
				},
				"id": 3
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol",
					"exportedSymbols": {
						"IPancakeV3PoolEvents": [
							442
						]
					},
					"id": 443,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 321,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 322,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:4",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 442,
							"linearizedBaseContracts": [
								442
							],
							"name": "IPancakeV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 323,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:4",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 329,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "562:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 324,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "584:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 326,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:4"
									},
									"src": "545:51:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:4",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 346,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1178:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1202:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1233:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 335,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1266:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 337,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 340,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1299:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 339,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1323:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1348:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:4"
									},
									"src": "1158:212:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 347,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:4",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 361,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1897:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1928:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1955:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 352,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 355,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1988:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 354,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 357,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "2021:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 356,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "2046:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 358,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:4"
									},
									"src": "1874:194:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:4",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 376,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "2622:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "2653:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 365,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "2686:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 367,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "2719:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 369,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "2743:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "2768:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:4"
									},
									"src": "2602:188:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 377,
										"nodeType": "StructuredDocumentation",
										"src": "2796:746:4",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap\n @param protocolFeesToken0 The protocol fee of token0 in the swap\n @param protocolFeesToken1 The protocol fee of token1 in the swap"
									},
									"id": 397,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 379,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3567:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 378,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3567:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3599:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 380,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3599:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 383,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3634:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 382,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3634:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3658:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 384,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3658:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3682:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 386,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3682:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3712:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 388,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3712:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 391,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3739:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 390,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3739:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"indexed": false,
												"mutability": "mutable",
												"name": "protocolFeesToken0",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3759:26:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 392,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3759:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"indexed": false,
												"mutability": "mutable",
												"name": "protocolFeesToken1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3795:26:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 394,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3795:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3557:270:4"
									},
									"src": "3547:281:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "3834:562:4",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 412,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "4422:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4422:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 402,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "4454:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 401,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4454:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 404,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "4489:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4489:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "4514:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4514:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "4539:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 407,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4539:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 410,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "4562:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 409,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4562:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:169:4"
									},
									"src": "4401:181:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "4588:451:4",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 419,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "5094:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 414,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "5094:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "5140:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 416,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "5140:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5084:98:4"
									},
									"src": "5044:139:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "5189:370:4",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 430,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 430,
												"src": "5594:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 421,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5594:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 424,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 430,
												"src": "5626:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 423,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5626:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 426,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 430,
												"src": "5658:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 425,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5658:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 428,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 430,
												"src": "5690:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 427,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5690:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5584:134:4"
									},
									"src": "5564:155:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 431,
										"nodeType": "StructuredDocumentation",
										"src": "5725:384:4",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 441,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "6136:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6136:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "6160:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6160:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 437,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "6187:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 436,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6187:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "6204:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 438,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6204:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6135:85:4"
									},
									"src": "6114:107:4"
								}
							],
							"scope": 443,
							"src": "159:6064:4"
						}
					],
					"src": "45:6179:4"
				},
				"id": 4
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol",
					"exportedSymbols": {
						"IPancakeV3PoolImmutables": [
							482
						]
					},
					"id": 483,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 444,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 445,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:5",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 482,
							"linearizedBaseContracts": [
								482
							],
							"name": "IPancakeV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:5",
										"text": "@notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 451,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:5"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "450:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 448,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:5"
									},
									"scope": 482,
									"src": "408:51:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 452,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:5",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 457,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:5"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "624:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:5"
									},
									"scope": 482,
									"src": "583:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:5",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:5"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:5"
									},
									"scope": 482,
									"src": "758:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:5",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 469,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:5"
									},
									"returnParameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "941:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 466,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:5"
									},
									"scope": 482,
									"src": "903:46:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:5",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 475,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:5"
									},
									"returnParameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "1364:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 472,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:5"
									},
									"scope": 482,
									"src": "1318:53:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:5",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 481,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:5"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 478,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:5"
									},
									"scope": 482,
									"src": "1745:63:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 483,
							"src": "224:1586:5"
						}
					],
					"src": "45:1766:5"
				},
				"id": 5
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IPancakeV3PoolOwnerActions": [
							514
						]
					},
					"id": 515,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 484,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 485,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:6",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 514,
							"linearizedBaseContracts": [
								514
							],
							"name": "IPancakeV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 486,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:6",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "b0d0d211",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "464:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 487,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "464:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "485:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 489,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "485:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:42:6"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:0:6"
									},
									"scope": 514,
									"src": "440:75:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "521:483:6",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 507,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1043:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1070:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 497,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1070:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1104:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 499,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1033:101:6"
									},
									"returnParameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1153:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 502,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1153:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1170:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 504,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1170:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1152:34:6"
									},
									"scope": 514,
									"src": "1009:178:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "1193:54:6",
										"text": "@notice Set the LM pool to enable liquidity mining"
									},
									"functionSelector": "cc7e7fa2",
									"id": 513,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setLmPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "lmPool",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "1271:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1271:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1270:16:6"
									},
									"returnParameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1295:0:6"
									},
									"scope": 514,
									"src": "1252:44:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 515,
							"src": "187:1111:6"
						}
					],
					"src": "45:1254:6"
				},
				"id": 6
			},
			"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol",
					"exportedSymbols": {
						"IPancakeV3PoolState": [
							622
						]
					},
					"id": 623,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 516,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 517,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:7",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 622,
							"linearizedBaseContracts": [
								622
							],
							"name": "IPancakeV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 518,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:7",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 535,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:7"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "1498:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 520,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "1532:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 522,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "1556:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 524,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "1593:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 526,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "1636:33:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 528,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "1683:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 530,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1683:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "1715:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 532,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1715:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:254:7"
									},
									"scope": 622,
									"src": "1421:318:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "1745:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 541,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1947:2:7"
									},
									"returnParameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "1973:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1972:9:7"
									},
									"scope": 622,
									"src": "1918:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 542,
										"nodeType": "StructuredDocumentation",
										"src": "1988:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 547,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2190:2:7"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 547,
												"src": "2216:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 544,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2216:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2215:9:7"
									},
									"scope": 622,
									"src": "2161:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 548,
										"nodeType": "StructuredDocumentation",
										"src": "2231:147:7",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 555,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2404:2:7"
									},
									"returnParameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "2430:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 550,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2430:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "2446:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 552,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2446:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2429:32:7"
									},
									"scope": 622,
									"src": "2383:79:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "2468:150:7",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 561,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2641:2:7"
									},
									"returnParameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 561,
												"src": "2667:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 558,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2667:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2666:9:7"
									},
									"scope": 622,
									"src": "2623:53:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 562,
										"nodeType": "StructuredDocumentation",
										"src": "2682:1244:7",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 583,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "3946:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 563,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3946:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3945:12:7"
									},
									"returnParameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4018:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 566,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4018:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4054:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 568,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4054:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4087:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 570,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4087:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4130:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 572,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4130:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4173:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 574,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4173:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4214:38:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 576,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4214:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4266:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 578,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4266:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4301:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 580,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4301:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:323:7"
									},
									"scope": 622,
									"src": "3931:397:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "4334:99:7",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 591,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 591,
												"src": "4458:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 585,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4458:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4457:20:7"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 591,
												"src": "4501:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4501:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4500:9:7"
									},
									"scope": 622,
									"src": "4438:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 592,
										"nodeType": "StructuredDocumentation",
										"src": "4516:700:7",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 607,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5240:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 593,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5240:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5239:13:7"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5313:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 596,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5313:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5345:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5345:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5391:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 600,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5391:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5437:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 602,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5437:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5470:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 604,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5470:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5299:200:7"
									},
									"scope": 622,
									"src": "5221:279:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "5506:749:7",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 621,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "6282:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6282:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6281:15:7"
									},
									"returnParameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "6357:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 612,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6357:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "6392:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 614,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6392:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "6426:41:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 616,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6426:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "6481:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 618,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6481:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6343:164:7"
									},
									"scope": 622,
									"src": "6260:248:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 623,
							"src": "240:6270:7"
						}
					],
					"src": "45:6466:7"
				},
				"id": 7
			},
			"@pancakeswap/v3-core/contracts/libraries/FullMath.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/libraries/FullMath.sol",
					"exportedSymbols": {
						"FullMath": [
							795
						]
					},
					"id": 796,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 624,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 625,
								"nodeType": "StructuredDocumentation",
								"src": "78:297:8",
								"text": "@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"
							},
							"fullyImplemented": true,
							"id": 795,
							"linearizedBaseContracts": [
								795
							],
							"name": "FullMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 750,
										"nodeType": "Block",
										"src": "890:3648:8",
										"statements": [
											{
												"assignments": [
													638
												],
												"declarations": [
													{
														"constant": false,
														"id": 638,
														"mutability": "mutable",
														"name": "prod0",
														"nodeType": "VariableDeclaration",
														"scope": 750,
														"src": "1203:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 637,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1203:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 639,
												"nodeType": "VariableDeclarationStatement",
												"src": "1203:13:8"
											},
											{
												"assignments": [
													641
												],
												"declarations": [
													{
														"constant": false,
														"id": 641,
														"mutability": "mutable",
														"name": "prod1",
														"nodeType": "VariableDeclaration",
														"scope": 750,
														"src": "1271:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 640,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1271:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 642,
												"nodeType": "VariableDeclarationStatement",
												"src": "1271:13:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1347:141:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1361:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1378:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1381:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1388:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1384:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1384:6:8"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "1371:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1371:20:8"
															},
															"variables": [
																{
																	"name": "mm",
																	"nodeType": "YulTypedName",
																	"src": "1365:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1404:18:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1417:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1420:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1413:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1413:9:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "1404:5:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1435:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1452:2:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1456:5:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1448:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1448:14:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1467:2:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1471:5:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1464:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1464:13:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1444:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1444:34:8"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "1435:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 628,
														"isOffset": false,
														"isSlot": false,
														"src": "1378:1:8",
														"valueSize": 1
													},
													{
														"declaration": 628,
														"isOffset": false,
														"isSlot": false,
														"src": "1417:1:8",
														"valueSize": 1
													},
													{
														"declaration": 630,
														"isOffset": false,
														"isSlot": false,
														"src": "1381:1:8",
														"valueSize": 1
													},
													{
														"declaration": 630,
														"isOffset": false,
														"isSlot": false,
														"src": "1420:1:8",
														"valueSize": 1
													},
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "1404:5:8",
														"valueSize": 1
													},
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "1456:5:8",
														"valueSize": 1
													},
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "1471:5:8",
														"valueSize": 1
													},
													{
														"declaration": 641,
														"isOffset": false,
														"isSlot": false,
														"src": "1435:5:8",
														"valueSize": 1
													}
												],
												"id": 643,
												"nodeType": "InlineAssembly",
												"src": "1338:150:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 644,
														"name": "prod1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 641,
														"src": "1560:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 645,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1569:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1560:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 657,
												"nodeType": "IfStatement",
												"src": "1556:179:8",
												"trueBody": {
													"id": 656,
													"nodeType": "Block",
													"src": "1572:163:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 648,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 632,
																			"src": "1594:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 649,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1608:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1594:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 647,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1586:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 651,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1586:24:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 652,
															"nodeType": "ExpressionStatement",
															"src": "1586:24:8"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1633:65:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1651:33:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "prod0",
																					"nodeType": "YulIdentifier",
																					"src": "1665:5:8"
																				},
																				{
																					"name": "denominator",
																					"nodeType": "YulIdentifier",
																					"src": "1672:11:8"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1661:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1661:23:8"
																		},
																		"variableNames": [
																			{
																				"name": "result",
																				"nodeType": "YulIdentifier",
																				"src": "1651:6:8"
																			}
																		]
																	}
																]
															},
															"evmVersion": "berlin",
															"externalReferences": [
																{
																	"declaration": 632,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1672:11:8",
																	"valueSize": 1
																},
																{
																	"declaration": 638,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1665:5:8",
																	"valueSize": 1
																},
																{
																	"declaration": 635,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1651:6:8",
																	"valueSize": 1
																}
															],
															"id": 653,
															"nodeType": "InlineAssembly",
															"src": "1624:74:8"
														},
														{
															"expression": {
																"id": 654,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 635,
																"src": "1718:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 636,
															"id": 655,
															"nodeType": "Return",
															"src": "1711:13:8"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 659,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "1848:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 660,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 641,
																"src": "1862:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1848:19:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 658,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1840:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1840:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 663,
												"nodeType": "ExpressionStatement",
												"src": "1840:28:8"
											},
											{
												"assignments": [
													665
												],
												"declarations": [
													{
														"constant": false,
														"id": 665,
														"mutability": "mutable",
														"name": "remainder",
														"nodeType": "VariableDeclaration",
														"scope": 750,
														"src": "2145:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 664,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2145:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 666,
												"nodeType": "VariableDeclarationStatement",
												"src": "2145:17:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2181:62:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2195:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2215:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2218:1:8"
																	},
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2221:11:8"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "2208:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2208:25:8"
															},
															"variableNames": [
																{
																	"name": "remainder",
																	"nodeType": "YulIdentifier",
																	"src": "2195:9:8"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 628,
														"isOffset": false,
														"isSlot": false,
														"src": "2215:1:8",
														"valueSize": 1
													},
													{
														"declaration": 630,
														"isOffset": false,
														"isSlot": false,
														"src": "2218:1:8",
														"valueSize": 1
													},
													{
														"declaration": 632,
														"isOffset": false,
														"isSlot": false,
														"src": "2221:11:8",
														"valueSize": 1
													},
													{
														"declaration": 665,
														"isOffset": false,
														"isSlot": false,
														"src": "2195:9:8",
														"valueSize": 1
													}
												],
												"id": 667,
												"nodeType": "InlineAssembly",
												"src": "2172:71:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2316:108:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2330:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod1",
																		"nodeType": "YulIdentifier",
																		"src": "2343:5:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "2353:9:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "2364:5:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2350:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2350:20:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2339:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2339:32:8"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "2330:5:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2384:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2397:5:8"
																	},
																	{
																		"name": "remainder",
																		"nodeType": "YulIdentifier",
																		"src": "2404:9:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2393:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2393:21:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2384:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "2364:5:8",
														"valueSize": 1
													},
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "2384:5:8",
														"valueSize": 1
													},
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:5:8",
														"valueSize": 1
													},
													{
														"declaration": 641,
														"isOffset": false,
														"isSlot": false,
														"src": "2330:5:8",
														"valueSize": 1
													},
													{
														"declaration": 641,
														"isOffset": false,
														"isSlot": false,
														"src": "2343:5:8",
														"valueSize": 1
													},
													{
														"declaration": 665,
														"isOffset": false,
														"isSlot": false,
														"src": "2353:9:8",
														"valueSize": 1
													},
													{
														"declaration": 665,
														"isOffset": false,
														"isSlot": false,
														"src": "2404:9:8",
														"valueSize": 1
													}
												],
												"id": 668,
												"nodeType": "InlineAssembly",
												"src": "2307:117:8"
											},
											{
												"assignments": [
													670
												],
												"declarations": [
													{
														"constant": false,
														"id": 670,
														"mutability": "mutable",
														"name": "twos",
														"nodeType": "VariableDeclaration",
														"scope": 750,
														"src": "2573:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 669,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2573:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 675,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 672,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "2588:12:8",
														"subExpression": {
															"id": 671,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 632,
															"src": "2589:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"id": 673,
														"name": "denominator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 632,
														"src": "2603:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2588:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2573:41:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2679:61:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2693:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2712:11:8"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2725:4:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2708:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2708:22:8"
															},
															"variableNames": [
																{
																	"name": "denominator",
																	"nodeType": "YulIdentifier",
																	"src": "2693:11:8"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 632,
														"isOffset": false,
														"isSlot": false,
														"src": "2693:11:8",
														"valueSize": 1
													},
													{
														"declaration": 632,
														"isOffset": false,
														"isSlot": false,
														"src": "2712:11:8",
														"valueSize": 1
													},
													{
														"declaration": 670,
														"isOffset": false,
														"isSlot": false,
														"src": "2725:4:8",
														"valueSize": 1
													}
												],
												"id": 676,
												"nodeType": "InlineAssembly",
												"src": "2670:70:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2813:49:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2827:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2840:5:8"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2847:4:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2836:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2836:16:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2827:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "2827:5:8",
														"valueSize": 1
													},
													{
														"declaration": 638,
														"isOffset": false,
														"isSlot": false,
														"src": "2840:5:8",
														"valueSize": 1
													},
													{
														"declaration": 670,
														"isOffset": false,
														"isSlot": false,
														"src": "2847:4:8",
														"valueSize": 1
													}
												],
												"id": 677,
												"nodeType": "InlineAssembly",
												"src": "2804:58:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3050:63:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3064:39:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3084:1:8",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "3087:4:8"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3080:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3080:12:8"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3094:4:8"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3076:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3076:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3101:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3072:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3072:31:8"
															},
															"variableNames": [
																{
																	"name": "twos",
																	"nodeType": "YulIdentifier",
																	"src": "3064:4:8"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 670,
														"isOffset": false,
														"isSlot": false,
														"src": "3064:4:8",
														"valueSize": 1
													},
													{
														"declaration": 670,
														"isOffset": false,
														"isSlot": false,
														"src": "3087:4:8",
														"valueSize": 1
													},
													{
														"declaration": 670,
														"isOffset": false,
														"isSlot": false,
														"src": "3094:4:8",
														"valueSize": 1
													}
												],
												"id": 678,
												"nodeType": "InlineAssembly",
												"src": "3041:72:8"
											},
											{
												"expression": {
													"id": 683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 679,
														"name": "prod0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 638,
														"src": "3122:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 682,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 680,
															"name": "prod1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "3131:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 681,
															"name": "twos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "3139:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3131:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3122:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 684,
												"nodeType": "ExpressionStatement",
												"src": "3122:21:8"
											},
											{
												"assignments": [
													686
												],
												"declarations": [
													{
														"constant": false,
														"id": 686,
														"mutability": "mutable",
														"name": "inv",
														"nodeType": "VariableDeclaration",
														"scope": 750,
														"src": "3477:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 685,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3477:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 693,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 689,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "33",
																	"id": 687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3492:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 688,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 632,
																	"src": "3496:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3492:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 690,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3491:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "^",
													"rightExpression": {
														"hexValue": "32",
														"id": 691,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3511:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3491:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3477:35:8"
											},
											{
												"expression": {
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 694,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "3727:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 695,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3734:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 698,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 696,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "3738:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 697,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 686,
																"src": "3752:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3738:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3734:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3727:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 701,
												"nodeType": "ExpressionStatement",
												"src": "3727:28:8"
											},
											{
												"expression": {
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 702,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "3785:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 707,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3792:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 704,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "3796:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 705,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 686,
																"src": "3810:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3796:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3792:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3785:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 709,
												"nodeType": "ExpressionStatement",
												"src": "3785:28:8"
											},
											{
												"expression": {
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 710,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "3844:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 715,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3851:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 714,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 712,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "3855:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 713,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 686,
																"src": "3869:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3855:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3851:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3844:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 717,
												"nodeType": "ExpressionStatement",
												"src": "3844:28:8"
											},
											{
												"expression": {
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 718,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "3903:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 723,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3910:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 722,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 720,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "3914:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 721,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 686,
																"src": "3928:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3914:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3910:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3903:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 725,
												"nodeType": "ExpressionStatement",
												"src": "3903:28:8"
											},
											{
												"expression": {
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 726,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "3962:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 727,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3969:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 728,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "3973:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 729,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 686,
																"src": "3987:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3973:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3969:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3962:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 733,
												"nodeType": "ExpressionStatement",
												"src": "3962:28:8"
											},
											{
												"expression": {
													"id": 740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 734,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "4022:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 739,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 735,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4029:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 736,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 632,
																"src": "4033:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 737,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 686,
																"src": "4047:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4033:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4029:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4022:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 741,
												"nodeType": "ExpressionStatement",
												"src": "4022:28:8"
											},
											{
												"expression": {
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 742,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 635,
														"src": "4488:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 743,
															"name": "prod0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "4497:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 744,
															"name": "inv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "4505:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4497:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4488:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 747,
												"nodeType": "ExpressionStatement",
												"src": "4488:20:8"
											},
											{
												"expression": {
													"id": 748,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 635,
													"src": "4525:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 636,
												"id": 749,
												"nodeType": "Return",
												"src": "4518:13:8"
											}
										]
									},
									"documentation": {
										"id": 626,
										"nodeType": "StructuredDocumentation",
										"src": "398:359:8",
										"text": "@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"
									},
									"id": 751,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "787:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 627,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "787:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "806:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 629,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "806:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "825:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 631,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "825:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:73:8"
									},
									"returnParameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "874:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 634,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "874:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "873:16:8"
									},
									"scope": 795,
									"src": "762:3776:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 793,
										"nodeType": "Block",
										"src": "4958:177:8",
										"statements": [
											{
												"expression": {
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 763,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "4968:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 765,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 754,
																"src": "4984:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 766,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "4987:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 767,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 758,
																"src": "4990:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 764,
															"name": "mulDiv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "4977:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 768,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4977:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4968:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 770,
												"nodeType": "ExpressionStatement",
												"src": "4968:34:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 772,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 754,
																"src": "5023:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 773,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "5026:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 774,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 758,
																"src": "5029:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 771,
															"name": "mulmod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967280,
															"src": "5016:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 775,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5016:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 776,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5044:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5016:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 792,
												"nodeType": "IfStatement",
												"src": "5012:117:8",
												"trueBody": {
													"id": 791,
													"nodeType": "Block",
													"src": "5047:82:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 779,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 761,
																			"src": "5069:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 782,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5083:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 781,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "5083:7:8",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 780,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "5078:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 783,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5078:13:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 784,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "5078:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5069:26:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 778,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5061:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 786,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5061:35:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 787,
															"nodeType": "ExpressionStatement",
															"src": "5061:35:8"
														},
														{
															"expression": {
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5110:8:8",
																"subExpression": {
																	"id": 788,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 761,
																	"src": "5110:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 790,
															"nodeType": "ExpressionStatement",
															"src": "5110:8:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 752,
										"nodeType": "StructuredDocumentation",
										"src": "4544:271:8",
										"text": "@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"
									},
									"id": 794,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDivRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4855:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 753,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4855:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4874:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4874:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4893:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4845:73:8"
									},
									"returnParameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4942:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4942:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4941:16:8"
									},
									"scope": 795,
									"src": "4820:315:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 796,
							"src": "375:4762:8"
						}
					],
					"src": "45:5093:8"
				},
				"id": 8
			},
			"@pancakeswap/v3-core/contracts/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-core/contracts/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							1330
						]
					},
					"id": 1331,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 797,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 798,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:9",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 1330,
							"linearizedBaseContracts": [
								1330
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 799,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:9",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 803,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1330,
									"src": "449:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 800,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 802,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:9",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 801,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 804,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:9",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 808,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1330,
									"src": "609:44:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 805,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 807,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:9",
										"subExpression": {
											"id": 806,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 803,
											"src": "645:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:9",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 812,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1330,
									"src": "781:53:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 810,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 811,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 813,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:9",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 816,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1330,
									"src": "961:92:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 814,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 815,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1189,
										"nodeType": "Block",
										"src": "1447:2495:9",
										"statements": [
											{
												"assignments": [
													825
												],
												"declarations": [
													{
														"constant": false,
														"id": 825,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 1189,
														"src": "1457:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 824,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 845,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 828,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 826,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 819,
															"src": "1475:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 827,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 841,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 819,
																		"src": "1526:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 839,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 842,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 837,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 843,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:9",
													"trueExpression": {
														"arguments": [
															{
																"id": 835,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:9",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 833,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 819,
																			"src": "1502:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 832,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 831,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 834,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 829,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 836,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 847,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 825,
																"src": "1550:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 850,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 808,
																		"src": "1569:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 848,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 853,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 846,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 855,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:9"
											},
											{
												"assignments": [
													857
												],
												"declarations": [
													{
														"constant": false,
														"id": 857,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1189,
														"src": "1595:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 856,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 866,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 862,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 858,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 825,
																"src": "1611:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 859,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:9",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 863,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 869,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 867,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "1718:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 881,
												"nodeType": "IfStatement",
												"src": "1714:83:9",
												"trueBody": {
													"expression": {
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 872,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "1738:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 875,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 873,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "1747:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 874,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 876,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 877,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 880,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 884,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 882,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "1811:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 883,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 885,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 896,
												"nodeType": "IfStatement",
												"src": "1807:83:9",
												"trueBody": {
													"expression": {
														"id": 894,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 887,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "1831:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 893,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 890,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 888,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "1840:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 889,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 891,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 892,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 895,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 899,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 897,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "1904:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 898,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 900,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 911,
												"nodeType": "IfStatement",
												"src": "1900:83:9",
												"trueBody": {
													"expression": {
														"id": 909,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 902,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "1924:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 905,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 903,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "1933:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 904,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 906,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 910,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 914,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 912,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "1997:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 913,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 915,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 926,
												"nodeType": "IfStatement",
												"src": "1993:84:9",
												"trueBody": {
													"expression": {
														"id": 924,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 917,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2018:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 920,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 918,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2027:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 919,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 921,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 922,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 925,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 929,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 927,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2091:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 928,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 941,
												"nodeType": "IfStatement",
												"src": "2087:84:9",
												"trueBody": {
													"expression": {
														"id": 939,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 932,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2112:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 935,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 933,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2121:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 934,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 936,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 937,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 940,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 942,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2185:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 943,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 945,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 956,
												"nodeType": "IfStatement",
												"src": "2181:84:9",
												"trueBody": {
													"expression": {
														"id": 954,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 947,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2206:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 950,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 948,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2215:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 949,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 951,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 952,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 955,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 957,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2279:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 958,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 960,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 971,
												"nodeType": "IfStatement",
												"src": "2275:84:9",
												"trueBody": {
													"expression": {
														"id": 969,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 962,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2300:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 965,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 963,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2309:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 964,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 966,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 967,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 970,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 974,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 972,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2373:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 973,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 975,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 986,
												"nodeType": "IfStatement",
												"src": "2369:85:9",
												"trueBody": {
													"expression": {
														"id": 984,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 977,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2395:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 983,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 980,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 978,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2404:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 979,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 981,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 985,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 989,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 987,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2468:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 988,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 990,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1001,
												"nodeType": "IfStatement",
												"src": "2464:85:9",
												"trueBody": {
													"expression": {
														"id": 999,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 992,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2490:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 995,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 993,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2499:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 994,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 996,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 997,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1000,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1006,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1002,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2563:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 1003,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1005,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1016,
												"nodeType": "IfStatement",
												"src": "2559:85:9",
												"trueBody": {
													"expression": {
														"id": 1014,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1007,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2585:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1013,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1010,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1008,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2594:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 1009,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1011,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1012,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1015,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1021,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1019,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1017,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 1018,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1020,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1031,
												"nodeType": "IfStatement",
												"src": "2654:85:9",
												"trueBody": {
													"expression": {
														"id": 1029,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1022,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2680:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1028,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1025,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1023,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2689:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 1024,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1026,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1030,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1034,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1032,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2753:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 1033,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1035,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1046,
												"nodeType": "IfStatement",
												"src": "2749:86:9",
												"trueBody": {
													"expression": {
														"id": 1044,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1037,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2776:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1040,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1038,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2785:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 1039,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1041,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1042,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1045,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1049,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1047,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2849:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1050,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1061,
												"nodeType": "IfStatement",
												"src": "2845:86:9",
												"trueBody": {
													"expression": {
														"id": 1059,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1052,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2872:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1055,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1053,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2881:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 1054,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1056,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1057,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1060,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1064,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1062,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "2945:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1065,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1076,
												"nodeType": "IfStatement",
												"src": "2941:86:9",
												"trueBody": {
													"expression": {
														"id": 1074,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1067,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "2968:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1073,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1070,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1068,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "2977:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 1069,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1071,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1072,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1075,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1079,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1077,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "3041:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 1078,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1080,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1091,
												"nodeType": "IfStatement",
												"src": "3037:86:9",
												"trueBody": {
													"expression": {
														"id": 1089,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1082,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "3064:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1085,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1083,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "3073:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 1084,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1086,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1090,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1094,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1092,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "3137:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 1093,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1095,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1106,
												"nodeType": "IfStatement",
												"src": "3133:86:9",
												"trueBody": {
													"expression": {
														"id": 1104,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1097,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "3161:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1100,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1098,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "3170:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 1099,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1101,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1102,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1105,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1107,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "3233:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1121,
												"nodeType": "IfStatement",
												"src": "3229:85:9",
												"trueBody": {
													"expression": {
														"id": 1119,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1112,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "3257:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1115,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1113,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "3266:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 1114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1116,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1120,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1122,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "3328:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 1123,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1125,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1136,
												"nodeType": "IfStatement",
												"src": "3324:83:9",
												"trueBody": {
													"expression": {
														"id": 1134,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1127,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "3352:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1130,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1128,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "3361:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 1129,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1131,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1135,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1139,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1137,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "3421:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 1138,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1140,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1151,
												"nodeType": "IfStatement",
												"src": "3417:78:9",
												"trueBody": {
													"expression": {
														"id": 1149,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1142,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "3445:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1145,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1143,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 857,
																			"src": "3454:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 1144,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1146,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1150,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 1154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1152,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "3510:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1165,
												"nodeType": "IfStatement",
												"src": "3506:47:9",
												"trueBody": {
													"expression": {
														"id": 1163,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1155,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "3520:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1157,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:9",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 1156,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 1160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1161,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 857,
																"src": "3548:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1164,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:9"
												}
											},
											{
												"expression": {
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1166,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 822,
														"src": "3863:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1169,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 857,
																				"src": "3887:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1170,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1172,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1180,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1178,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1173,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 857,
																						"src": "3903:5:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 1176,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 1174,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 1175,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 1177,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1179,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 1182,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 1183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:9",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 1181,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 1184,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1168,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 1167,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 1188,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:9"
											}
										]
									},
									"documentation": {
										"id": 817,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:9",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 1190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "1390:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 818,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:9"
									},
									"returnParameters": {
										"id": 823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "1425:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 821,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:9"
									},
									"scope": 1330,
									"src": "1362:2580:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1328,
										"nodeType": "Block",
										"src": "4446:4196:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1199,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "4563:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1200,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 812,
																	"src": "4579:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1204,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1202,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "4597:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1203,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 816,
																	"src": "4612:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 1206,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 1198,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1208,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:9"
											},
											{
												"assignments": [
													1210
												],
												"declarations": [
													{
														"constant": false,
														"id": 1210,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1328,
														"src": "4642:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1209,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1217,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1213,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1193,
																"src": "4666:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1211,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1214,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1215,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:9"
											},
											{
												"assignments": [
													1219
												],
												"declarations": [
													{
														"constant": false,
														"id": 1219,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 1328,
														"src": "4696:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1218,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1221,
												"initialValue": {
													"id": 1220,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1210,
													"src": "4708:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:9"
											},
											{
												"assignments": [
													1223
												],
												"declarations": [
													{
														"constant": false,
														"id": 1223,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 1328,
														"src": "4723:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1222,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1225,
												"initialValue": {
													"hexValue": "30",
													"id": 1224,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:9",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:9",
														"valueSize": 1
													}
												],
												"id": 1226,
												"nodeType": "InlineAssembly",
												"src": "4749:148:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:9",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:9",
														"valueSize": 1
													}
												],
												"id": 1227,
												"nodeType": "InlineAssembly",
												"src": "4906:132:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:9",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:9",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:9",
														"valueSize": 1
													}
												],
												"id": 1228,
												"nodeType": "InlineAssembly",
												"src": "5047:124:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:9",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:9",
														"valueSize": 1
													}
												],
												"id": 1229,
												"nodeType": "InlineAssembly",
												"src": "5180:120:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:9",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:9",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:9",
														"valueSize": 1
													}
												],
												"id": 1230,
												"nodeType": "InlineAssembly",
												"src": "5309:118:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:9",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:9",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:9",
														"valueSize": 1
													}
												],
												"id": 1231,
												"nodeType": "InlineAssembly",
												"src": "5436:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:9",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:9",
														"valueSize": 1
													}
												],
												"id": 1232,
												"nodeType": "InlineAssembly",
												"src": "5562:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:9",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1223,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:9",
														"valueSize": 1
													}
												],
												"id": 1233,
												"nodeType": "InlineAssembly",
												"src": "5688:82:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1234,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1223,
														"src": "5784:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 1235,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1253,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1246,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "5835:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1247,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "5839:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 1248,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1249,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1223,
																			"src": "5855:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1251,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1254,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:9"
												},
												"id": 1255,
												"nodeType": "IfStatement",
												"src": "5780:79:9",
												"trueBody": {
													"expression": {
														"id": 1244,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1237,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "5796:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1238,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "5800:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1239,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1223,
																			"src": "5810:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 1240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1242,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1245,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:9"
												}
											},
											{
												"assignments": [
													1257
												],
												"declarations": [
													{
														"constant": false,
														"id": 1257,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 1328,
														"src": "5870:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1256,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1267,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1263,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1260,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1223,
																			"src": "5893:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1259,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1258,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1261,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1264,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 1265,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:9",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:9",
														"valueSize": 1
													}
												],
												"id": 1268,
												"nodeType": "InlineAssembly",
												"src": "5921:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:9",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:9",
														"valueSize": 1
													}
												],
												"id": 1269,
												"nodeType": "InlineAssembly",
												"src": "6090:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:9",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:9",
														"valueSize": 1
													}
												],
												"id": 1270,
												"nodeType": "InlineAssembly",
												"src": "6259:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:9",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:9",
														"valueSize": 1
													}
												],
												"id": 1271,
												"nodeType": "InlineAssembly",
												"src": "6428:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:9",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:9",
														"valueSize": 1
													}
												],
												"id": 1272,
												"nodeType": "InlineAssembly",
												"src": "6597:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:9",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:9",
														"valueSize": 1
													}
												],
												"id": 1273,
												"nodeType": "InlineAssembly",
												"src": "6766:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:9",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:9",
														"valueSize": 1
													}
												],
												"id": 1274,
												"nodeType": "InlineAssembly",
												"src": "6935:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:9",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:9",
														"valueSize": 1
													}
												],
												"id": 1275,
												"nodeType": "InlineAssembly",
												"src": "7104:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:9",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:9",
														"valueSize": 1
													}
												],
												"id": 1276,
												"nodeType": "InlineAssembly",
												"src": "7273:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:9",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:9",
														"valueSize": 1
													}
												],
												"id": 1277,
												"nodeType": "InlineAssembly",
												"src": "7442:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:9",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:9",
														"valueSize": 1
													}
												],
												"id": 1278,
												"nodeType": "InlineAssembly",
												"src": "7611:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:9",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:9",
														"valueSize": 1
													}
												],
												"id": 1279,
												"nodeType": "InlineAssembly",
												"src": "7780:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:9",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:9",
														"valueSize": 1
													}
												],
												"id": 1280,
												"nodeType": "InlineAssembly",
												"src": "7949:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:9",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "berlin",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1219,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:9",
														"valueSize": 1
													}
												],
												"id": 1281,
												"nodeType": "InlineAssembly",
												"src": "8118:133:9"
											},
											{
												"assignments": [
													1283
												],
												"declarations": [
													{
														"constant": false,
														"id": 1283,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 1328,
														"src": "8261:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1282,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1287,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1284,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1257,
														"src": "8284:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1285,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:9"
											},
											{
												"assignments": [
													1289
												],
												"declarations": [
													{
														"constant": false,
														"id": 1289,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 1328,
														"src": "8345:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1288,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1299,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1292,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1283,
																			"src": "8368:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1295,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1296,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1291,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1290,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:9"
											},
											{
												"assignments": [
													1301
												],
												"declarations": [
													{
														"constant": false,
														"id": 1301,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 1328,
														"src": "8440:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1300,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1311,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1309,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1306,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1304,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1283,
																			"src": "8462:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1305,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1307,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1308,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1303,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1302,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:9"
											},
											{
												"expression": {
													"id": 1326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1312,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1196,
														"src": "8537:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 1315,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1313,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1289,
																"src": "8544:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1314,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1301,
																"src": "8555:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1321,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1318,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1301,
																			"src": "8593:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1317,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1190,
																		"src": "8574:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 1319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1320,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "8604:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1323,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1289,
																"src": "8628:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 1324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:9",
															"trueExpression": {
																"id": 1322,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1301,
																"src": "8619:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 1325,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:9",
														"trueExpression": {
															"id": 1316,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1289,
															"src": "8564:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1327,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:9"
											}
										]
									},
									"documentation": {
										"id": 1191,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:9",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 1329,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1329,
												"src": "4389:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1192,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:9"
									},
									"returnParameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1329,
												"src": "4434:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1195,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:9"
									},
									"scope": 1330,
									"src": "4361:4281:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1331,
							"src": "313:8331:9"
						}
					],
					"src": "45:8600:9"
				},
				"id": 9
			},
			"@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol": {
				"ast": {
					"absolutePath": "@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol",
					"exportedSymbols": {
						"FullMath": [
							795
						],
						"IPancakeV3Pool": [
							192
						],
						"IPancakeV3PoolActions": [
							288
						],
						"IPancakeV3PoolDerivedState": [
							319
						],
						"IPancakeV3PoolEvents": [
							442
						],
						"IPancakeV3PoolImmutables": [
							482
						],
						"IPancakeV3PoolOwnerActions": [
							514
						],
						"IPancakeV3PoolState": [
							622
						],
						"OracleLibrary": [
							1919
						],
						"TickMath": [
							1330
						]
					},
					"id": 1920,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1332,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:10"
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/libraries/FullMath.sol",
							"file": "@pancakeswap/v3-core/contracts/libraries/FullMath.sol",
							"id": 1333,
							"nodeType": "ImportDirective",
							"scope": 1920,
							"sourceUnit": 796,
							"src": "78:63:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/libraries/TickMath.sol",
							"file": "@pancakeswap/v3-core/contracts/libraries/TickMath.sol",
							"id": 1334,
							"nodeType": "ImportDirective",
							"scope": 1920,
							"sourceUnit": 1331,
							"src": "142:63:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol",
							"file": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol",
							"id": 1335,
							"nodeType": "ImportDirective",
							"scope": 1920,
							"sourceUnit": 193,
							"src": "206:70:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1336,
								"nodeType": "StructuredDocumentation",
								"src": "278:90:10",
								"text": "@title Oracle library\n @notice Provides functions to integrate with V3 pool oracle"
							},
							"fullyImplemented": true,
							"id": 1919,
							"linearizedBaseContracts": [
								1919
							],
							"name": "OracleLibrary",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1464,
										"nodeType": "Block",
										"src": "1059:1069:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 1351,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1349,
																"name": "secondsAgo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1341,
																"src": "1077:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1350,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1091:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1077:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4250",
															"id": 1352,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1094:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb",
																"typeString": "literal_string \"BP\""
															},
															"value": "BP"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb",
																"typeString": "literal_string \"BP\""
															}
														],
														"id": 1348,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1069:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1069:30:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1354,
												"nodeType": "ExpressionStatement",
												"src": "1069:30:10"
											},
											{
												"assignments": [
													1359
												],
												"declarations": [
													{
														"constant": false,
														"id": 1359,
														"mutability": "mutable",
														"name": "secondsAgos",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "1110:27:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
															"typeString": "uint32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1357,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "1110:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 1358,
															"nodeType": "ArrayTypeName",
															"src": "1110:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
																"typeString": "uint32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1365,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "32",
															"id": 1363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1153:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															}
														],
														"id": 1362,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1140:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (uint32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1360,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "1144:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 1361,
															"nodeType": "ArrayTypeName",
															"src": "1144:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
																"typeString": "uint32[]"
															}
														}
													},
													"id": 1364,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1140:15:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
														"typeString": "uint32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1110:45:10"
											},
											{
												"expression": {
													"id": 1370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1366,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "1165:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														},
														"id": 1368,
														"indexExpression": {
															"hexValue": "30",
															"id": 1367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1177:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1165:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1369,
														"name": "secondsAgo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1341,
														"src": "1182:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "1165:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1371,
												"nodeType": "ExpressionStatement",
												"src": "1165:27:10"
											},
											{
												"expression": {
													"id": 1376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1372,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "1202:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														},
														"id": 1374,
														"indexExpression": {
															"hexValue": "31",
															"id": 1373,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1214:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1202:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1375,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1219:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1202:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1377,
												"nodeType": "ExpressionStatement",
												"src": "1202:18:10"
											},
											{
												"assignments": [
													1382,
													1385
												],
												"declarations": [
													{
														"constant": false,
														"id": 1382,
														"mutability": "mutable",
														"name": "tickCumulatives",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "1232:30:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
															"typeString": "int56[]"
														},
														"typeName": {
															"baseType": {
																"id": 1380,
																"name": "int56",
																"nodeType": "ElementaryTypeName",
																"src": "1232:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															},
															"id": 1381,
															"nodeType": "ArrayTypeName",
															"src": "1232:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
																"typeString": "int56[]"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1385,
														"mutability": "mutable",
														"name": "secondsPerLiquidityCumulativeX128s",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "1264:51:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
															"typeString": "uint160[]"
														},
														"typeName": {
															"baseType": {
																"id": 1383,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "1264:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1384,
															"nodeType": "ArrayTypeName",
															"src": "1264:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
																"typeString": "uint160[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1392,
												"initialValue": {
													"arguments": [
														{
															"id": 1390,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "1360:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1387,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1339,
																	"src": "1346:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1386,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "1331:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 1388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1331:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 1389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observe",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 304,
														"src": "1331:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_array$_t_uint32_$dyn_memory_ptr_$returns$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$",
															"typeString": "function (uint32[] memory) view external returns (int56[] memory,uint160[] memory)"
														}
													},
													"id": 1391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1331:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$",
														"typeString": "tuple(int56[] memory,uint160[] memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1231:141:10"
											},
											{
												"assignments": [
													1394
												],
												"declarations": [
													{
														"constant": false,
														"id": 1394,
														"mutability": "mutable",
														"name": "tickCumulativesDelta",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "1383:26:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"typeName": {
															"id": 1393,
															"name": "int56",
															"nodeType": "ElementaryTypeName",
															"src": "1383:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1402,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													},
													"id": 1401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1395,
															"name": "tickCumulatives",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1382,
															"src": "1412:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
																"typeString": "int56[] memory"
															}
														},
														"id": 1397,
														"indexExpression": {
															"hexValue": "31",
															"id": 1396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1428:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1412:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"baseExpression": {
															"id": 1398,
															"name": "tickCumulatives",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1382,
															"src": "1433:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
																"typeString": "int56[] memory"
															}
														},
														"id": 1400,
														"indexExpression": {
															"hexValue": "30",
															"id": 1399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1449:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1433:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"src": "1412:39:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1383:68:10"
											},
											{
												"assignments": [
													1404
												],
												"declarations": [
													{
														"constant": false,
														"id": 1404,
														"mutability": "mutable",
														"name": "secondsPerLiquidityCumulativesDelta",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "1461:43:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1403,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "1461:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1412,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1405,
															"name": "secondsPerLiquidityCumulativeX128s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1385,
															"src": "1519:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
																"typeString": "uint160[] memory"
															}
														},
														"id": 1407,
														"indexExpression": {
															"hexValue": "31",
															"id": 1406,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1554:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1519:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"baseExpression": {
															"id": 1408,
															"name": "secondsPerLiquidityCumulativeX128s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1385,
															"src": "1559:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
																"typeString": "uint160[] memory"
															}
														},
														"id": 1410,
														"indexExpression": {
															"hexValue": "30",
															"id": 1409,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1594:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1559:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "1519:77:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1461:135:10"
											},
											{
												"expression": {
													"id": 1420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1413,
														"name": "arithmeticMeanTick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1344,
														"src": "1607:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1416,
																	"name": "tickCumulativesDelta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1394,
																	"src": "1634:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1417,
																	"name": "secondsAgo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1341,
																	"src": "1657:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "1634:33:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															],
															"id": 1415,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1628:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int24_$",
																"typeString": "type(int24)"
															},
															"typeName": {
																"id": 1414,
																"name": "int24",
																"nodeType": "ElementaryTypeName",
																"src": "1628:5:10",
																"typeDescriptions": {}
															}
														},
														"id": 1419,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1628:40:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "1607:61:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1421,
												"nodeType": "ExpressionStatement",
												"src": "1607:61:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"id": 1424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1422,
															"name": "tickCumulativesDelta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1394,
															"src": "1727:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1423,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1750:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1727:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	},
																	"id": 1427,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1425,
																		"name": "tickCumulativesDelta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1394,
																		"src": "1756:20:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int56",
																			"typeString": "int56"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1426,
																		"name": "secondsAgo",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1341,
																		"src": "1779:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	"src": "1756:33:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1756:38:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1430,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1755:40:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1727:68:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1435,
												"nodeType": "IfStatement",
												"src": "1723:94:10",
												"trueBody": {
													"expression": {
														"id": 1433,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": false,
														"src": "1797:20:10",
														"subExpression": {
															"id": 1432,
															"name": "arithmeticMeanTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1344,
															"src": "1797:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 1434,
													"nodeType": "ExpressionStatement",
													"src": "1797:20:10"
												}
											},
											{
												"assignments": [
													1437
												],
												"declarations": [
													{
														"constant": false,
														"id": 1437,
														"mutability": "mutable",
														"name": "secondsAgoX160",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "1945:22:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint192",
															"typeString": "uint192"
														},
														"typeName": {
															"id": 1436,
															"name": "uint192",
															"nodeType": "ElementaryTypeName",
															"src": "1945:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1448,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint192",
														"typeString": "uint192"
													},
													"id": 1447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1440,
																"name": "secondsAgo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1341,
																"src": "1978:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															],
															"id": 1439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1970:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint192_$",
																"typeString": "type(uint192)"
															},
															"typeName": {
																"id": 1438,
																"name": "uint192",
																"nodeType": "ElementaryTypeName",
																"src": "1970:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1970:19:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint192",
															"typeString": "uint192"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1444,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1997:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 1443,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "1997:7:10",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	}
																],
																"id": 1442,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1992:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1445,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1992:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint160",
																"typeString": "type(uint160)"
															}
														},
														"id": 1446,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "1992:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "1970:39:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint192",
														"typeString": "uint192"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1945:64:10"
											},
											{
												"expression": {
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1449,
														"name": "harmonicMeanLiquidity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1346,
														"src": "2019:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																},
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1452,
																	"name": "secondsAgoX160",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1437,
																	"src": "2051:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint192",
																		"typeString": "uint192"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			},
																			"id": 1458,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 1455,
																						"name": "secondsPerLiquidityCumulativesDelta",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1404,
																						"src": "2077:35:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					],
																					"id": 1454,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2069:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint192_$",
																						"typeString": "type(uint192)"
																					},
																					"typeName": {
																						"id": 1453,
																						"name": "uint192",
																						"nodeType": "ElementaryTypeName",
																						"src": "2069:7:10",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1456,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2069:44:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint192",
																					"typeString": "uint192"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<<",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1457,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2117:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "2069:50:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			}
																		}
																	],
																	"id": 1459,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2068:52:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint192",
																		"typeString": "uint192"
																	}
																},
																"src": "2051:69:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															],
															"id": 1451,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2043:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint128_$",
																"typeString": "type(uint128)"
															},
															"typeName": {
																"id": 1450,
																"name": "uint128",
																"nodeType": "ElementaryTypeName",
																"src": "2043:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1461,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2043:78:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "2019:102:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"id": 1463,
												"nodeType": "ExpressionStatement",
												"src": "2019:102:10"
											}
										]
									},
									"documentation": {
										"id": 1337,
										"nodeType": "StructuredDocumentation",
										"src": "396:500:10",
										"text": "@notice Calculates time-weighted means of tick and liquidity for a given PancakeSwap V3 pool\n @param pool Address of the pool that we want to observe\n @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp"
									},
									"id": 1465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "consult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1339,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "918:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "918:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1341,
												"mutability": "mutable",
												"name": "secondsAgo",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "932:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1340,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "932:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "917:33:10"
									},
									"returnParameters": {
										"id": 1347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1344,
												"mutability": "mutable",
												"name": "arithmeticMeanTick",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "998:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1343,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "998:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "harmonicMeanLiquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1024:29:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1345,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "997:57:10"
									},
									"scope": 1919,
									"src": "901:1227:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1562,
										"nodeType": "Block",
										"src": "2809:778:10",
										"statements": [
											{
												"assignments": [
													1480
												],
												"declarations": [
													{
														"constant": false,
														"id": 1480,
														"mutability": "mutable",
														"name": "sqrtRatioX96",
														"nodeType": "VariableDeclaration",
														"scope": 1562,
														"src": "2819:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1479,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "2819:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1485,
												"initialValue": {
													"arguments": [
														{
															"id": 1483,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1468,
															"src": "2870:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														],
														"expression": {
															"id": 1481,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1330,
															"src": "2842:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$1330_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 1482,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getSqrtRatioAtTick",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1190,
														"src": "2842:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
															"typeString": "function (int24) pure returns (uint160)"
														}
													},
													"id": 1484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2842:33:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2819:56:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1486,
														"name": "sqrtRatioX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1480,
														"src": "2994:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3015:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	},
																	"typeName": {
																		"id": 1488,
																		"name": "uint128",
																		"nodeType": "ElementaryTypeName",
																		"src": "3015:7:10",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	}
																],
																"id": 1487,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "3010:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1490,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3010:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint128",
																"typeString": "type(uint128)"
															}
														},
														"id": 1491,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "3010:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "2994:33:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1560,
													"nodeType": "Block",
													"src": "3300:281:10",
													"statements": [
														{
															"assignments": [
																1527
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1527,
																	"mutability": "mutable",
																	"name": "ratioX128",
																	"nodeType": "VariableDeclaration",
																	"scope": 1560,
																	"src": "3314:17:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1526,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3314:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1536,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1530,
																		"name": "sqrtRatioX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1480,
																		"src": "3350:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"id": 1531,
																		"name": "sqrtRatioX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1480,
																		"src": "3364:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		},
																		"id": 1534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "31",
																			"id": 1532,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3378:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<<",
																		"rightExpression": {
																			"hexValue": "3634",
																			"id": 1533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3383:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "3378:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		}
																	],
																	"expression": {
																		"id": 1528,
																		"name": "FullMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 795,
																		"src": "3334:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FullMath_$795_$",
																			"typeString": "type(library FullMath)"
																		}
																	},
																	"id": 1529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mulDiv",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 751,
																	"src": "3334:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3334:52:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3314:72:10"
														},
														{
															"expression": {
																"id": 1558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1537,
																	"name": "quoteAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1477,
																	"src": "3400:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1538,
																			"name": "baseToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1472,
																			"src": "3414:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1539,
																			"name": "quoteToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1474,
																			"src": "3426:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "3414:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				"id": 1553,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1551,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3538:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313238",
																					"id": 1552,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3543:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_128_by_1",
																						"typeString": "int_const 128"
																					},
																					"value": "128"
																				},
																				"src": "3538:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			},
																			{
																				"id": 1554,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1470,
																				"src": "3548:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"id": 1555,
																				"name": "ratioX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1527,
																				"src": "3560:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1549,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 795,
																				"src": "3522:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$795_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1550,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 751,
																			"src": "3522:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3522:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1557,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3414:156:10",
																	"trueExpression": {
																		"arguments": [
																			{
																				"id": 1543,
																				"name": "ratioX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1527,
																				"src": "3471:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1544,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1470,
																				"src": "3482:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				"id": 1547,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1545,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3494:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313238",
																					"id": 1546,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3499:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_128_by_1",
																						"typeString": "int_const 128"
																					},
																					"value": "128"
																				},
																				"src": "3494:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			],
																			"expression": {
																				"id": 1541,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 795,
																				"src": "3455:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$795_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1542,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 751,
																			"src": "3455:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1548,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3455:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3400:170:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1559,
															"nodeType": "ExpressionStatement",
															"src": "3400:170:10"
														}
													]
												},
												"id": 1561,
												"nodeType": "IfStatement",
												"src": "2990:591:10",
												"trueBody": {
													"id": 1525,
													"nodeType": "Block",
													"src": "3029:265:10",
													"statements": [
														{
															"assignments": [
																1494
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1494,
																	"mutability": "mutable",
																	"name": "ratioX192",
																	"nodeType": "VariableDeclaration",
																	"scope": 1525,
																	"src": "3043:17:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1493,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3043:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1501,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1497,
																			"name": "sqrtRatioX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1480,
																			"src": "3071:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3063:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1495,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "3063:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3063:21:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1499,
																	"name": "sqrtRatioX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1480,
																	"src": "3087:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "3063:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3043:56:10"
														},
														{
															"expression": {
																"id": 1523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1502,
																	"name": "quoteAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1477,
																	"src": "3113:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1505,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1503,
																			"name": "baseToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1472,
																			"src": "3127:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1504,
																			"name": "quoteToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1474,
																			"src": "3139:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "3127:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				"id": 1518,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1516,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3251:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313932",
																					"id": 1517,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3256:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_192_by_1",
																						"typeString": "int_const 192"
																					},
																					"value": "192"
																				},
																				"src": "3251:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			},
																			{
																				"id": 1519,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1470,
																				"src": "3261:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"id": 1520,
																				"name": "ratioX192",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1494,
																				"src": "3273:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1514,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 795,
																				"src": "3235:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$795_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1515,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 751,
																			"src": "3235:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1521,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3235:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1522,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3127:156:10",
																	"trueExpression": {
																		"arguments": [
																			{
																				"id": 1508,
																				"name": "ratioX192",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1494,
																				"src": "3184:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1509,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1470,
																				"src": "3195:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				"id": 1512,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1510,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3207:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313932",
																					"id": 1511,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3212:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_192_by_1",
																						"typeString": "int_const 192"
																					},
																					"value": "192"
																				},
																				"src": "3207:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			],
																			"expression": {
																				"id": 1506,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 795,
																				"src": "3168:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$795_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 751,
																			"src": "3168:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3168:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3113:170:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1524,
															"nodeType": "ExpressionStatement",
															"src": "3113:170:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "2134:493:10",
										"text": "@notice Given a tick and a token amount, calculates the amount of token received in exchange\n @param tick Tick value used to calculate the quote\n @param baseAmount Amount of token to be converted\n @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n @return quoteAmount Amount of quoteToken received for baseAmount of baseToken"
									},
									"id": 1563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getQuoteAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "2665:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1467,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2665:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "baseAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "2685:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1469,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2685:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "baseToken",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "2713:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2713:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1474,
												"mutability": "mutable",
												"name": "quoteToken",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "2740:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2740:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:109:10"
									},
									"returnParameters": {
										"id": 1478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "quoteAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "2788:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2787:21:10"
									},
									"scope": 1919,
									"src": "2632:955:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1628,
										"nodeType": "Block",
										"src": "3963:684:10",
										"statements": [
											{
												"assignments": [
													null,
													null,
													1572,
													1574,
													null,
													null,
													null
												],
												"declarations": [
													null,
													null,
													{
														"constant": false,
														"id": 1572,
														"mutability": "mutable",
														"name": "observationIndex",
														"nodeType": "VariableDeclaration",
														"scope": 1628,
														"src": "3978:23:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1571,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "3978:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1574,
														"mutability": "mutable",
														"name": "observationCardinality",
														"nodeType": "VariableDeclaration",
														"scope": 1628,
														"src": "4003:29:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1573,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "4003:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null
												],
												"id": 1580,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 1576,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1566,
																	"src": "4057:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1575,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "4042:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 1577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4042:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 1578,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "4042:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint32,bool)"
														}
													},
													"id": 1579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4042:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint32,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3973:97:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1584,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1582,
																"name": "observationCardinality",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1574,
																"src": "4088:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1583,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4113:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4088:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e49",
															"id": 1585,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4116:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e817963341ac54b6c6630a42fcd594b50ae6e47bc5952aa5478cb70078a54ca0",
																"typeString": "literal_string \"NI\""
															},
															"value": "NI"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e817963341ac54b6c6630a42fcd594b50ae6e47bc5952aa5478cb70078a54ca0",
																"typeString": "literal_string \"NI\""
															}
														],
														"id": 1581,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4080:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4080:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1587,
												"nodeType": "ExpressionStatement",
												"src": "4080:41:10"
											},
											{
												"assignments": [
													1589,
													null,
													null,
													1591
												],
												"declarations": [
													{
														"constant": false,
														"id": 1589,
														"mutability": "mutable",
														"name": "observationTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1628,
														"src": "4133:27:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1588,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "4133:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													{
														"constant": false,
														"id": 1591,
														"mutability": "mutable",
														"name": "initialized",
														"nodeType": "VariableDeclaration",
														"scope": 1628,
														"src": "4166:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1590,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4166:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1603,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		},
																		"id": 1598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1596,
																			"name": "observationIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1572,
																			"src": "4233:16:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint16",
																				"typeString": "uint16"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4252:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "4233:20:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	}
																],
																"id": 1599,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4232:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1600,
																"name": "observationCardinality",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1574,
																"src": "4257:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"src": "4232:47:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1593,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1566,
																	"src": "4213:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1592,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "4198:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 1594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4198:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 1595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observations",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 621,
														"src": "4198:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
															"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
														}
													},
													"id": 1602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4198:82:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
														"typeString": "tuple(uint32,int56,uint160,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4132:148:10"
											},
											{
												"condition": {
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4465:12:10",
													"subExpression": {
														"id": 1604,
														"name": "initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1591,
														"src": "4466:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1617,
												"nodeType": "IfStatement",
												"src": "4461:110:10",
												"trueBody": {
													"id": 1616,
													"nodeType": "Block",
													"src": "4479:92:10",
													"statements": [
														{
															"expression": {
																"id": 1614,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"components": [
																		{
																			"id": 1606,
																			"name": "observationTimestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1589,
																			"src": "4494:20:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		},
																		null,
																		null,
																		null
																	],
																	"id": 1607,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "TupleExpression",
																	"src": "4493:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint32_$__$__$__$",
																		"typeString": "tuple(uint32,,,)"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1612,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4558:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1609,
																					"name": "pool",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1566,
																					"src": "4539:4:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1608,
																				"name": "IPancakeV3Pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 192,
																				"src": "4524:14:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																					"typeString": "type(contract IPancakeV3Pool)"
																				}
																			},
																			"id": 1610,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4524:20:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																				"typeString": "contract IPancakeV3Pool"
																			}
																		},
																		"id": 1611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "observations",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 621,
																		"src": "4524:33:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
																			"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
																		}
																	},
																	"id": 1613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4524:36:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
																		"typeString": "tuple(uint32,int56,uint160,bool)"
																	}
																},
																"src": "4493:67:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1615,
															"nodeType": "ExpressionStatement",
															"src": "4493:67:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1618,
														"name": "secondsAgo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1569,
														"src": "4581:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"id": 1625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1621,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4601:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "4601:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1620,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4594:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint32_$",
																	"typeString": "type(uint32)"
																},
																"typeName": {
																	"id": 1619,
																	"name": "uint32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4594:6:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1623,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4594:23:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 1624,
															"name": "observationTimestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1589,
															"src": "4620:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "4594:46:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "4581:59:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1627,
												"nodeType": "ExpressionStatement",
												"src": "4581:59:10"
											}
										]
									},
									"documentation": {
										"id": 1564,
										"nodeType": "StructuredDocumentation",
										"src": "3593:269:10",
										"text": "@notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n @param pool Address of PancakeSwap V3 pool that we want to observe\n @return secondsAgo The number of seconds ago of the oldest observation stored for the pool"
									},
									"id": 1629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getOldestObservationSecondsAgo",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1566,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "3907:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3907:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3906:14:10"
									},
									"returnParameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "secondsAgo",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "3944:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1568,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "3944:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3943:19:10"
									},
									"scope": 1919,
									"src": "3867:780:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1771,
										"nodeType": "Block",
										"src": "4972:1676:10",
										"statements": [
											{
												"assignments": [
													null,
													1640,
													1642,
													1644,
													null,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 1640,
														"mutability": "mutable",
														"name": "tick",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "4985:10:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1639,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "4985:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1642,
														"mutability": "mutable",
														"name": "observationIndex",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "4997:23:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1641,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "4997:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1644,
														"mutability": "mutable",
														"name": "observationCardinality",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "5022:29:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1643,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "5022:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null
												],
												"id": 1650,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 1646,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "5076:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1645,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "5061:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 1647,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5061:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 1648,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "5061:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint32,bool)"
														}
													},
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5061:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint32,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4982:107:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1654,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1652,
																"name": "observationCardinality",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1644,
																"src": "5191:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "31",
																"id": 1653,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5216:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "5191:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e454f",
															"id": 1655,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5219:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6dc5790d7c4bfaaa2e4f8e2cd517bacd4a3831f85c0964e56f2743cbb847bc46",
																"typeString": "literal_string \"NEO\""
															},
															"value": "NEO"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6dc5790d7c4bfaaa2e4f8e2cd517bacd4a3831f85c0964e56f2743cbb847bc46",
																"typeString": "literal_string \"NEO\""
															}
														],
														"id": 1651,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5183:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5183:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1657,
												"nodeType": "ExpressionStatement",
												"src": "5183:42:10"
											},
											{
												"assignments": [
													1659,
													1661,
													1663,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1659,
														"mutability": "mutable",
														"name": "observationTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "5543:27:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1658,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "5543:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1661,
														"mutability": "mutable",
														"name": "tickCumulative",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "5572:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"typeName": {
															"id": 1660,
															"name": "int56",
															"nodeType": "ElementaryTypeName",
															"src": "5572:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1663,
														"mutability": "mutable",
														"name": "secondsPerLiquidityCumulativeX128",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "5594:41:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1662,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "5594:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1670,
												"initialValue": {
													"arguments": [
														{
															"id": 1668,
															"name": "observationIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1642,
															"src": "5687:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1665,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "5668:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1664,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "5653:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 1666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5653:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 1667,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observations",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 621,
														"src": "5653:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
															"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
														}
													},
													"id": 1669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5653:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
														"typeString": "tuple(uint32,int56,uint160,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5542:162:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													},
													"id": 1677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1671,
														"name": "observationTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1659,
														"src": "5718:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1674,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "5749:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1675,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "5749:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1673,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5742:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint32_$",
																"typeString": "type(uint32)"
															},
															"typeName": {
																"id": 1672,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "5742:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 1676,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5742:23:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "5718:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1687,
												"nodeType": "IfStatement",
												"src": "5714:125:10",
												"trueBody": {
													"id": 1686,
													"nodeType": "Block",
													"src": "5767:72:10",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"id": 1678,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1640,
																		"src": "5789:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"id": 1680,
																						"name": "pool",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1632,
																						"src": "5810:4:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 1679,
																					"name": "IPancakeV3Pool",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 192,
																					"src": "5795:14:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																						"typeString": "type(contract IPancakeV3Pool)"
																					}
																				},
																				"id": 1681,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5795:20:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																					"typeString": "contract IPancakeV3Pool"
																				}
																			},
																			"id": 1682,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "liquidity",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 561,
																			"src": "5795:30:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint128_$",
																				"typeString": "function () view external returns (uint128)"
																			}
																		},
																		"id": 1683,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5795:32:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	}
																],
																"id": 1684,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5788:40:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_int24_$_t_uint128_$",
																	"typeString": "tuple(int24,uint128)"
																}
															},
															"functionReturnParameters": 1638,
															"id": 1685,
															"nodeType": "Return",
															"src": "5781:47:10"
														}
													]
												}
											},
											{
												"assignments": [
													1689
												],
												"declarations": [
													{
														"constant": false,
														"id": 1689,
														"mutability": "mutable",
														"name": "prevIndex",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "5849:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1688,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5849:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1701,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1697,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1695,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1692,
																				"name": "observationIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1642,
																				"src": "5878:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			],
																			"id": 1691,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5870:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1690,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "5870:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1693,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5870:25:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1694,
																		"name": "observationCardinality",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1644,
																		"src": "5898:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	},
																	"src": "5870:50:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1696,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5923:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "5870:54:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1698,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5869:56:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1699,
														"name": "observationCardinality",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1644,
														"src": "5928:22:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "5869:81:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5849:101:10"
											},
											{
												"assignments": [
													1703,
													1705,
													1707,
													1709
												],
												"declarations": [
													{
														"constant": false,
														"id": 1703,
														"mutability": "mutable",
														"name": "prevObservationTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "5974:31:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1702,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "5974:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1705,
														"mutability": "mutable",
														"name": "prevTickCumulative",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "6019:24:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"typeName": {
															"id": 1704,
															"name": "int56",
															"nodeType": "ElementaryTypeName",
															"src": "6019:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1707,
														"mutability": "mutable",
														"name": "prevSecondsPerLiquidityCumulativeX128",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "6057:45:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1706,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "6057:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1709,
														"mutability": "mutable",
														"name": "prevInitialized",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "6116:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1708,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6116:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1716,
												"initialValue": {
													"arguments": [
														{
															"id": 1714,
															"name": "prevIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1689,
															"src": "6183:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1711,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "6164:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1710,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "6149:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 1712,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6149:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 1713,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observations",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 621,
														"src": "6149:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
															"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
														}
													},
													"id": 1715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6149:44:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
														"typeString": "tuple(uint32,int56,uint160,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5960:233:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1718,
															"name": "prevInitialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1709,
															"src": "6212:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f4e49",
															"id": 1719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6229:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4375a34c158c497e1dec923d39179cd2bff1d358f7876b16ed4f850d3b707895",
																"typeString": "literal_string \"ONI\""
															},
															"value": "ONI"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4375a34c158c497e1dec923d39179cd2bff1d358f7876b16ed4f850d3b707895",
																"typeString": "literal_string \"ONI\""
															}
														],
														"id": 1717,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6204:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6204:31:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1721,
												"nodeType": "ExpressionStatement",
												"src": "6204:31:10"
											},
											{
												"assignments": [
													1723
												],
												"declarations": [
													{
														"constant": false,
														"id": 1723,
														"mutability": "mutable",
														"name": "delta",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "6246:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1722,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "6246:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1727,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													},
													"id": 1726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1724,
														"name": "observationTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1659,
														"src": "6261:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1725,
														"name": "prevObservationTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1703,
														"src": "6284:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "6261:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6246:62:10"
											},
											{
												"expression": {
													"id": 1738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1728,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1640,
														"src": "6318:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1736,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int56",
																				"typeString": "int56"
																			},
																			"id": 1733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1731,
																				"name": "tickCumulative",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1661,
																				"src": "6332:14:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1732,
																				"name": "prevTickCumulative",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1705,
																				"src": "6349:18:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"src": "6332:35:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int56",
																				"typeString": "int56"
																			}
																		}
																	],
																	"id": 1734,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6331:37:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1735,
																	"name": "delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1723,
																	"src": "6371:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "6331:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															],
															"id": 1730,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6325:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int24_$",
																"typeString": "type(int24)"
															},
															"typeName": {
																"id": 1729,
																"name": "int24",
																"nodeType": "ElementaryTypeName",
																"src": "6325:5:10",
																"typeDescriptions": {}
															}
														},
														"id": 1737,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6325:52:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "6318:59:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1739,
												"nodeType": "ExpressionStatement",
												"src": "6318:59:10"
											},
											{
												"assignments": [
													1741
												],
												"declarations": [
													{
														"constant": false,
														"id": 1741,
														"mutability": "mutable",
														"name": "liquidity",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "6387:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 1740,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "6387:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1766,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															},
															"id": 1764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		},
																		"id": 1753,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 1746,
																					"name": "delta",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1723,
																					"src": "6453:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint32",
																						"typeString": "uint32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint32",
																						"typeString": "uint32"
																					}
																				],
																				"id": 1745,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6445:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint192_$",
																					"typeString": "type(uint192)"
																				},
																				"typeName": {
																					"id": 1744,
																					"name": "uint192",
																					"nodeType": "ElementaryTypeName",
																					"src": "6445:7:10",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6445:14:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 1750,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "6467:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint160_$",
																							"typeString": "type(uint160)"
																						},
																						"typeName": {
																							"id": 1749,
																							"name": "uint160",
																							"nodeType": "ElementaryTypeName",
																							"src": "6467:7:10",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint160_$",
																							"typeString": "type(uint160)"
																						}
																					],
																					"id": 1748,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "6462:4:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 1751,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6462:13:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint160",
																					"typeString": "type(uint160)"
																				}
																			},
																			"id": 1752,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "6462:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "6445:34:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		}
																	}
																],
																"id": 1754,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6444:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		},
																		"id": 1762,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					},
																					"id": 1759,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1757,
																						"name": "secondsPerLiquidityCumulativeX128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1663,
																						"src": "6512:33:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"id": 1758,
																						"name": "prevSecondsPerLiquidityCumulativeX128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1707,
																						"src": "6548:37:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"src": "6512:73:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				],
																				"id": 1756,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6504:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint192_$",
																					"typeString": "type(uint192)"
																				},
																				"typeName": {
																					"id": 1755,
																					"name": "uint192",
																					"nodeType": "ElementaryTypeName",
																					"src": "6504:7:10",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1760,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6504:82:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<<",
																		"rightExpression": {
																			"hexValue": "3332",
																			"id": 1761,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6590:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "6504:88:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		}
																	}
																],
																"id": 1763,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6503:90:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															},
															"src": "6444:149:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															}
														],
														"id": 1743,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "6419:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint128_$",
															"typeString": "type(uint128)"
														},
														"typeName": {
															"id": 1742,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "6419:7:10",
															"typeDescriptions": {}
														}
													},
													"id": 1765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6419:188:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6387:220:10"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1767,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1640,
															"src": "6625:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"id": 1768,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1741,
															"src": "6631:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"id": 1769,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6624:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int24_$_t_uint128_$",
														"typeString": "tuple(int24,uint128)"
													}
												},
												"functionReturnParameters": 1638,
												"id": 1770,
												"nodeType": "Return",
												"src": "6617:24:10"
											}
										]
									},
									"documentation": {
										"id": 1630,
										"nodeType": "StructuredDocumentation",
										"src": "4653:219:10",
										"text": "@notice Given a pool, it returns the tick value as of the start of the current block\n @param pool Address of PancakeSwap V3 pool\n @return The tick that the pool was in at the start of the current block"
									},
									"id": 1772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBlockStartingTickAndLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "4919:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1631,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4919:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4918:14:10"
									},
									"returnParameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "4956:5:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1634,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4956:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "4963:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1636,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4963:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4955:16:10"
									},
									"scope": 1919,
									"src": "4877:1771:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "OracleLibrary.WeightedTickData",
									"id": 1777,
									"members": [
										{
											"constant": false,
											"id": 1774,
											"mutability": "mutable",
											"name": "tick",
											"nodeType": "VariableDeclaration",
											"scope": 1777,
											"src": "6764:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1773,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "6764:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1776,
											"mutability": "mutable",
											"name": "weight",
											"nodeType": "VariableDeclaration",
											"scope": 1777,
											"src": "6784:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1775,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6784:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "WeightedTickData",
									"nodeType": "StructDefinition",
									"scope": 1919,
									"src": "6730:75:10",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1855,
										"nodeType": "Block",
										"src": "7562:725:10",
										"statements": [
											{
												"assignments": [
													1787
												],
												"declarations": [
													{
														"constant": false,
														"id": 1787,
														"mutability": "mutable",
														"name": "numerator",
														"nodeType": "VariableDeclaration",
														"scope": 1855,
														"src": "7648:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1786,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "7648:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1788,
												"nodeType": "VariableDeclarationStatement",
												"src": "7648:16:10"
											},
											{
												"assignments": [
													1790
												],
												"declarations": [
													{
														"constant": false,
														"id": 1790,
														"mutability": "mutable",
														"name": "denominator",
														"nodeType": "VariableDeclaration",
														"scope": 1855,
														"src": "7721:19:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1789,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7721:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1791,
												"nodeType": "VariableDeclarationStatement",
												"src": "7721:19:10"
											},
											{
												"body": {
													"id": 1824,
													"nodeType": "Block",
													"src": "7905:154:10",
													"statements": [
														{
															"expression": {
																"id": 1815,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1802,
																	"name": "numerator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1787,
																	"src": "7919:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	},
																	"id": 1814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1803,
																				"name": "weightedTickData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1781,
																				"src": "7932:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1777_memory_ptr_$dyn_memory_ptr",
																					"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
																				}
																			},
																			"id": 1805,
																			"indexExpression": {
																				"id": 1804,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1793,
																				"src": "7949:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7932:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_WeightedTickData_$1777_memory_ptr",
																				"typeString": "struct OracleLibrary.WeightedTickData memory"
																			}
																		},
																		"id": 1806,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "tick",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1774,
																		"src": "7932:24:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"arguments": [
																			{
																				"expression": {
																					"baseExpression": {
																						"id": 1809,
																						"name": "weightedTickData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1781,
																						"src": "7966:16:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1777_memory_ptr_$dyn_memory_ptr",
																							"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
																						}
																					},
																					"id": 1811,
																					"indexExpression": {
																						"id": 1810,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1793,
																						"src": "7983:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "7966:19:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WeightedTickData_$1777_memory_ptr",
																						"typeString": "struct OracleLibrary.WeightedTickData memory"
																					}
																				},
																				"id": 1812,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "weight",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1776,
																				"src": "7966:26:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 1808,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7959:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_int256_$",
																				"typeString": "type(int256)"
																			},
																			"typeName": {
																				"id": 1807,
																				"name": "int256",
																				"nodeType": "ElementaryTypeName",
																				"src": "7959:6:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1813,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7959:34:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"src": "7932:61:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "7919:74:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"id": 1816,
															"nodeType": "ExpressionStatement",
															"src": "7919:74:10"
														},
														{
															"expression": {
																"id": 1822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1817,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1790,
																	"src": "8007:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1818,
																			"name": "weightedTickData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1781,
																			"src": "8022:16:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1777_memory_ptr_$dyn_memory_ptr",
																				"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
																			}
																		},
																		"id": 1820,
																		"indexExpression": {
																			"id": 1819,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1793,
																			"src": "8039:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8022:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_WeightedTickData_$1777_memory_ptr",
																			"typeString": "struct OracleLibrary.WeightedTickData memory"
																		}
																	},
																	"id": 1821,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "weight",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1776,
																	"src": "8022:26:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "8007:41:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1823,
															"nodeType": "ExpressionStatement",
															"src": "8007:41:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1795,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1793,
														"src": "7871:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1796,
															"name": "weightedTickData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1781,
															"src": "7875:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1777_memory_ptr_$dyn_memory_ptr",
																"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
															}
														},
														"id": 1797,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7875:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7871:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1825,
												"initializationExpression": {
													"assignments": [
														1793
													],
													"declarations": [
														{
															"constant": false,
															"id": 1793,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1825,
															"src": "7860:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1792,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7860:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1794,
													"nodeType": "VariableDeclarationStatement",
													"src": "7860:9:10"
												},
												"loopExpression": {
													"expression": {
														"id": 1800,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "7900:3:10",
														"subExpression": {
															"id": 1799,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1793,
															"src": "7900:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1801,
													"nodeType": "ExpressionStatement",
													"src": "7900:3:10"
												},
												"nodeType": "ForStatement",
												"src": "7855:204:10"
											},
											{
												"expression": {
													"id": 1836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1826,
														"name": "weightedArithmeticMeanTick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1784,
														"src": "8069:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1829,
																	"name": "numerator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1787,
																	"src": "8104:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 1832,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1790,
																			"src": "8123:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1831,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8116:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1830,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8116:6:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1833,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8116:19:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "8104:31:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1828,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8098:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int24_$",
																"typeString": "type(int24)"
															},
															"typeName": {
																"id": 1827,
																"name": "int24",
																"nodeType": "ElementaryTypeName",
																"src": "8098:5:10",
																"typeDescriptions": {}
															}
														},
														"id": 1835,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8098:38:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8069:67:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1837,
												"nodeType": "ExpressionStatement",
												"src": "8069:67:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1840,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1838,
															"name": "numerator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1787,
															"src": "8195:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8207:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8195:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	},
																	"id": 1846,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1841,
																		"name": "numerator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1787,
																		"src": "8213:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 1844,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1790,
																				"src": "8232:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1843,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8225:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_int256_$",
																				"typeString": "type(int256)"
																			},
																			"typeName": {
																				"id": 1842,
																				"name": "int256",
																				"nodeType": "ElementaryTypeName",
																				"src": "8225:6:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1845,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8225:19:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"src": "8213:31:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1847,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8248:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8213:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1849,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8212:38:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8195:55:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1854,
												"nodeType": "IfStatement",
												"src": "8191:89:10",
												"trueBody": {
													"expression": {
														"id": 1852,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": false,
														"src": "8252:28:10",
														"subExpression": {
															"id": 1851,
															"name": "weightedArithmeticMeanTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1784,
															"src": "8252:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 1853,
													"nodeType": "ExpressionStatement",
													"src": "8252:28:10"
												}
											}
										]
									},
									"documentation": {
										"id": 1778,
										"nodeType": "StructuredDocumentation",
										"src": "6811:578:10",
										"text": "@notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n @param weightedTickData An array of ticks and weights\n @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price."
									},
									"id": 1856,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getWeightedArithmeticMeanTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1781,
												"mutability": "mutable",
												"name": "weightedTickData",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "7433:42:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1777_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct OracleLibrary.WeightedTickData[]"
												},
												"typeName": {
													"baseType": {
														"id": 1779,
														"name": "WeightedTickData",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 1777,
														"src": "7433:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_WeightedTickData_$1777_storage_ptr",
															"typeString": "struct OracleLibrary.WeightedTickData"
														}
													},
													"id": 1780,
													"nodeType": "ArrayTypeName",
													"src": "7433:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1777_storage_$dyn_storage_ptr",
														"typeString": "struct OracleLibrary.WeightedTickData[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7432:44:10"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "weightedArithmeticMeanTick",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "7524:32:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1783,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7524:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7523:34:10"
									},
									"scope": 1919,
									"src": "7394:893:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1917,
										"nodeType": "Block",
										"src": "8952:409:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1872,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1869,
																		"name": "tokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1860,
																		"src": "8970:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																			"typeString": "address[] memory"
																		}
																	},
																	"id": 1870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "8970:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1871,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8986:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8970:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1873,
																	"name": "ticks",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1863,
																	"src": "8991:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																		"typeString": "int24[] memory"
																	}
																},
																"id": 1874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "8991:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8970:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "444c",
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9005:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f6c9155cb7d5666d109a64d0e580ecac0cec91dae3b0325b400a4ad4d41fbcb9",
																"typeString": "literal_string \"DL\""
															},
															"value": "DL"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f6c9155cb7d5666d109a64d0e580ecac0cec91dae3b0325b400a4ad4d41fbcb9",
																"typeString": "literal_string \"DL\""
															}
														],
														"id": 1868,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8962:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8962:48:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1878,
												"nodeType": "ExpressionStatement",
												"src": "8962:48:10"
											},
											{
												"body": {
													"id": 1915,
													"nodeType": "Block",
													"src": "9064:291:10",
													"statements": [
														{
															"expression": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1898,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"baseExpression": {
																			"id": 1890,
																			"name": "tokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1860,
																			"src": "9255:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 1894,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1893,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1891,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1880,
																				"src": "9262:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1892,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9266:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "9262:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9255:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"baseExpression": {
																			"id": 1895,
																			"name": "tokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1860,
																			"src": "9271:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 1897,
																		"indexExpression": {
																			"id": 1896,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1880,
																			"src": "9278:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9271:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "9255:25:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"id": 1912,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1906,
																		"name": "syntheticTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1866,
																		"src": "9315:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "-=",
																	"rightHandSide": {
																		"baseExpression": {
																			"id": 1907,
																			"name": "ticks",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1863,
																			"src": "9332:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																				"typeString": "int24[] memory"
																			}
																		},
																		"id": 1911,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1910,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1908,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1880,
																				"src": "9338:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1909,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9342:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "9338:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9332:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"src": "9315:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 1913,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9255:89:10",
																"trueExpression": {
																	"id": 1905,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1899,
																		"name": "syntheticTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1866,
																		"src": "9283:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "+=",
																	"rightHandSide": {
																		"baseExpression": {
																			"id": 1900,
																			"name": "ticks",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1863,
																			"src": "9300:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																				"typeString": "int24[] memory"
																			}
																		},
																		"id": 1904,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1903,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1901,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1880,
																				"src": "9306:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1902,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9310:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "9306:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9300:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"src": "9283:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"id": 1914,
															"nodeType": "ExpressionStatement",
															"src": "9255:89:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1883,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1880,
														"src": "9040:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 1884,
															"name": "ticks",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1863,
															"src": "9045:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																"typeString": "int24[] memory"
															}
														},
														"id": 1885,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "9045:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9040:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1916,
												"initializationExpression": {
													"assignments": [
														1880
													],
													"declarations": [
														{
															"constant": false,
															"id": 1880,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1916,
															"src": "9025:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1879,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "9025:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1882,
													"initialValue": {
														"hexValue": "31",
														"id": 1881,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9037:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "9025:13:10"
												},
												"loopExpression": {
													"expression": {
														"id": 1888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "9059:3:10",
														"subExpression": {
															"id": 1887,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1880,
															"src": "9059:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1889,
													"nodeType": "ExpressionStatement",
													"src": "9059:3:10"
												},
												"nodeType": "ForStatement",
												"src": "9020:335:10"
											}
										]
									},
									"documentation": {
										"id": 1857,
										"nodeType": "StructuredDocumentation",
										"src": "8293:509:10",
										"text": "@notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n @dev Useful for calculating relative prices along routes.\n @dev There must be one tick for each pairwise set of tokens.\n @param tokens The token contract addresses\n @param ticks The ticks, representing the price of each token pair in `tokens`\n @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`"
									},
									"id": 1918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getChainedPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "8832:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1858,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8832:7:10",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1859,
													"nodeType": "ArrayTypeName",
													"src": "8832:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1863,
												"mutability": "mutable",
												"name": "ticks",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "8857:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
													"typeString": "int24[]"
												},
												"typeName": {
													"baseType": {
														"id": 1861,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "8857:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 1862,
													"nodeType": "ArrayTypeName",
													"src": "8857:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int24_$dyn_storage_ptr",
														"typeString": "int24[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8831:47:10"
									},
									"returnParameters": {
										"id": 1867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "syntheticTick",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "8926:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1865,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8926:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8925:22:10"
									},
									"scope": 1919,
									"src": "8807:554:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1920,
							"src": "368:8995:10"
						}
					],
					"src": "45:9319:10"
				},
				"id": 10
			},
			"contracts/BNBPrice.sol": {
				"ast": {
					"absolutePath": "contracts/BNBPrice.sol",
					"exportedSymbols": {
						"BNBPrice": [
							2382
						],
						"FullMath": [
							795
						],
						"IPancakeV3Factory": [
							170
						],
						"IPancakeV3Pool": [
							192
						],
						"IPancakeV3PoolActions": [
							288
						],
						"IPancakeV3PoolDerivedState": [
							319
						],
						"IPancakeV3PoolEvents": [
							442
						],
						"IPancakeV3PoolImmutables": [
							482
						],
						"IPancakeV3PoolOwnerActions": [
							514
						],
						"IPancakeV3PoolState": [
							622
						],
						"OracleLibrary": [
							1919
						],
						"TickMath": [
							1330
						]
					},
					"id": 2383,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1921,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:11"
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol",
							"file": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Factory.sol",
							"id": 1922,
							"nodeType": "ImportDirective",
							"scope": 2383,
							"sourceUnit": 171,
							"src": "60:73:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol",
							"file": "@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol",
							"id": 1923,
							"nodeType": "ImportDirective",
							"scope": 2383,
							"sourceUnit": 193,
							"src": "135:70:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol",
							"file": "@pancakeswap/v3-periphery/contracts/libraries/OracleLibrary.sol",
							"id": 1924,
							"nodeType": "ImportDirective",
							"scope": 2383,
							"sourceUnit": 1920,
							"src": "207:73:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2382,
							"linearizedBaseContracts": [
								2382
							],
							"name": "BNBPrice",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "4d899b32",
									"id": 1926,
									"mutability": "mutable",
									"name": "lastPriceStatic",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "308:27:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1925,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "308:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "49a876e4",
									"id": 1928,
									"mutability": "mutable",
									"name": "bnb",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "342:18:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1927,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "342:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d63a6ccd",
									"id": 1930,
									"mutability": "mutable",
									"name": "usd",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "367:18:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1929,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "367:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 1932,
									"mutability": "mutable",
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "392:28:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 1931,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "392:15:11",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "6d201e8b",
									"id": 1935,
									"mutability": "mutable",
									"name": "poolsUSD",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "427:25:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 1933,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "427:7:11",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 1934,
										"nodeType": "ArrayTypeName",
										"src": "427:9:11",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "14b085a4",
									"id": 1939,
									"mutability": "mutable",
									"name": "eqMode",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "459:40:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1938,
										"keyType": {
											"id": 1936,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "468:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "459:26:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 1937,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "479:4:11",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f5a6ba2e",
									"id": 1943,
									"mutability": "mutable",
									"name": "lastPrice",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "545:44:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1942,
										"keyType": {
											"id": 1940,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "553:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "545:27:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1941,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "564:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1945,
									"mutability": "mutable",
									"name": "tax",
									"nodeType": "VariableDeclaration",
									"scope": 2382,
									"src": "596:17:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1944,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "596:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"id": 1951,
									"name": "callAverage",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1947,
												"indexed": false,
												"mutability": "mutable",
												"name": "caller",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "655:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1949,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickPrice",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "672:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1948,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "672:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:33:11"
									},
									"src": "637:51:11"
								},
								{
									"body": {
										"id": 1974,
										"nodeType": "Block",
										"src": "711:200:11",
										"statements": [
											{
												"expression": {
													"id": 1960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1954,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1932,
														"src": "722:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1957,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "738:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "738:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															],
															"id": 1956,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "730:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 1955,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "730:8:11",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "730:19:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "722:27:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 1961,
												"nodeType": "ExpressionStatement",
												"src": "722:27:11"
											},
											{
												"expression": {
													"id": 1964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1962,
														"name": "bnb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1928,
														"src": "760:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "307862623443644239434264333642303162443163426145424632446530386439313733626330393563",
														"id": 1963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "766:42:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														},
														"value": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
													},
													"src": "760:48:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1965,
												"nodeType": "ExpressionStatement",
												"src": "760:48:11"
											},
											{
												"expression": {
													"id": 1968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1966,
														"name": "usd",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1930,
														"src": "819:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "307835356433393833323666393930353966463737353438353234363939393032374233313937393535",
														"id": 1967,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "825:42:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														},
														"value": "0x55d398326f99059fF775485246999027B3197955"
													},
													"src": "819:48:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1969,
												"nodeType": "ExpressionStatement",
												"src": "819:48:11"
											},
											{
												"expression": {
													"id": 1972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1970,
														"name": "tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1945,
														"src": "878:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1971,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "884:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "878:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1973,
												"nodeType": "ExpressionStatement",
												"src": "878:7:11"
											}
										]
									},
									"id": 1975,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "709:2:11"
									},
									"returnParameters": {
										"id": 1953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "711:0:11"
									},
									"scope": 2382,
									"src": "698:213:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1985,
										"nodeType": "Block",
										"src": "937:59:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															"id": 1981,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1978,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "956:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "956:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1980,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1932,
																"src": "970:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "956:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1977,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "948:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "948:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1983,
												"nodeType": "ExpressionStatement",
												"src": "948:28:11"
											},
											{
												"id": 1984,
												"nodeType": "PlaceholderStatement",
												"src": "987:1:11"
											}
										]
									},
									"id": 1986,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1976,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "937:0:11"
									},
									"src": "919:77:11",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2022,
										"nodeType": "Block",
										"src": "1137:222:11",
										"statements": [
											{
												"assignments": [
													1996
												],
												"declarations": [
													{
														"constant": false,
														"id": 1996,
														"mutability": "mutable",
														"name": "pool",
														"nodeType": "VariableDeclaration",
														"scope": 2022,
														"src": "1148:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1995,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1148:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2005,
												"initialValue": {
													"arguments": [
														{
															"id": 2001,
															"name": "usd",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1930,
															"src": "1213:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2002,
															"name": "bnb",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1928,
															"src": "1231:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2003,
															"name": "_fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1990,
															"src": "1249:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1998,
																	"name": "_factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1988,
																	"src": "1181:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1997,
																"name": "IPancakeV3Factory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 170,
																"src": "1163:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Factory_$170_$",
																	"typeString": "type(contract IPancakeV3Factory)"
																}
															},
															"id": 1999,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1163:27:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Factory_$170",
																"typeString": "contract IPancakeV3Factory"
															}
														},
														"id": 2000,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 89,
														"src": "1163:35:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
															"typeString": "function (address,address,uint24) view external returns (address)"
														}
													},
													"id": 2004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1163:101:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1148:116:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2007,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1996,
																"src": "1283:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2010,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1299:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2009,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1291:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2008,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1291:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2011,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1291:10:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1283:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506f6f6c204e6f7420466f756e64",
															"id": 2013,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1304:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b5499acbd570184c96a2320a8cf01c53b87fb534c4ca9a2129fad7646c060773",
																"typeString": "literal_string \"Pool Not Found\""
															},
															"value": "Pool Not Found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b5499acbd570184c96a2320a8cf01c53b87fb534c4ca9a2129fad7646c060773",
																"typeString": "literal_string \"Pool Not Found\""
															}
														],
														"id": 2006,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1275:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1275:46:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2015,
												"nodeType": "ExpressionStatement",
												"src": "1275:46:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2019,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1996,
															"src": "1346:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2016,
															"name": "poolsUSD",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "1332:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 2018,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1332:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1332:19:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2021,
												"nodeType": "ExpressionStatement",
												"src": "1332:19:11"
											}
										]
									},
									"functionSelector": "67b51834",
									"id": 2023,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1993,
											"modifierName": {
												"id": 1992,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1986,
												"src": "1127:9:11",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1127:9:11"
										}
									],
									"name": "addPoolUSD",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 2023,
												"src": "1087:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1087:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "_fee",
												"nodeType": "VariableDeclaration",
												"scope": 2023,
												"src": "1105:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1989,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1105:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1086:31:11"
									},
									"returnParameters": {
										"id": 1994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1137:0:11"
									},
									"scope": 2382,
									"src": "1067:292:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2046,
										"nodeType": "Block",
										"src": "1421:91:11",
										"statements": [
											{
												"expression": {
													"id": 2039,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2030,
															"name": "poolsUSD",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "1432:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 2032,
														"indexExpression": {
															"id": 2031,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2025,
															"src": "1441:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1432:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 2033,
															"name": "poolsUSD",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "1450:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 2038,
														"indexExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2037,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2034,
																	"name": "poolsUSD",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1935,
																	"src": "1459:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 2035,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1459:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"hexValue": "31",
																"id": 2036,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1477:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1459:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1450:29:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1432:47:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2040,
												"nodeType": "ExpressionStatement",
												"src": "1432:47:11"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2041,
															"name": "poolsUSD",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "1490:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 2043,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "pop",
														"nodeType": "MemberAccess",
														"src": "1490:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypop_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1490:14:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2045,
												"nodeType": "ExpressionStatement",
												"src": "1490:14:11"
											}
										]
									},
									"functionSelector": "32a6013c",
									"id": 2047,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2028,
											"modifierName": {
												"id": 2027,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1986,
												"src": "1412:9:11",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1412:9:11"
										}
									],
									"name": "removePoolUSD",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "1390:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2024,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:13:11"
									},
									"returnParameters": {
										"id": 2029,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1421:0:11"
									},
									"scope": 2382,
									"src": "1367:145:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2074,
										"nodeType": "Block",
										"src": "1586:177:11",
										"statements": [
											{
												"assignments": [
													null,
													2055,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 2055,
														"mutability": "mutable",
														"name": "tick",
														"nodeType": "VariableDeclaration",
														"scope": 2074,
														"src": "1599:10:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 2054,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "1599:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 2063,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"baseExpression": {
																		"id": 2057,
																		"name": "poolsUSD",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1935,
																		"src": "1633:8:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 2059,
																	"indexExpression": {
																		"id": 2058,
																		"name": "index",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2049,
																		"src": "1642:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1633:15:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2056,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "1618:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 2060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1618:31:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 2061,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "1618:37:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint32,bool)"
														}
													},
													"id": 2062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1618:39:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint32,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1597:60:11"
											},
											{
												"expression": {
													"id": 2072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2064,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2052,
														"src": "1668:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2067,
																"name": "tick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2055,
																"src": "1719:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															{
																"hexValue": "31653138",
																"id": 2068,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1725:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															{
																"id": 2069,
																"name": "usd",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1930,
																"src": "1731:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 2070,
																"name": "bnb",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "1736:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																{
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 2065,
																"name": "OracleLibrary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1919,
																"src": "1676:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_OracleLibrary_$1919_$",
																	"typeString": "type(library OracleLibrary)"
																}
															},
															"id": 2066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getQuoteAtTick",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1563,
															"src": "1676:28:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_int24_$_t_uint128_$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (int24,uint128,address,address) pure returns (uint256)"
															}
														},
														"id": 2071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1676:78:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1668:86:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2073,
												"nodeType": "ExpressionStatement",
												"src": "1668:86:11"
											}
										]
									},
									"functionSelector": "c0404fa7",
									"id": 2075,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "usdToBnb",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2049,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "1538:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2048,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1538:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1537:13:11"
									},
									"returnParameters": {
										"id": 2053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2052,
												"mutability": "mutable",
												"name": "price",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "1575:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2051,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1575:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1574:12:11"
									},
									"scope": 2382,
									"src": "1520:243:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2102,
										"nodeType": "Block",
										"src": "1839:176:11",
										"statements": [
											{
												"assignments": [
													null,
													2083,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 2083,
														"mutability": "mutable",
														"name": "tick",
														"nodeType": "VariableDeclaration",
														"scope": 2102,
														"src": "1852:10:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 2082,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "1852:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 2091,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"baseExpression": {
																		"id": 2085,
																		"name": "poolsUSD",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1935,
																		"src": "1886:8:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 2087,
																	"indexExpression": {
																		"id": 2086,
																		"name": "index",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2077,
																		"src": "1895:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1886:15:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2084,
																"name": "IPancakeV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "1871:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																	"typeString": "type(contract IPancakeV3Pool)"
																}
															},
															"id": 2088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1871:31:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																"typeString": "contract IPancakeV3Pool"
															}
														},
														"id": 2089,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "1871:37:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint32,bool)"
														}
													},
													"id": 2090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1871:39:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint32,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1850:60:11"
											},
											{
												"expression": {
													"id": 2100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2092,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2080,
														"src": "1921:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2095,
																"name": "tick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2083,
																"src": "1972:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															{
																"hexValue": "31653138",
																"id": 2096,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1978:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															{
																"id": 2097,
																"name": "bnb",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "1984:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 2098,
																"name": "usd",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1930,
																"src": "1989:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																{
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 2093,
																"name": "OracleLibrary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1919,
																"src": "1929:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_OracleLibrary_$1919_$",
																	"typeString": "type(library OracleLibrary)"
																}
															},
															"id": 2094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getQuoteAtTick",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1563,
															"src": "1929:28:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_int24_$_t_uint128_$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (int24,uint128,address,address) pure returns (uint256)"
															}
														},
														"id": 2099,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1929:78:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1921:86:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2101,
												"nodeType": "ExpressionStatement",
												"src": "1921:86:11"
											}
										]
									},
									"functionSelector": "6c7474da",
									"id": 2103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "bnbToUsd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2077,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "1791:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2076,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1791:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1790:13:11"
									},
									"returnParameters": {
										"id": 2081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2080,
												"mutability": "mutable",
												"name": "price",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "1828:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2079,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1828:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1827:12:11"
									},
									"scope": 2382,
									"src": "1773:242:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2180,
										"nodeType": "Block",
										"src": "2103:598:11",
										"statements": [
											{
												"assignments": [
													2111
												],
												"declarations": [
													{
														"constant": false,
														"id": 2111,
														"mutability": "mutable",
														"name": "prices",
														"nodeType": "VariableDeclaration",
														"scope": 2180,
														"src": "2114:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2110,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2114:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2112,
												"nodeType": "VariableDeclarationStatement",
												"src": "2114:14:11"
											},
											{
												"assignments": [
													2114
												],
												"declarations": [
													{
														"constant": false,
														"id": 2114,
														"mutability": "mutable",
														"name": "validCount",
														"nodeType": "VariableDeclaration",
														"scope": 2180,
														"src": "2139:16:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 2113,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "2139:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2115,
												"nodeType": "VariableDeclarationStatement",
												"src": "2139:16:11"
											},
											{
												"body": {
													"id": 2165,
													"nodeType": "Block",
													"src": "2212:388:11",
													"statements": [
														{
															"assignments": [
																null,
																2128,
																null,
																null,
																null,
																null,
																null
															],
															"declarations": [
																null,
																{
																	"constant": false,
																	"id": 2128,
																	"mutability": "mutable",
																	"name": "tick",
																	"nodeType": "VariableDeclaration",
																	"scope": 2165,
																	"src": "2230:10:11",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	},
																	"typeName": {
																		"id": 2127,
																		"name": "int24",
																		"nodeType": "ElementaryTypeName",
																		"src": "2230:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"visibility": "internal"
																},
																null,
																null,
																null,
																null,
																null
															],
															"id": 2136,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"baseExpression": {
																					"id": 2130,
																					"name": "poolsUSD",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1935,
																					"src": "2264:8:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_storage",
																						"typeString": "address[] storage ref"
																					}
																				},
																				"id": 2132,
																				"indexExpression": {
																					"id": 2131,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2117,
																					"src": "2273:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2264:11:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2129,
																			"name": "IPancakeV3Pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 192,
																			"src": "2249:14:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IPancakeV3Pool_$192_$",
																				"typeString": "type(contract IPancakeV3Pool)"
																			}
																		},
																		"id": 2133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2249:27:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IPancakeV3Pool_$192",
																			"typeString": "contract IPancakeV3Pool"
																		}
																	},
																	"id": 2134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "slot0",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 535,
																	"src": "2249:33:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
																		"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint32,bool)"
																	}
																},
																"id": 2135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:35:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint32_$_t_bool_$",
																	"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint32,bool)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2227:57:11"
														},
														{
															"assignments": [
																2138
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2138,
																	"mutability": "mutable",
																	"name": "price",
																	"nodeType": "VariableDeclaration",
																	"scope": 2165,
																	"src": "2299:13:11",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2137,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2299:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2152,
															"initialValue": {
																"arguments": [
																	{
																		"id": 2141,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2128,
																		"src": "2362:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	{
																		"hexValue": "31653138",
																		"id": 2142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2385:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		},
																		"value": "1e18"
																	},
																	{
																		"condition": {
																			"id": 2143,
																			"name": "_mode",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2105,
																			"src": "2408:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"id": 2145,
																			"name": "bnb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1928,
																			"src": "2422:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 2146,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "2408:17:11",
																		"trueExpression": {
																			"id": 2144,
																			"name": "usd",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1930,
																			"src": "2416:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"condition": {
																			"id": 2147,
																			"name": "_mode",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2105,
																			"src": "2444:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"id": 2149,
																			"name": "usd",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1930,
																			"src": "2458:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 2150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "2444:17:11",
																		"trueExpression": {
																			"id": 2148,
																			"name": "bnb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1928,
																			"src": "2452:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		{
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 2139,
																		"name": "OracleLibrary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1919,
																		"src": "2315:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_OracleLibrary_$1919_$",
																			"typeString": "type(library OracleLibrary)"
																		}
																	},
																	"id": 2140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "getQuoteAtTick",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1563,
																	"src": "2315:28:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_int24_$_t_uint128_$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (int24,uint128,address,address) pure returns (uint256)"
																	}
																},
																"id": 2151,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2315:161:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2299:177:11"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2153,
																	"name": "price",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2138,
																	"src": "2497:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2154,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2505:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2497:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2164,
															"nodeType": "IfStatement",
															"src": "2493:96:11",
															"trueBody": {
																"id": 2163,
																"nodeType": "Block",
																"src": "2508:81:11",
																"statements": [
																	{
																		"expression": {
																			"id": 2158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2156,
																				"name": "prices",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2111,
																				"src": "2527:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"id": 2157,
																				"name": "price",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2138,
																				"src": "2537:5:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2527:15:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2159,
																		"nodeType": "ExpressionStatement",
																		"src": "2527:15:11"
																	},
																	{
																		"expression": {
																			"id": 2161,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "++",
																			"prefix": false,
																			"src": "2561:12:11",
																			"subExpression": {
																				"id": 2160,
																				"name": "validCount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2114,
																				"src": "2561:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"id": 2162,
																		"nodeType": "ExpressionStatement",
																		"src": "2561:12:11"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2120,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2117,
														"src": "2186:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 2121,
															"name": "poolsUSD",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "2190:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 2122,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2190:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2186:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2166,
												"initializationExpression": {
													"assignments": [
														2117
													],
													"declarations": [
														{
															"constant": false,
															"id": 2117,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 2166,
															"src": "2173:7:11",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 2116,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "2173:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2119,
													"initialValue": {
														"hexValue": "30",
														"id": 2118,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2183:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2173:11:11"
												},
												"loopExpression": {
													"expression": {
														"id": 2125,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2207:3:11",
														"subExpression": {
															"id": 2124,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2117,
															"src": "2207:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 2126,
													"nodeType": "ExpressionStatement",
													"src": "2207:3:11"
												},
												"nodeType": "ForStatement",
												"src": "2168:432:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 2170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2168,
																"name": "validCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2114,
																"src": "2620:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2169,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2633:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2620:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f20707269636520666f756e64",
															"id": 2171,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2636:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b70a416fb33cb8cd7a57a110560714a73ec6a52c87b48eb09d533392b0e05874",
																"typeString": "literal_string \"No price found\""
															},
															"value": "No price found"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b70a416fb33cb8cd7a57a110560714a73ec6a52c87b48eb09d533392b0e05874",
																"typeString": "literal_string \"No price found\""
															}
														],
														"id": 2167,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2612:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2612:41:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2173,
												"nodeType": "ExpressionStatement",
												"src": "2612:41:11"
											},
											{
												"expression": {
													"id": 2178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2174,
														"name": "average",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2108,
														"src": "2664:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2177,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2175,
															"name": "prices",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2111,
															"src": "2674:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2176,
															"name": "validCount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2114,
															"src": "2683:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"src": "2674:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2664:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2179,
												"nodeType": "ExpressionStatement",
												"src": "2664:29:11"
											}
										]
									},
									"id": 2181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_average",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2105,
												"mutability": "mutable",
												"name": "_mode",
												"nodeType": "VariableDeclaration",
												"scope": 2181,
												"src": "2051:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2104,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2051:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2050:12:11"
									},
									"returnParameters": {
										"id": 2109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "average",
												"nodeType": "VariableDeclaration",
												"scope": 2181,
												"src": "2086:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2086:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2085:17:11"
									},
									"scope": 2382,
									"src": "2033:668:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2192,
										"nodeType": "Block",
										"src": "2762:29:11",
										"statements": [
											{
												"expression": {
													"id": 2190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2188,
														"name": "bnb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1928,
														"src": "2773:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2189,
														"name": "_bnb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2183,
														"src": "2779:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2773:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2191,
												"nodeType": "ExpressionStatement",
												"src": "2773:10:11"
											}
										]
									},
									"functionSelector": "3b907d14",
									"id": 2193,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2186,
											"modifierName": {
												"id": 2185,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1986,
												"src": "2753:9:11",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2753:9:11"
										}
									],
									"name": "setBnbAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "_bnb",
												"nodeType": "VariableDeclaration",
												"scope": 2193,
												"src": "2732:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2732:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2731:14:11"
									},
									"returnParameters": {
										"id": 2187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2762:0:11"
									},
									"scope": 2382,
									"src": "2709:82:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2204,
										"nodeType": "Block",
										"src": "2852:29:11",
										"statements": [
											{
												"expression": {
													"id": 2202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2200,
														"name": "usd",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1930,
														"src": "2863:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2201,
														"name": "_usd",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2195,
														"src": "2869:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2863:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2203,
												"nodeType": "ExpressionStatement",
												"src": "2863:10:11"
											}
										]
									},
									"functionSelector": "5e59c8ce",
									"id": 2205,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2198,
											"modifierName": {
												"id": 2197,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1986,
												"src": "2843:9:11",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2843:9:11"
										}
									],
									"name": "setUsdAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2195,
												"mutability": "mutable",
												"name": "_usd",
												"nodeType": "VariableDeclaration",
												"scope": 2205,
												"src": "2822:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2822:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2821:14:11"
									},
									"returnParameters": {
										"id": 2199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2852:0:11"
									},
									"scope": 2382,
									"src": "2799:82:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2219,
										"nodeType": "Block",
										"src": "2917:59:11",
										"statements": [
											{
												"expression": {
													"id": 2217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2208,
															"name": "eqMode",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1939,
															"src": "2928:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2211,
														"indexExpression": {
															"expression": {
																"id": 2209,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2935:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2935:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2928:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "2949:19:11",
														"subExpression": {
															"baseExpression": {
																"id": 2212,
																"name": "eqMode",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1939,
																"src": "2950:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 2215,
															"indexExpression": {
																"expression": {
																	"id": 2213,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2957:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2214,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2957:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2950:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2928:40:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2218,
												"nodeType": "ExpressionStatement",
												"src": "2928:40:11"
											}
										]
									},
									"functionSelector": "65a6cc2e",
									"id": 2220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setEqMode",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2206,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2907:2:11"
									},
									"returnParameters": {
										"id": 2207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2917:0:11"
									},
									"scope": 2382,
									"src": "2889:87:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2230,
										"nodeType": "Block",
										"src": "3033:44:11",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 2225,
														"name": "eqMode",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1939,
														"src": "3051:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 2228,
													"indexExpression": {
														"expression": {
															"id": 2226,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3058:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 2227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3058:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3051:18:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2224,
												"id": 2229,
												"nodeType": "Return",
												"src": "3044:25:11"
											}
										]
									},
									"functionSelector": "026f0dbe",
									"id": 2231,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getEqMode",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3004:2:11"
									},
									"returnParameters": {
										"id": 2224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2223,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2231,
												"src": "3028:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2222,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3028:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3027:6:11"
									},
									"scope": 2382,
									"src": "2986:91:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2243,
										"nodeType": "Block",
										"src": "3133:62:11",
										"statements": [
											{
												"assignments": [
													2237
												],
												"declarations": [
													{
														"constant": false,
														"id": 2237,
														"mutability": "mutable",
														"name": "count",
														"nodeType": "VariableDeclaration",
														"scope": 2243,
														"src": "3140:10:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2236,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3140:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2240,
												"initialValue": {
													"expression": {
														"id": 2238,
														"name": "poolsUSD",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1935,
														"src": "3153:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 2239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "3153:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3140:28:11"
											},
											{
												"expression": {
													"id": 2241,
													"name": "count",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2237,
													"src": "3182:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2235,
												"id": 2242,
												"nodeType": "Return",
												"src": "3175:12:11"
											}
										]
									},
									"functionSelector": "f74b28c1",
									"id": 2244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "poolsLenght",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3105:2:11"
									},
									"returnParameters": {
										"id": 2235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2234,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2244,
												"src": "3128:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2233,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3128:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3127:6:11"
									},
									"scope": 2382,
									"src": "3085:110:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2261,
										"nodeType": "Block",
										"src": "3266:101:11",
										"statements": [
											{
												"assignments": [
													2250
												],
												"declarations": [
													{
														"constant": false,
														"id": 2250,
														"mutability": "mutable",
														"name": "em",
														"nodeType": "VariableDeclaration",
														"scope": 2261,
														"src": "3277:16:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 2249,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "3277:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2258,
												"initialValue": {
													"condition": {
														"baseExpression": {
															"id": 2251,
															"name": "eqMode",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1939,
															"src": "3296:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2254,
														"indexExpression": {
															"expression": {
																"id": 2252,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3303:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3303:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3296:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "424e4255534454",
														"id": 2256,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3330:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_aeee40e849f19d8b8252d9e750ed2ff6fa233c95aa4a1d3da9858a3b18ade5df",
															"typeString": "literal_string \"BNBUSDT\""
														},
														"value": "BNBUSDT"
													},
													"id": 2257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3296:43:11",
													"trueExpression": {
														"hexValue": "55534454424e42",
														"id": 2255,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3318:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_e2661eaeb48ddc0bb73a1032af41d82ed1df28482c0824857684fd3842a1c995",
															"typeString": "literal_string \"USDTBNB\""
														},
														"value": "USDTBNB"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3277:62:11"
											},
											{
												"expression": {
													"id": 2259,
													"name": "em",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2250,
													"src": "3357:2:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2248,
												"id": 2260,
												"nodeType": "Return",
												"src": "3350:9:11"
											}
										]
									},
									"functionSelector": "a1c6a405",
									"id": 2262,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getEqModeString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3227:2:11"
									},
									"returnParameters": {
										"id": 2248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2247,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2262,
												"src": "3251:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2246,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3251:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3249:16:11"
									},
									"scope": 2382,
									"src": "3203:164:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2273,
										"nodeType": "Block",
										"src": "3440:38:11",
										"statements": [
											{
												"expression": {
													"id": 2271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2269,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1932,
														"src": "3451:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2270,
														"name": "_newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2264,
														"src": "3459:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "3451:17:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 2272,
												"nodeType": "ExpressionStatement",
												"src": "3451:17:11"
											}
										]
									},
									"functionSelector": "a6f9dae1",
									"id": 2274,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2267,
											"modifierName": {
												"id": 2266,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1986,
												"src": "3430:9:11",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3430:9:11"
										}
									],
									"name": "changeOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2264,
												"mutability": "mutable",
												"name": "_newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 2274,
												"src": "3396:25:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3396:15:11",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3395:27:11"
									},
									"returnParameters": {
										"id": 2268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3440:0:11"
									},
									"scope": 2382,
									"src": "3375:103:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2300,
										"nodeType": "Block",
										"src": "3527:124:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2282,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3554:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_BNBPrice_$2382",
																				"typeString": "contract BNBPrice"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_BNBPrice_$2382",
																				"typeString": "contract BNBPrice"
																			}
																		],
																		"id": 2281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3546:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2280,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3546:7:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3546:13:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"id": 2284,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "3546:21:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "30",
																"id": 2285,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3571:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3546:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f7567682062616c616e6365",
															"id": 2287,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3574:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_62feb6dde0d8b91e793e4cfea2e07175444fe82cab5a2cd9e870981f43f4dbad",
																"typeString": "literal_string \"Not enough balance\""
															},
															"value": "Not enough balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_62feb6dde0d8b91e793e4cfea2e07175444fe82cab5a2cd9e870981f43f4dbad",
																"typeString": "literal_string \"Not enough balance\""
															}
														],
														"id": 2279,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3538:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3538:57:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2289,
												"nodeType": "ExpressionStatement",
												"src": "3538:57:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2295,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "3629:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_BNBPrice_$2382",
																			"typeString": "contract BNBPrice"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_BNBPrice_$2382",
																			"typeString": "contract BNBPrice"
																		}
																	],
																	"id": 2294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3621:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2293,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3621:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3621:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "3621:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2290,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1932,
															"src": "3606:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 2292,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "3606:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3606:37:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2299,
												"nodeType": "ExpressionStatement",
												"src": "3606:37:11"
											}
										]
									},
									"functionSelector": "448883d7",
									"id": 2301,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2277,
											"modifierName": {
												"id": 2276,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1986,
												"src": "3517:9:11",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3517:9:11"
										}
									],
									"name": "claimTax",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3505:2:11"
									},
									"returnParameters": {
										"id": 2278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3527:0:11"
									},
									"scope": 2382,
									"src": "3488:163:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2332,
										"nodeType": "Block",
										"src": "3688:187:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2305,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3707:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "3707:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2307,
																"name": "tax",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1945,
																"src": "3720:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3707:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "56616c7565204c6f77",
															"id": 2309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3726:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94b96659135750443dad29f06f0b8e2e6e447f1c000639161af8cc33428f974b",
																"typeString": "literal_string \"Value Low\""
															},
															"value": "Value Low"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94b96659135750443dad29f06f0b8e2e6e447f1c000639161af8cc33428f974b",
																"typeString": "literal_string \"Value Low\""
															}
														],
														"id": 2304,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3699:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3699:39:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2311,
												"nodeType": "ExpressionStatement",
												"src": "3699:39:11"
											},
											{
												"assignments": [
													2313
												],
												"declarations": [
													{
														"constant": false,
														"id": 2313,
														"mutability": "mutable",
														"name": "price",
														"nodeType": "VariableDeclaration",
														"scope": 2332,
														"src": "3749:13:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2312,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3749:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2320,
												"initialValue": {
													"arguments": [
														{
															"baseExpression": {
																"id": 2315,
																"name": "eqMode",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1939,
																"src": "3774:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 2318,
															"indexExpression": {
																"expression": {
																	"id": 2316,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3781:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2317,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3781:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3774:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2314,
														"name": "_average",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2181,
														"src": "3765:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bool_$returns$_t_uint256_$",
															"typeString": "function (bool) view returns (uint256)"
														}
													},
													"id": 2319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3765:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3749:44:11"
											},
											{
												"expression": {
													"id": 2326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2321,
															"name": "lastPrice",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1943,
															"src": "3804:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2324,
														"indexExpression": {
															"expression": {
																"id": 2322,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3814:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3814:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3804:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2325,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2313,
														"src": "3828:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3804:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2327,
												"nodeType": "ExpressionStatement",
												"src": "3804:29:11"
											},
											{
												"expression": {
													"id": 2330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2328,
														"name": "lastPriceStatic",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1926,
														"src": "3844:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2329,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2313,
														"src": "3862:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3844:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2331,
												"nodeType": "ExpressionStatement",
												"src": "3844:23:11"
											}
										]
									},
									"id": 2333,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3668:2:11"
									},
									"returnParameters": {
										"id": 2303,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3688:0:11"
									},
									"scope": 2382,
									"src": "3661:214:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2353,
										"nodeType": "Block",
										"src": "3938:111:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 2339,
																	"name": "lastPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1943,
																	"src": "3957:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2342,
																"indexExpression": {
																	"expression": {
																		"id": 2340,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3967:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2341,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3967:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3957:21:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3981:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3957:25:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2073746f726564207072696365",
															"id": 2345,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3984:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0a9ac45ed4cc24dcb8eed9659fe5ed43044473cd34da0559667ec6ef4fae7332",
																"typeString": "literal_string \"No stored price\""
															},
															"value": "No stored price"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0a9ac45ed4cc24dcb8eed9659fe5ed43044473cd34da0559667ec6ef4fae7332",
																"typeString": "literal_string \"No stored price\""
															}
														],
														"id": 2338,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3949:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3949:53:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2347,
												"nodeType": "ExpressionStatement",
												"src": "3949:53:11"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 2348,
														"name": "lastPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1943,
														"src": "4020:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 2351,
													"indexExpression": {
														"expression": {
															"id": 2349,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4030:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 2350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4030:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4020:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2337,
												"id": 2352,
												"nodeType": "Return",
												"src": "4013:28:11"
											}
										]
									},
									"functionSelector": "e03d1632",
									"id": 2354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "viewAverage",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3903:2:11"
									},
									"returnParameters": {
										"id": 2337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2336,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2354,
												"src": "3929:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2335,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3929:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3928:9:11"
									},
									"scope": 2382,
									"src": "3883:166:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2368,
										"nodeType": "Block",
										"src": "4113:99:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2362,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2360,
																"name": "lastPriceStatic",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1926,
																"src": "4132:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2361,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4150:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4132:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2073746f726564207072696365",
															"id": 2363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4153:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0a9ac45ed4cc24dcb8eed9659fe5ed43044473cd34da0559667ec6ef4fae7332",
																"typeString": "literal_string \"No stored price\""
															},
															"value": "No stored price"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0a9ac45ed4cc24dcb8eed9659fe5ed43044473cd34da0559667ec6ef4fae7332",
																"typeString": "literal_string \"No stored price\""
															}
														],
														"id": 2359,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4124:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4124:47:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2365,
												"nodeType": "ExpressionStatement",
												"src": "4124:47:11"
											},
											{
												"expression": {
													"id": 2366,
													"name": "lastPriceStatic",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1926,
													"src": "4189:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2358,
												"id": 2367,
												"nodeType": "Return",
												"src": "4182:22:11"
											}
										]
									},
									"functionSelector": "09cf28da",
									"id": 2369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "viewAverageStatic",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4083:2:11"
									},
									"returnParameters": {
										"id": 2358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2357,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2369,
												"src": "4108:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2356,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4108:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4107:6:11"
									},
									"scope": 2382,
									"src": "4057:155:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2380,
										"nodeType": "Block",
										"src": "4264:29:11",
										"statements": [
											{
												"expression": {
													"id": 2378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2376,
														"name": "tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1945,
														"src": "4275:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2377,
														"name": "_tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2371,
														"src": "4281:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4275:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2379,
												"nodeType": "ExpressionStatement",
												"src": "4275:10:11"
											}
										]
									},
									"functionSelector": "2e5bb6ff",
									"id": 2381,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2374,
											"modifierName": {
												"id": 2373,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1986,
												"src": "4254:9:11",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4254:9:11"
										}
									],
									"name": "setTax",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2371,
												"mutability": "mutable",
												"name": "_tax",
												"nodeType": "VariableDeclaration",
												"scope": 2381,
												"src": "4236:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2370,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4236:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4235:11:11"
									},
									"returnParameters": {
										"id": 2375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4264:0:11"
									},
									"scope": 2382,
									"src": "4220:73:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2383,
							"src": "284:4012:11"
						}
					],
					"src": "33:4265:11"
				},
				"id": 11
			}
		}
	}
}